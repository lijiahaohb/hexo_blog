{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1653965439540},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1653965439524},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1653965439524},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1653965439524},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1653965439524},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1653965439528},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1653965439528},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1653965439528},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1653965439540},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1653965439540},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1653965439540},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1653965439544},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1653965439544},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1653965439544},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1653965439544},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1653965439548},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1653965439548},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1653965439548},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1653965439552},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1653965439536},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1653965439552},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1653965439552},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1653965439552},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653965439556},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653965439556},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1653965439556},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1653965439556},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1653965439560},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1653965439572},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1653965439568},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1653965439572},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1653965439572},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1653965439564},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1653965439572},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1653965439572},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1653965439572},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1653965439572},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1653965439580},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1653965439580},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1653965439576},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1653965439576},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1653965439580},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1653965439580},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1653965439576},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1653965439576},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1653965439580},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1653965439584},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1653965439584},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1653965439580},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1653965439588},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1653965439580},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1653965439584},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1653965439588},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1653965439576},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1653965439588},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1653965439588},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1653965439588},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1653965439588},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1653965439588},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1653965439588},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1653965439588},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1653965439584},{"_id":"source/_posts/config.md","hash":"0d0b2143a05e851eb1c556ef3623630765e1dba8","modified":1653279155461},{"_id":"source/_posts/go_debug.md","hash":"95187a106f3e8dec9a4145c03df2af3d895217e8","modified":1652837606051},{"_id":"source/_posts/go_chat.md","hash":"45453564ed083d78f95eb92c6fa309595884e4b3","modified":1652278084640},{"_id":"source/_posts/docker_learning.md","hash":"0a77ae1f4cdcf98f7f6d5b3bc641168eed7c2449","modified":1651669153148},{"_id":"source/_posts/go_gorm.md","hash":"cb0882b56c5b0d02a94b7503e5902b1d254a39a8","modified":1652841460246},{"_id":"source/_posts/go_gin.md","hash":"c75f0b95ddb7f86eb46052d82f339c9cc8589b75","modified":1651049501642},{"_id":"source/_posts/go_im.md","hash":"28cb0d9f843ae09f06ae011b9fead709a18dd9ca","modified":1651730228934},{"_id":"source/_posts/go_kafka.md","hash":"0848c7a593beb1fee0fed2e8aac123792aa46398","modified":1651052547202},{"_id":"source/_posts/go_live.md","hash":"6ada53f66e0d57a0fb66819a3d262786891ac958","modified":1652447443285},{"_id":"source/_posts/go_redis.md","hash":"c3300d1002678f18648758009a22e3099e710ec8","modified":1651033844758},{"_id":"source/_posts/kafka.md","hash":"ccd2d231481f5cf52c4f71d2f03bd2d9e59ba284","modified":1651051772468},{"_id":"source/_posts/go_rpc.md","hash":"1312a8023ecccd8b4992dfd1467bf60ac8cd9132","modified":1651194219196},{"_id":"source/_posts/go_test.md","hash":"f1f36ad5c9d6567f7d1a1b81c5291f7c68213f6b","modified":1652104131825},{"_id":"source/_posts/redis_basic.md","hash":"3a70c41a151759ac6156e81c550d161c7c6a1a99","modified":1651032462761},{"_id":"source/_posts/redis_cluster.md","hash":"7bfc41a2d1e9eb130f4ec9e5b92df0c89e69bcd5","modified":1651032504938},{"_id":"source/_posts/go/config.md","hash":"8987e3e4854b0f8e22cee903276cb24b2ddb1a29","modified":1653990737945},{"_id":"source/_posts/go/docker_learning.md","hash":"55735db43f2d2e59bb165f695e9a6ba0007a0078","modified":1653990688595},{"_id":"source/_posts/go/go_chat.md","hash":"38b6343aa36721765ed556bf815657f35540e099","modified":1653992804590},{"_id":"source/_posts/go/go_debug.md","hash":"9d4f512d6da868496f64feddc5c992507464cd91","modified":1653990688595},{"_id":"source/_posts/go/go_gin.md","hash":"3120d10d3c41da632193e0965ba246854abff5e2","modified":1653990688595},{"_id":"source/_posts/go/go_gorm.md","hash":"7069a108fe91ecb7d08514802cb906011922f59f","modified":1653990688595},{"_id":"source/_posts/go/go_im.md","hash":"9025d8cf4406179b6ed80b6ca0fcd76c7e6aaca8","modified":1653990688595},{"_id":"source/_posts/go/go_kafka.md","hash":"c4f4dbc6cca401086243fbc4881ea7c5aae8acae","modified":1653990688595},{"_id":"source/_posts/go/go_live.md","hash":"6e8ef9cb6dc9dc3fdd7483b3bf161d5b49b66508","modified":1653990688595},{"_id":"source/_posts/go/go_redis.md","hash":"0e5ba28b37e43e9641d42fe8b9c2722968b9fcb8","modified":1656815448106},{"_id":"source/_posts/go/go_rpc.md","hash":"4766410050c4ab56213334c486cd68a5b8bd60a6","modified":1653990688595},{"_id":"source/_posts/go/go_test.md","hash":"e290aa94a7811ec3cffe40816604953f2c990990","modified":1653990688595},{"_id":"source/_posts/go/kafka.md","hash":"4cd095306d32b87780c254c61f6b9699acbc0bef","modified":1653990688595},{"_id":"source/_posts/go/redis_basic.md","hash":"5c497e775a2022d75a98434fd23d8bdad7460197","modified":1653990688595},{"_id":"source/_posts/go/redis_cluster.md","hash":"854fa8dc47fce45c63d8e9eb52041890b0c4f1a7","modified":1653990688595},{"_id":"source/_posts/themes/butterfly/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1653966494297},{"_id":"source/_posts/themes/butterfly/.git/config","hash":"2798b391a5b9d31ffbb1a38ec4ff216c84f96e28","modified":1653966625606},{"_id":"source/_posts/themes/butterfly/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/fsmonitor-watchman.sample","hash":"55a762007dd48d229ef89fe8d0882256dcbee41a","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1653966494293},{"_id":"source/_posts/themes/butterfly/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1653966494293},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"66b4889591d0f36696c4d363412c753b6fe25519","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"08afd014fd27019909f341a2ad6162665958c6d6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"390288cffa0aa1338c02e7f240bafa6eef1d4f4c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"5e39dec92b224cd27b1833626875b4f7a2a94e4f","modified":1653969160087},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"54511ed299a3bcf4ecbb62e3078f6b0611ccbd2c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"da27c20f0e672103b984e135eb2fe7770ca7fcce","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/config.js","hash":"a12b9f11d7d3f52de5b2090d2805d7303e0187a5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"19a05dccfbffdf31cfa48c3208542b924637303d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"460c37caeed6e6e72c1e62292e6c5e9699dd5937","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ca58af8903eb1d1d05edae54fc2e23aeac6da6c5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"e4b7bf91a29bd03181593b63e1f3ee1103af2e48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"693d999777dd16e0566d29ac3203d4c167b2f9a7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"81c6070e06ecc2244040c7007566d7972f46ec4e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"31b007dc0f3de52176f278012ecf17a4bcecde2c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"f4dc7d02c8192979404ae9e134c5048d3d0a76e2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":499162500000},{"_id":"source/_posts/。/README.md","hash":"4bc84f1abaa729ce64c654f6b3108594e9d6b2ac","modified":1652498403049},{"_id":"source/_posts/。/_sidebar.md","hash":"e2c7e196542d3f48008f428b050e182ac6028572","modified":1652498419949},{"_id":"source/_posts/。/live_server.md","hash":"c1fb14c89cf9de33b7d5d668adaf6b97424b039c","modified":1652498022650},{"_id":"source/_posts/。/live_protocol.md","hash":"24c69016430fc0109536a85a6fe1c066dcf0666a","modified":1652773026775},{"_id":"source/_posts/tools/_sidebar.md","hash":"43fa54b8d6c3572cb8582154852dd086f9f89c48","modified":1650872390795},{"_id":"source/_posts/tools/git_learning.md","hash":"0c659da51e0ce4a32edc5ed31ea655b171ed4c23","modified":1657464429927},{"_id":"source/_posts/tools/README.md","hash":"003e3e243859ed9f0da8bcfb129995f3f21c2629","modified":1650870466195},{"_id":"source/categories/index.md","hash":"9013b4f2ff28412acaf0eaa8830d926af17faf4d","modified":1653990558436},{"_id":"source/_posts/av/live_protocol.md","hash":"9f47239e7e3320fad87f3a455fdc930ddef2679d","modified":1653990787354},{"_id":"source/_posts/av/live_server.md","hash":"07302ffd02adcfee48517ca8701c4e8700c0d726","modified":1653990771310},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1653991135292},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1653991135292},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1653991135296},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1653991135296},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1653991135296},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1653991135296},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1653991135296},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1653991135292},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1653991135296},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1653991135296},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1653991135300},{"_id":"themes/next/_config.yml","hash":"d4e64a3847c7fdb66a99f46ce96d0da927db4900","modified":1653993343481},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1653991135292},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1653991135296},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1653991135292},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1653991135296},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1653991135296},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1653991135296},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1653991135296},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1653991135296},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1653991135296},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1653991135296},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1653991135296},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1653991135296},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1653991135296},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1653991135296},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1653991135296},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1653991135296},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1653991135296},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1653991135296},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1653991135296},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1653991135296},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1653991135296},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1653991135296},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1653991135296},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1653991135296},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1653991135296},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1653991135296},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1653991135296},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1653991135296},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1653991135296},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1653991135296},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1653991135296},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1653991135296},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1653991135296},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1653991135296},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1653991135296},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1653991135296},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1653991135300},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1653991135300},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1653991135300},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1653991135300},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1653991135300},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1653991135300},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1653991135300},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1653991135300},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1653991135300},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1653991135300},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1653991135300},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1653991135300},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1653991135300},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1653991135292},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1653991135292},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1653991135296},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1653991135300},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1653991135296},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1653991135296},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1653991135296},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1653991135296},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1653991135296},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1653991135296},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1653991135300},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1653991135300},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1653991135300},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1653991135300},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1653991665220},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1653991135300},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1653991135300},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1653991135300},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1653991135300},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1653991135300},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1653991135300},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1653991135300},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1653991135300},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1653991135300},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1653991135300},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1653991135300},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1653991135300},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1653991135300},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1653991135300},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1653991135300},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1653991135300},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1653991135300},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1653991135300},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1653991135300},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1653991135300},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1653991135300},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1653991135300},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1653991135300},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1653991135300},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1653991135300},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1653991135300},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1653991135300},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1653991135300},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1653991135300},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1653991135300},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1653991135300},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1653991135300},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1653991135304},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1653991135304},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1653991135304},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1653991135304},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1653991135304},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1653991135304},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1653991135304},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1653991135304},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1653991135304},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1653991135304},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1653991135304},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1653991135304},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1653991135304},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1653991135304},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1653991135304},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1653991135304},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1653991135304},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1653991135304},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1653991135308},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1653991135308},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1653991135308},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1653991135308},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1653991135300},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1653991135300},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1653991135300},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1653991135300},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1653991135300},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1653991135300},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1653991135300},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1653991135300},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1653991135300},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1653991135300},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1653991135300},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1653991135300},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1653991135300},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1653991135300},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1653991135300},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1653991135304},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1653991135300},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1653991135300},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1653991135300},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1653991135300},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1653991135300},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1653991135300},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1653991135300},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1653991135300},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1653991135300},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1653991135300},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1653991135300},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1653991135300},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1653991135300},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1653991135300},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1653991135300},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1653991135300},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1653991135300},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1653991135300},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1653991135300},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1653991135300},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1653991135300},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1653991135300},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1653991135300},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1653991135300},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1653991135300},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1653991135300},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1653991135300},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1653991135300},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1653991135300},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1653991135300},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1653991135300},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1653991135300},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1653991135304},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1653991135304},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1653991135304},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1653991135304},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1653991135308},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1653991135304},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1653991135308},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1653991135308},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1653991135304},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1653991135308},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1653991135304},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1653991135308},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1653991135304},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1653991135304},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1653991135308},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1653991135304},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1653991135304},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1653991135304},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1653991135304},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1653991135308},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1653991135308},{"_id":"source/_posts/frontend/react_learning.md","hash":"8fad2013bec1c843f665592099b0faabaefac6c7","modified":1653999423882},{"_id":"source/_posts/frontend/_sidebar.md","hash":"e79bc70296bbdbd7a9404b92aae8c457338a9168","modified":1652273855953},{"_id":"source/_posts/frontend/README.md","hash":"3be5c93742939db0cf8483f0c0ef90bb5dd260fa","modified":1652273829648},{"_id":"source/_posts/go/go_micro.md","hash":"af5038f5dcbe73a352244f414393f3187de31b73","modified":1654654850202},{"_id":"source/_posts/tools/linux_operation.md","hash":"9544ff452aee689722c26e11e5bd00ac1fd1b3a1","modified":1657431305722},{"_id":"source/_posts/go/.go_micro.md.swp","hash":"b9745ee445ae674fd43380484ba285f547f53e9f","modified":1654654858270},{"_id":"source/_posts/go/dump.rdb","hash":"87d756e94ffe3e5693670044e45915a545046f5b","modified":1657431337505},{"_id":"source/_posts/img/arch.png","hash":"f7a1520091cd92ae7054b25e254aba1301f5bf77","modified":1654242897000},{"_id":"source/_posts/go/go_config.md","hash":"d68f58fce969d0bc50da22fca240db73d87e7383","modified":1657162666133}],"Category":[{"name":"Golang学习","_id":"cl3tyo0vu000bgewz00iv72oz"},{"name":"GolangStudy","_id":"cl3tyugyr000dgewz98idcdpx"},{"name":"av","_id":"cl3tzef5q000vgewzh2mu1rqw"},{"name":"tools","_id":"cl3tzf800000ygewzg2escnh0"}],"Data":[],"Page":[{"title":"categories","date":"2022-05-31T09:30:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-31 17:30:16\ntype: \"categories\"\n---\n","updated":"2022-05-31T09:49:18.436Z","path":"categories/index.html","_id":"cl3tyldvz000agewzezoqd7qu","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker基础","_content":"\n# docker\n\n## docker架构\n\n* docker架构\n\t- docker client\n\t- docker daemon\n\t\t* containers\n\t\t* images\n\t- registry\n\n* docker的守护进程\n\t- 查看守护进程的状态: `sudo service docker status`\n\t- 启动、关闭、重启守护进程\n\t``` bash\n\t# 停止守护进程\n\tsudo service docker stop\n\t# 启动守护进程\n\tsudo service docker start\n\t# 重启守护进程\n\tsudo service docker restart\n\t```\n\t- 守护进程的配置\n\n\n## 容器\n\n* <b>运行容器</b>\n\n\t<font color=\"red\"><b>note: </b></font>运行容器的时候需要给容器一个要执行的任务，该任务执行完之后，容器就自动停止了\n\n\t``` bash\n\tsudo docker run --name mysql8019 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 -d mysql:8.0.19\n\n\tsudo docker run -it --network host --rm mysql mysql -h127.0.0.1 -P13306 --default-character-set=utf8mb4 -uroot -p\n\n\t# 创建一个守护式容器(在后台运行)\n\tsudo docker run --name daemon_dave -d ubuntu /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\t```\n\n\t命令格式:<br/>\n\tUsage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...] <br/>\n\t-i, --interactive=false 是否打开控制台交互 <br/>\n\t-t, --tty=false 是否分配tty设备支持终端登录 <br/>\n\t-d,    创建守护式容器，在后台运行，为了防止容器停止，给其一个运行的任务 <br/>\n\t-e,    指定环境变量，容器中可以使用该环境变量 <br/>\n\t-P,    指定容器的端口号 <br/>\n\t-p,    指定本地端口到容器内部端口的映射 <br/>\n\t--rm,  指定容器停止后自动删除容器 <br/>\n\t-h,    指定容器的主机名 <br/>\n\t--name 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字 <br/>\n\n* <b>查看容器信息</b>\n\t``` bash\n\tsudo docker info\n\t```\n\n* <b>显示容器</b>\n\t``` bash\n\t# 显示全部容器\n\tsudo docker ps -a\n\n\t# 显示当前运行的容器\n\tsudo docker ps\n\t```\n\n* <b>启动容器</b>\n\t``` bash\n\t# 启动一个已经停止的容器\n\tsudo docker start 容器ID\n\n\t# 重启一个容器\n\tsudo docker restart 容器ID\n\t```\n\n* <b>容器附着</b>\n\t``` bash\n\t# 进入一个运行中的容器\n\tsudo docker attach 容器ID\n\t```\n\n* <b>关闭容器</b>\n\t``` bash\n\t# 关闭运行中的容器\n\tsudo docker stop 容器ID\n\t```\n\n* <b>容器日志查看</b>\n\t``` bash\n\t# 通过容器名查看\n\tsudo docker logs bob_the_container\n\n\t# 通过容器ID查看\n\tsudo docker logs 16ecf568ca88\n\n\t# 查看守护容器的日志消息\n\n\t# -f：类似于tail -f命令，可以用来监控Docker的日志，会持续动态更新打印日志的内容，按下Ctrl+C可退出查看\n\tsudo docker logs -f daemon_dave\n\n\t# --tail 用来查看日志的某一片段\n\n\t# 查看日志的最后10行内容\n\tsudo docker logs --tail 10 daemon_dave\n\t# 查看某个容器的最新日志而不必读取整个日志文件\n\tsudo docker logs --tail 0 -f daemon_dave\n\t \n\t# --t 为每一条日志加上时间戳\n\tsudo docker logs -ft daemon_dave\n\t```\n\n* <b>容器的进程信息</b>\n\t``` bash\n\tsudo docker top 容器ID/容器名称\n\t```\n\n* <b>容器的统计信息</b>\n\t``` bash\n\tsudo docker stats 容器ID/容器名称\n\t```\n\n* <b>容器的详细信息</b>\n\t``` bash\n\tsudo docker inspect\n\t```\n\n* <b>在容器的内部执行新程序</b>\n\t``` bash\n\t# 先运行容器\n\tsudo docker start lijiahao\n\n\t# 在不进入该容器的情况下，让其执行一条touch命令\n\tsudo docker exec bob_the_container touch /etc/new_config_file\n\n\t# 进入该容器，可以查看到该文件创建成功\n\tsudo docker attach lijiahao \n\tls /etc/new_config_file\n\t```\n\n\t``` bash\n\t# 在一个守护容器中启动新的任务 /bin/bash\n\tsudo docker exec -it 66ba58480ea9 /bin/bash\n\t```\n\n* <b>自动重启容器</b>\n\n\t--restart选项可以让Dcoker在出错的情况下自动重启 <br/>\n\t--restart会检查容器的退出代码，并依次来判断是否要重启容器 <br/>\n\t默认的情况下，Docker是不会重启任何容器的 <br/>\n\n\t创建一个容器：--restart的取值为always，表示Docker总是会自动重启该容器\n\n\t``` bash\n\tsudo docker run --restart=always -i -t --name container_dong -d ubuntu /bin/sh\n\t```\n\n\t创建一个容器: on-failure标志表示只有当容器的退出代码为非0值的时候才会自动重启 <br/>\n\ton-failure标志后面还接一个可选的数值，表示最多重启多少次\n\n\t``` bash\n\tsudo docker run --restart=on-failure:5 -i -t --name container_dong -d ubuntu /bin/sh\n\t```\n\n* <b>删除容器</b>\n\t``` bash\n\t# 删除容器\n\tsudo docker rm 容器ID\n\n\t# 删除所有容器(-q 只列出容器ID)\n\tsudo docker rm $(sudo docker ps -aq)\n\t```\n\n* <b>导出容器</b>\n\t``` bash\n\t# 导出容器\n\tsudo docker export 容器ID > xxx.tar\n\t```\n\n* 导入容器\n\t``` bash\n\tsudo docker load -i xxx.tar\n\t```\n\n## 镜像\n\n* <b>查看本地镜像</b>\n\t``` bash\n\t# 查看本地镜像\n\tsudo docker images\n\t```\n\n* <b>删除本地镜像</b>\n\t``` bash\n\t# 删除指定镜像\n\tsudo docker rmi 镜像名\n\t# 强制删除镜像(会把镜像生成的容器一并删除)\n\tsudo docker rmi -f 镜像名\n\t# 删除所有镜像\n\tsudo docker rmi $(sudo docker images -q)\n\t```\n\n* <b>镜像标签</b>\n\t``` bash\n\t# 为了区分一个仓库中不同的镜像，Docker提供了标签（tag）的功能\n\t```\n\n* <b>存储路径</b>\n\t``` bash\n\t/var/lib/docker：该目录存放着Docker镜像、容器以及容器的配置\n\t/var/lib/docker/image：这个目录下存放着镜像\n\t/var/lib/docker/containers：所有的容器都保存在该目录下\n\t```\n\n* <b>镜像的拉取</b>\n\t``` bash\n\t# 如果本地没有ubuntu镜像，就会去Docker Hub中拉取镜像\n\tsudo docker run -t -i ubuntu /bin/bash\n\n\t# 拉取镜像\n\tsudo docker pull ubuntu\n\n\t# docker run和docker pull在下载镜像的时候，如果没有指定镜像的标签，那么默认下载的是标签为“latest”的镜像\n\t```\n\n* <b>镜像的推送</b>\n\t``` bash\n\t# 登录\n\tsudo docker login\n\n\t# 更改仓库名(更改的仓库名必须前面是 用户名)\n\tsudo docker tag  lijiahao/static_web:v2 lijahaohb/static_web:v2\n\n\t# push\n\tsudo docker push lijahaohb/static_web:v2\n\t```\n\n* <b>镜像的搜素</b>\n\t``` bash\n\t# 通过docker search命令来查找所有Docker Hub上公共的可用镜像\n\tsudo docker search puppet\n\t```\n\n* <b>镜像的构建</b>\n\t``` bash\n\t# 使用docker commit命令来提交一个新镜像\n\n\t# 演示案例\n\t# 第一步：运行一个带有ubuntu镜像的容器\n\tsudo docker run -i -t ubuntu /bin/bash\n\n\t# 第二步：然后我们在该ubuntu镜像系统中安装Apache软件包\n\t# 更新，-yqq忽略所有提示信息\n\tapt-get -yqq update\n\t# 安装apache2服务器\n\tapt-get -y install apache2\n\n\t# 提交指定的容器 \n\t# 查看刚才那个容器的ID\n\tsudo docker ps -a\n\t# 提交定制容器，需要指定容器ID、镜像名\n\tsudo docker commit f3f694f1fc97 jamtur01/apache2\n\n\t# 第四步：查看一下新创建的镜像\n\tsudo docker images jamtur01/apache2\n\n\t# 第五步：可以通过dcoker inspect命令查看新创建的镜像的详细信息\n\tsudo docker inspect jamtur01/apache2\n\t```\n\n* <b>dockerfile + docker build</b>\n\t- 项目地址\n\n\t\t[自己制作的项目地址](https://github.com/gzyunke/test-docker)\n\t- 编写`dockerfile`\n\n\t\t`dockerfile:`\n\t\t``` dockerfile\n\t\tFROM node:11\n\t\tMAINTAINER easydoc.net\n\n\t\t# 复制代码\n\t\tADD . /app\n\n\t\t# 设置容器启动后的默认运行目录\n\t\tWORKDIR /app\n\n\t\t# 运行命令，安装依赖\n\t\t# RUN 命令可以有多个，但是可以用 && 连接多个命令来减少层级。\n\t\t# 例如 RUN npm install && cd /app && mkdir logs\n\t\tRUN npm install --registry=https://registry.npm.taobao.org\n\n\t\t# CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。\n\t\t# 如果还需要运行其他命令可以用 && 连接，也可以写成一个shell脚本去执行。\n\t\t# 例如 CMD cd /app && ./start.sh\n\t\tCMD node app.js\n\t\t```\n\t- 使用`docker build`指令构建镜像\n\t\t``` bash\n\t\tsudo docker build -t=test:v1 .\n\t\t```\n\t- 查看镜像是否构建成功\n\t\t``` bash\n\t\tsudo docker images\n\t\t```\n\t- 查看构建历史\n\t\t``` bash\n\t\tsudo docker history test:v1 \n\t\t```\n\t- 根据上面创建的镜像运行一个容器\n\t\t``` bash\n\t\tsudo docker run -d -p 8080:8080 --name test-hello test:v1\n\t\t```\n\n## 目录挂载\n\n* `bind mount` 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上\n* `volume` 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上\n* `tmpfs mount` 适合存储临时文件，存宿主机内存中。不可多容器共享。\n\t``` bash\n\t# bind mount 方式用绝对路径 -v /home/lijiahao/docker/test-docker:/code:/app\n\n\t# volume 方式，只需要一个名字 -v db-data:/app\n\n\tsudo docker run -p 8080:8080 --name test-hello -v /home/lijiahao/docker/test-docker:/app -d test:v1\n\t```\n\n## 容器间通信\n\n* 容器间通信的方式\n\t- docker内部网路\n\t- docker networking功能\n\t- docker链接\n\n* docker networking\n\t``` bash\n\t# 1. 创建新的Docker网络\n\tsudo docker network create test-net\n\n\t# 2. 查看新创建的网络\n\tsudo docker network inspect test-net\n\n\t# 3. 列出当前宿主机中所有的网络\n\tsudo docker network ls\n\n\t# 4. 启动容器，并加入到app新网络\n\tsudo docker run -d --name redis --network test-net --network-alias redis redis:latest\n\n\t# 5. 启动另一个容器，并加入到app新网络\n\tsudo docker run -p 8080:8080 --name test -v /home/lijiahao/docker/test-docker:/app --network test-net -d test:v1\n\t```\n\n* docker链接\n\n## docker-compose\n\n* docker-compose安装\n\t``` bash\n\t# 安装docker-compose稳定版本\n\tsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n\t# 对二进制文件应用可执行权限\n\tsudo chmod +x /usr/local/bin/docker-compose\n\n\t# 验证安装是否成功\n\tdocker-compose --help\n\t```\n\n* docker-compose 使用\n\t- 编写`docker-compose.yml`\n\t\t\n\t\t`docker-compose.yml`\n\t\t``` yml\n\t\tversion: \"3.7\"\n\n\t\tservices:\n\t\t  app:\n\t\t\tbuild: ./\n\t\t\tports:\n\t\t\t  - 80:8080\n\t\t\tvolumes:\n\t\t\t  - ./:/app\n\t\t\tenvironment:\n\t\t\t  - TZ=Asia/Shanghai\n\t\t  redis:\n\t\t\timage: redis:5.0.13\n\t\t\tvolumes:\n\t\t\t  - redis:/data\n\t\t\tenvironment:\n\t\t\t  - TZ=Asia/Shanghai\n\n\t\tvolumes:\n\t\t  redis:\n\t\t```\n\t- 启动\n\t\t``` bash\n\t\tsudo docker-compose up -d\n\t\t```\n\t- 查看运行状态\n\t\t``` bash\n\t\tsudo docker-compose ps\n\t\t```\n\t- 停止运行\n\t\t``` bash\n\t\tsudo docker-compose stop\n\t\t```\n\t- 重启\n\t\t``` bash\n\t\tsudo docker-compose restart\n\t\t```\n\t- 重启单个服务\n\t\t``` bash\n\t\tsudo docker-compose restart service-name\n\t\t```\n\t- 进入容器命令行\n\t\t``` bash\n\t\tsudo docker-compose exec service-name sh\n\t\t```\n\t- 查看容器运行log\n\t\t``` bash\n\t\tsudo docker-compose logs [service-name]\n\t\t```\n\n","source":"_posts/go/docker_learning.md","raw":"---\ntitle: docker基础 \ncategories: \n- GolangStudy\n---\n\n# docker\n\n## docker架构\n\n* docker架构\n\t- docker client\n\t- docker daemon\n\t\t* containers\n\t\t* images\n\t- registry\n\n* docker的守护进程\n\t- 查看守护进程的状态: `sudo service docker status`\n\t- 启动、关闭、重启守护进程\n\t``` bash\n\t# 停止守护进程\n\tsudo service docker stop\n\t# 启动守护进程\n\tsudo service docker start\n\t# 重启守护进程\n\tsudo service docker restart\n\t```\n\t- 守护进程的配置\n\n\n## 容器\n\n* <b>运行容器</b>\n\n\t<font color=\"red\"><b>note: </b></font>运行容器的时候需要给容器一个要执行的任务，该任务执行完之后，容器就自动停止了\n\n\t``` bash\n\tsudo docker run --name mysql8019 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 -d mysql:8.0.19\n\n\tsudo docker run -it --network host --rm mysql mysql -h127.0.0.1 -P13306 --default-character-set=utf8mb4 -uroot -p\n\n\t# 创建一个守护式容器(在后台运行)\n\tsudo docker run --name daemon_dave -d ubuntu /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n\t```\n\n\t命令格式:<br/>\n\tUsage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...] <br/>\n\t-i, --interactive=false 是否打开控制台交互 <br/>\n\t-t, --tty=false 是否分配tty设备支持终端登录 <br/>\n\t-d,    创建守护式容器，在后台运行，为了防止容器停止，给其一个运行的任务 <br/>\n\t-e,    指定环境变量，容器中可以使用该环境变量 <br/>\n\t-P,    指定容器的端口号 <br/>\n\t-p,    指定本地端口到容器内部端口的映射 <br/>\n\t--rm,  指定容器停止后自动删除容器 <br/>\n\t-h,    指定容器的主机名 <br/>\n\t--name 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字 <br/>\n\n* <b>查看容器信息</b>\n\t``` bash\n\tsudo docker info\n\t```\n\n* <b>显示容器</b>\n\t``` bash\n\t# 显示全部容器\n\tsudo docker ps -a\n\n\t# 显示当前运行的容器\n\tsudo docker ps\n\t```\n\n* <b>启动容器</b>\n\t``` bash\n\t# 启动一个已经停止的容器\n\tsudo docker start 容器ID\n\n\t# 重启一个容器\n\tsudo docker restart 容器ID\n\t```\n\n* <b>容器附着</b>\n\t``` bash\n\t# 进入一个运行中的容器\n\tsudo docker attach 容器ID\n\t```\n\n* <b>关闭容器</b>\n\t``` bash\n\t# 关闭运行中的容器\n\tsudo docker stop 容器ID\n\t```\n\n* <b>容器日志查看</b>\n\t``` bash\n\t# 通过容器名查看\n\tsudo docker logs bob_the_container\n\n\t# 通过容器ID查看\n\tsudo docker logs 16ecf568ca88\n\n\t# 查看守护容器的日志消息\n\n\t# -f：类似于tail -f命令，可以用来监控Docker的日志，会持续动态更新打印日志的内容，按下Ctrl+C可退出查看\n\tsudo docker logs -f daemon_dave\n\n\t# --tail 用来查看日志的某一片段\n\n\t# 查看日志的最后10行内容\n\tsudo docker logs --tail 10 daemon_dave\n\t# 查看某个容器的最新日志而不必读取整个日志文件\n\tsudo docker logs --tail 0 -f daemon_dave\n\t \n\t# --t 为每一条日志加上时间戳\n\tsudo docker logs -ft daemon_dave\n\t```\n\n* <b>容器的进程信息</b>\n\t``` bash\n\tsudo docker top 容器ID/容器名称\n\t```\n\n* <b>容器的统计信息</b>\n\t``` bash\n\tsudo docker stats 容器ID/容器名称\n\t```\n\n* <b>容器的详细信息</b>\n\t``` bash\n\tsudo docker inspect\n\t```\n\n* <b>在容器的内部执行新程序</b>\n\t``` bash\n\t# 先运行容器\n\tsudo docker start lijiahao\n\n\t# 在不进入该容器的情况下，让其执行一条touch命令\n\tsudo docker exec bob_the_container touch /etc/new_config_file\n\n\t# 进入该容器，可以查看到该文件创建成功\n\tsudo docker attach lijiahao \n\tls /etc/new_config_file\n\t```\n\n\t``` bash\n\t# 在一个守护容器中启动新的任务 /bin/bash\n\tsudo docker exec -it 66ba58480ea9 /bin/bash\n\t```\n\n* <b>自动重启容器</b>\n\n\t--restart选项可以让Dcoker在出错的情况下自动重启 <br/>\n\t--restart会检查容器的退出代码，并依次来判断是否要重启容器 <br/>\n\t默认的情况下，Docker是不会重启任何容器的 <br/>\n\n\t创建一个容器：--restart的取值为always，表示Docker总是会自动重启该容器\n\n\t``` bash\n\tsudo docker run --restart=always -i -t --name container_dong -d ubuntu /bin/sh\n\t```\n\n\t创建一个容器: on-failure标志表示只有当容器的退出代码为非0值的时候才会自动重启 <br/>\n\ton-failure标志后面还接一个可选的数值，表示最多重启多少次\n\n\t``` bash\n\tsudo docker run --restart=on-failure:5 -i -t --name container_dong -d ubuntu /bin/sh\n\t```\n\n* <b>删除容器</b>\n\t``` bash\n\t# 删除容器\n\tsudo docker rm 容器ID\n\n\t# 删除所有容器(-q 只列出容器ID)\n\tsudo docker rm $(sudo docker ps -aq)\n\t```\n\n* <b>导出容器</b>\n\t``` bash\n\t# 导出容器\n\tsudo docker export 容器ID > xxx.tar\n\t```\n\n* 导入容器\n\t``` bash\n\tsudo docker load -i xxx.tar\n\t```\n\n## 镜像\n\n* <b>查看本地镜像</b>\n\t``` bash\n\t# 查看本地镜像\n\tsudo docker images\n\t```\n\n* <b>删除本地镜像</b>\n\t``` bash\n\t# 删除指定镜像\n\tsudo docker rmi 镜像名\n\t# 强制删除镜像(会把镜像生成的容器一并删除)\n\tsudo docker rmi -f 镜像名\n\t# 删除所有镜像\n\tsudo docker rmi $(sudo docker images -q)\n\t```\n\n* <b>镜像标签</b>\n\t``` bash\n\t# 为了区分一个仓库中不同的镜像，Docker提供了标签（tag）的功能\n\t```\n\n* <b>存储路径</b>\n\t``` bash\n\t/var/lib/docker：该目录存放着Docker镜像、容器以及容器的配置\n\t/var/lib/docker/image：这个目录下存放着镜像\n\t/var/lib/docker/containers：所有的容器都保存在该目录下\n\t```\n\n* <b>镜像的拉取</b>\n\t``` bash\n\t# 如果本地没有ubuntu镜像，就会去Docker Hub中拉取镜像\n\tsudo docker run -t -i ubuntu /bin/bash\n\n\t# 拉取镜像\n\tsudo docker pull ubuntu\n\n\t# docker run和docker pull在下载镜像的时候，如果没有指定镜像的标签，那么默认下载的是标签为“latest”的镜像\n\t```\n\n* <b>镜像的推送</b>\n\t``` bash\n\t# 登录\n\tsudo docker login\n\n\t# 更改仓库名(更改的仓库名必须前面是 用户名)\n\tsudo docker tag  lijiahao/static_web:v2 lijahaohb/static_web:v2\n\n\t# push\n\tsudo docker push lijahaohb/static_web:v2\n\t```\n\n* <b>镜像的搜素</b>\n\t``` bash\n\t# 通过docker search命令来查找所有Docker Hub上公共的可用镜像\n\tsudo docker search puppet\n\t```\n\n* <b>镜像的构建</b>\n\t``` bash\n\t# 使用docker commit命令来提交一个新镜像\n\n\t# 演示案例\n\t# 第一步：运行一个带有ubuntu镜像的容器\n\tsudo docker run -i -t ubuntu /bin/bash\n\n\t# 第二步：然后我们在该ubuntu镜像系统中安装Apache软件包\n\t# 更新，-yqq忽略所有提示信息\n\tapt-get -yqq update\n\t# 安装apache2服务器\n\tapt-get -y install apache2\n\n\t# 提交指定的容器 \n\t# 查看刚才那个容器的ID\n\tsudo docker ps -a\n\t# 提交定制容器，需要指定容器ID、镜像名\n\tsudo docker commit f3f694f1fc97 jamtur01/apache2\n\n\t# 第四步：查看一下新创建的镜像\n\tsudo docker images jamtur01/apache2\n\n\t# 第五步：可以通过dcoker inspect命令查看新创建的镜像的详细信息\n\tsudo docker inspect jamtur01/apache2\n\t```\n\n* <b>dockerfile + docker build</b>\n\t- 项目地址\n\n\t\t[自己制作的项目地址](https://github.com/gzyunke/test-docker)\n\t- 编写`dockerfile`\n\n\t\t`dockerfile:`\n\t\t``` dockerfile\n\t\tFROM node:11\n\t\tMAINTAINER easydoc.net\n\n\t\t# 复制代码\n\t\tADD . /app\n\n\t\t# 设置容器启动后的默认运行目录\n\t\tWORKDIR /app\n\n\t\t# 运行命令，安装依赖\n\t\t# RUN 命令可以有多个，但是可以用 && 连接多个命令来减少层级。\n\t\t# 例如 RUN npm install && cd /app && mkdir logs\n\t\tRUN npm install --registry=https://registry.npm.taobao.org\n\n\t\t# CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。\n\t\t# 如果还需要运行其他命令可以用 && 连接，也可以写成一个shell脚本去执行。\n\t\t# 例如 CMD cd /app && ./start.sh\n\t\tCMD node app.js\n\t\t```\n\t- 使用`docker build`指令构建镜像\n\t\t``` bash\n\t\tsudo docker build -t=test:v1 .\n\t\t```\n\t- 查看镜像是否构建成功\n\t\t``` bash\n\t\tsudo docker images\n\t\t```\n\t- 查看构建历史\n\t\t``` bash\n\t\tsudo docker history test:v1 \n\t\t```\n\t- 根据上面创建的镜像运行一个容器\n\t\t``` bash\n\t\tsudo docker run -d -p 8080:8080 --name test-hello test:v1\n\t\t```\n\n## 目录挂载\n\n* `bind mount` 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上\n* `volume` 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上\n* `tmpfs mount` 适合存储临时文件，存宿主机内存中。不可多容器共享。\n\t``` bash\n\t# bind mount 方式用绝对路径 -v /home/lijiahao/docker/test-docker:/code:/app\n\n\t# volume 方式，只需要一个名字 -v db-data:/app\n\n\tsudo docker run -p 8080:8080 --name test-hello -v /home/lijiahao/docker/test-docker:/app -d test:v1\n\t```\n\n## 容器间通信\n\n* 容器间通信的方式\n\t- docker内部网路\n\t- docker networking功能\n\t- docker链接\n\n* docker networking\n\t``` bash\n\t# 1. 创建新的Docker网络\n\tsudo docker network create test-net\n\n\t# 2. 查看新创建的网络\n\tsudo docker network inspect test-net\n\n\t# 3. 列出当前宿主机中所有的网络\n\tsudo docker network ls\n\n\t# 4. 启动容器，并加入到app新网络\n\tsudo docker run -d --name redis --network test-net --network-alias redis redis:latest\n\n\t# 5. 启动另一个容器，并加入到app新网络\n\tsudo docker run -p 8080:8080 --name test -v /home/lijiahao/docker/test-docker:/app --network test-net -d test:v1\n\t```\n\n* docker链接\n\n## docker-compose\n\n* docker-compose安装\n\t``` bash\n\t# 安装docker-compose稳定版本\n\tsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n\t# 对二进制文件应用可执行权限\n\tsudo chmod +x /usr/local/bin/docker-compose\n\n\t# 验证安装是否成功\n\tdocker-compose --help\n\t```\n\n* docker-compose 使用\n\t- 编写`docker-compose.yml`\n\t\t\n\t\t`docker-compose.yml`\n\t\t``` yml\n\t\tversion: \"3.7\"\n\n\t\tservices:\n\t\t  app:\n\t\t\tbuild: ./\n\t\t\tports:\n\t\t\t  - 80:8080\n\t\t\tvolumes:\n\t\t\t  - ./:/app\n\t\t\tenvironment:\n\t\t\t  - TZ=Asia/Shanghai\n\t\t  redis:\n\t\t\timage: redis:5.0.13\n\t\t\tvolumes:\n\t\t\t  - redis:/data\n\t\t\tenvironment:\n\t\t\t  - TZ=Asia/Shanghai\n\n\t\tvolumes:\n\t\t  redis:\n\t\t```\n\t- 启动\n\t\t``` bash\n\t\tsudo docker-compose up -d\n\t\t```\n\t- 查看运行状态\n\t\t``` bash\n\t\tsudo docker-compose ps\n\t\t```\n\t- 停止运行\n\t\t``` bash\n\t\tsudo docker-compose stop\n\t\t```\n\t- 重启\n\t\t``` bash\n\t\tsudo docker-compose restart\n\t\t```\n\t- 重启单个服务\n\t\t``` bash\n\t\tsudo docker-compose restart service-name\n\t\t```\n\t- 进入容器命令行\n\t\t``` bash\n\t\tsudo docker-compose exec service-name sh\n\t\t```\n\t- 查看容器运行log\n\t\t``` bash\n\t\tsudo docker-compose logs [service-name]\n\t\t```\n\n","slug":"go/docker_learning","published":1,"date":"2022-05-31T09:51:28.591Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6ck0001f8wz6oyg6a13","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"docker架构\"><a href=\"#docker架构\" class=\"headerlink\" title=\"docker架构\"></a>docker架构</h2><ul>\n<li><p>docker架构</p>\n<ul>\n<li>docker client</li>\n<li>docker daemon<ul>\n<li>containers</li>\n<li>images</li>\n</ul>\n</li>\n<li>registry</li>\n</ul>\n</li>\n<li><p>docker的守护进程</p>\n<ul>\n<li>查看守护进程的状态: <code>sudo service docker status</code></li>\n<li>启动、关闭、重启守护进程<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止守护进程</span></span><br><span class=\"line\">sudo service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 启动守护进程</span></span><br><span class=\"line\">sudo service docker start</span><br><span class=\"line\"><span class=\"comment\"># 重启守护进程</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure></li>\n<li>守护进程的配置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><ul>\n<li><p><b>运行容器</b></p>\n<p>  <font color=\"red\"><b>note: </b></font>运行容器的时候需要给容器一个要执行的任务，该任务执行完之后，容器就自动停止了</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name mysql8019 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 -d mysql:8.0.19</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -it --network host --<span class=\"built_in\">rm</span> mysql mysql -h127.0.0.1 -P13306 --default-character-set=utf8mb4 -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个守护式容器(在后台运行)</span></span><br><span class=\"line\">sudo docker run --name daemon_dave -d ubuntu /bin/sh -c <span class=\"string\">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>  命令格式:<br/><br>  Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…] <br/><br>  -i, –interactive=false 是否打开控制台交互 <br/><br>  -t, –tty=false 是否分配tty设备支持终端登录 <br/><br>  -d,    创建守护式容器，在后台运行，为了防止容器停止，给其一个运行的任务 <br/><br>  -e,    指定环境变量，容器中可以使用该环境变量 <br/><br>  -P,    指定容器的端口号 <br/><br>  -p,    指定本地端口到容器内部端口的映射 <br/><br>  –rm,  指定容器停止后自动删除容器 <br/><br>  -h,    指定容器的主机名 <br/><br>  –name 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字 <br/></p>\n</li>\n<li><p><b>查看容器信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker info</span><br></pre></td></tr></table></figure></li>\n<li><p><b>显示容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示全部容器</span></span><br><span class=\"line\">sudo docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前运行的容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure></li>\n<li><p><b>启动容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个已经停止的容器</span></span><br><span class=\"line\">sudo docker start 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启一个容器</span></span><br><span class=\"line\">sudo docker restart 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器附着</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入一个运行中的容器</span></span><br><span class=\"line\">sudo docker attach 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>关闭容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭运行中的容器</span></span><br><span class=\"line\">sudo docker stop 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器日志查看</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过容器名查看</span></span><br><span class=\"line\">sudo docker logs bob_the_container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过容器ID查看</span></span><br><span class=\"line\">sudo docker logs 16ecf568ca88</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看守护容器的日志消息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -f：类似于tail -f命令，可以用来监控Docker的日志，会持续动态更新打印日志的内容，按下Ctrl+C可退出查看</span></span><br><span class=\"line\">sudo docker logs -f daemon_dave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --tail 用来查看日志的某一片段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看日志的最后10行内容</span></span><br><span class=\"line\">sudo docker logs --<span class=\"built_in\">tail</span> 10 daemon_dave</span><br><span class=\"line\"><span class=\"comment\"># 查看某个容器的最新日志而不必读取整个日志文件</span></span><br><span class=\"line\">sudo docker logs --<span class=\"built_in\">tail</span> 0 -f daemon_dave</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># --t 为每一条日志加上时间戳</span></span><br><span class=\"line\">sudo docker logs -ft daemon_dave</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的进程信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top 容器ID/容器名称</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的统计信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stats 容器ID/容器名称</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的详细信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker inspect</span><br></pre></td></tr></table></figure></li>\n<li><p><b>在容器的内部执行新程序</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先运行容器</span></span><br><span class=\"line\">sudo docker start lijiahao</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在不进入该容器的情况下，让其执行一条touch命令</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> bob_the_container <span class=\"built_in\">touch</span> /etc/new_config_file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入该容器，可以查看到该文件创建成功</span></span><br><span class=\"line\">sudo docker attach lijiahao </span><br><span class=\"line\"><span class=\"built_in\">ls</span> /etc/new_config_file</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个守护容器中启动新的任务 /bin/bash</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it 66ba58480ea9 /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li><p><b>自动重启容器</b></p>\n<p>  –restart选项可以让Dcoker在出错的情况下自动重启 <br/><br>  –restart会检查容器的退出代码，并依次来判断是否要重启容器 <br/><br>  默认的情况下，Docker是不会重启任何容器的 <br/></p>\n<p>  创建一个容器：–restart的取值为always，表示Docker总是会自动重启该容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=always -i -t --name container_dong -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>  创建一个容器: on-failure标志表示只有当容器的退出代码为非0值的时候才会自动重启 <br/><br>  on-failure标志后面还接一个可选的数值，表示最多重启多少次</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=on-failure:5 -i -t --name container_dong -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure></li>\n<li><p><b>删除容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">rm</span> 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器(-q 只列出容器ID)</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">rm</span> $(sudo docker ps -aq)</span><br></pre></td></tr></table></figure></li>\n<li><p><b>导出容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">export</span> 容器ID &gt; xxx.tar</span><br></pre></td></tr></table></figure></li>\n<li><p>导入容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker load -i xxx.tar</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><ul>\n<li><p><b>查看本地镜像</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地镜像</span></span><br><span class=\"line\">sudo docker images</span><br></pre></td></tr></table></figure></li>\n<li><p><b>删除本地镜像</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除指定镜像</span></span><br><span class=\"line\">sudo docker rmi 镜像名</span><br><span class=\"line\"><span class=\"comment\"># 强制删除镜像(会把镜像生成的容器一并删除)</span></span><br><span class=\"line\">sudo docker rmi -f 镜像名</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">sudo docker rmi $(sudo docker images -q)</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像标签</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为了区分一个仓库中不同的镜像，Docker提供了标签（tag）的功能</span></span><br></pre></td></tr></table></figure></li>\n<li><p><b>存储路径</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/docker：该目录存放着Docker镜像、容器以及容器的配置</span><br><span class=\"line\">/var/lib/docker/image：这个目录下存放着镜像</span><br><span class=\"line\">/var/lib/docker/containers：所有的容器都保存在该目录下</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的拉取</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果本地没有ubuntu镜像，就会去Docker Hub中拉取镜像</span></span><br><span class=\"line\">sudo docker run -t -i ubuntu /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">sudo docker pull ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker run和docker pull在下载镜像的时候，如果没有指定镜像的标签，那么默认下载的是标签为“latest”的镜像</span></span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的推送</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">sudo docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改仓库名(更改的仓库名必须前面是 用户名)</span></span><br><span class=\"line\">sudo docker tag  lijiahao/static_web:v2 lijahaohb/static_web:v2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push</span></span><br><span class=\"line\">sudo docker push lijahaohb/static_web:v2</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的搜素</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过docker search命令来查找所有Docker Hub上公共的可用镜像</span></span><br><span class=\"line\">sudo docker search puppet</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的构建</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用docker commit命令来提交一个新镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 演示案例</span></span><br><span class=\"line\"><span class=\"comment\"># 第一步：运行一个带有ubuntu镜像的容器</span></span><br><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二步：然后我们在该ubuntu镜像系统中安装Apache软件包</span></span><br><span class=\"line\"><span class=\"comment\"># 更新，-yqq忽略所有提示信息</span></span><br><span class=\"line\">apt-get -yqq update</span><br><span class=\"line\"><span class=\"comment\"># 安装apache2服务器</span></span><br><span class=\"line\">apt-get -y install apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定的容器 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看刚才那个容器的ID</span></span><br><span class=\"line\">sudo docker ps -a</span><br><span class=\"line\"><span class=\"comment\"># 提交定制容器，需要指定容器ID、镜像名</span></span><br><span class=\"line\">sudo docker commit f3f694f1fc97 jamtur01/apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第四步：查看一下新创建的镜像</span></span><br><span class=\"line\">sudo docker images jamtur01/apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第五步：可以通过dcoker inspect命令查看新创建的镜像的详细信息</span></span><br><span class=\"line\">sudo docker inspect jamtur01/apache2</span><br></pre></td></tr></table></figure></li>\n<li><p><b>dockerfile + docker build</b></p>\n<ul>\n<li><p>项目地址</p>\n<p>  <a href=\"https://github.com/gzyunke/test-docker\">自己制作的项目地址</a></p>\n</li>\n<li><p>编写<code>dockerfile</code></p>\n<p>  <code>dockerfile:</code></p>\n  <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> easydoc.net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制代码</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> . /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置容器启动后的默认运行目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行命令，安装依赖</span></span><br><span class=\"line\"><span class=\"comment\"># RUN 命令可以有多个，但是可以用 &amp;&amp; 连接多个命令来减少层级。</span></span><br><span class=\"line\"><span class=\"comment\"># 例如 RUN npm install &amp;&amp; cd /app &amp;&amp; mkdir logs</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果还需要运行其他命令可以用 &amp;&amp; 连接，也可以写成一个shell脚本去执行。</span></span><br><span class=\"line\"><span class=\"comment\"># 例如 CMD cd /app &amp;&amp; ./start.sh</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> node app.js</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>docker build</code>指令构建镜像</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t=<span class=\"built_in\">test</span>:v1 .</span><br></pre></td></tr></table></figure></li>\n<li><p>查看镜像是否构建成功</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker images</span><br></pre></td></tr></table></figure></li>\n<li><p>查看构建历史</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker <span class=\"built_in\">history</span> <span class=\"built_in\">test</span>:v1 </span><br></pre></td></tr></table></figure></li>\n<li><p>根据上面创建的镜像运行一个容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 8080:8080 --name test-hello <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h2><ul>\n<li><code>bind mount</code> 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上</li>\n<li><code>volume</code> 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上</li>\n<li><code>tmpfs mount</code> 适合存储临时文件，存宿主机内存中。不可多容器共享。  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bind mount 方式用绝对路径 -v /home/lijiahao/docker/test-docker:/code:/app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># volume 方式，只需要一个名字 -v db-data:/app</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -p 8080:8080 --name test-hello -v /home/lijiahao/docker/test-docker:/app -d <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"容器间通信\"><a href=\"#容器间通信\" class=\"headerlink\" title=\"容器间通信\"></a>容器间通信</h2><ul>\n<li><p>容器间通信的方式</p>\n<ul>\n<li>docker内部网路</li>\n<li>docker networking功能</li>\n<li>docker链接</li>\n</ul>\n</li>\n<li><p>docker networking</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建新的Docker网络</span></span><br><span class=\"line\">sudo docker network create test-net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 查看新创建的网络</span></span><br><span class=\"line\">sudo docker network inspect test-net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 列出当前宿主机中所有的网络</span></span><br><span class=\"line\">sudo docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 启动容器，并加入到app新网络</span></span><br><span class=\"line\">sudo docker run -d --name redis --network test-net --network-alias redis redis:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 启动另一个容器，并加入到app新网络</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 --name <span class=\"built_in\">test</span> -v /home/lijiahao/docker/test-docker:/app --network test-net -d <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n<li><p>docker链接</p>\n</li>\n</ul>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h2><ul>\n<li><p>docker-compose安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker-compose稳定版本</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对二进制文件应用可执行权限</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装是否成功</span></span><br><span class=\"line\">docker-compose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></li>\n<li><p>docker-compose 使用</p>\n<ul>\n<li>编写<code>docker-compose.yml</code>  <code>docker-compose.yml</code>  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">\t<span class=\"attr\">build:</span> <span class=\"string\">./</span></span><br><span class=\"line\">\t<span class=\"attr\">ports:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:8080</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">./:/app</span></span><br><span class=\"line\">\t<span class=\"attr\">environment:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">\t<span class=\"attr\">image:</span> <span class=\"string\">redis:5.0.13</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">redis:/data</span></span><br><span class=\"line\">\t<span class=\"attr\">environment:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br></pre></td></tr></table></figure></li>\n<li>启动  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li>\n<li>查看运行状态  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose ps</span><br></pre></td></tr></table></figure></li>\n<li>停止运行  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose stop</span><br></pre></td></tr></table></figure></li>\n<li>重启  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose restart</span><br></pre></td></tr></table></figure></li>\n<li>重启单个服务  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose restart service-name</span><br></pre></td></tr></table></figure></li>\n<li>进入容器命令行  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose <span class=\"built_in\">exec</span> service-name sh</span><br></pre></td></tr></table></figure></li>\n<li>查看容器运行log  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose logs [service-name]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"docker架构\"><a href=\"#docker架构\" class=\"headerlink\" title=\"docker架构\"></a>docker架构</h2><ul>\n<li><p>docker架构</p>\n<ul>\n<li>docker client</li>\n<li>docker daemon<ul>\n<li>containers</li>\n<li>images</li>\n</ul>\n</li>\n<li>registry</li>\n</ul>\n</li>\n<li><p>docker的守护进程</p>\n<ul>\n<li>查看守护进程的状态: <code>sudo service docker status</code></li>\n<li>启动、关闭、重启守护进程<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止守护进程</span></span><br><span class=\"line\">sudo service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 启动守护进程</span></span><br><span class=\"line\">sudo service docker start</span><br><span class=\"line\"><span class=\"comment\"># 重启守护进程</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure></li>\n<li>守护进程的配置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><ul>\n<li><p><b>运行容器</b></p>\n<p>  <font color=\"red\"><b>note: </b></font>运行容器的时候需要给容器一个要执行的任务，该任务执行完之后，容器就自动停止了</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name mysql8019 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 -d mysql:8.0.19</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -it --network host --<span class=\"built_in\">rm</span> mysql mysql -h127.0.0.1 -P13306 --default-character-set=utf8mb4 -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个守护式容器(在后台运行)</span></span><br><span class=\"line\">sudo docker run --name daemon_dave -d ubuntu /bin/sh -c <span class=\"string\">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>  命令格式:<br/><br>  Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…] <br/><br>  -i, –interactive=false 是否打开控制台交互 <br/><br>  -t, –tty=false 是否分配tty设备支持终端登录 <br/><br>  -d,    创建守护式容器，在后台运行，为了防止容器停止，给其一个运行的任务 <br/><br>  -e,    指定环境变量，容器中可以使用该环境变量 <br/><br>  -P,    指定容器的端口号 <br/><br>  -p,    指定本地端口到容器内部端口的映射 <br/><br>  –rm,  指定容器停止后自动删除容器 <br/><br>  -h,    指定容器的主机名 <br/><br>  –name 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字 <br/></p>\n</li>\n<li><p><b>查看容器信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker info</span><br></pre></td></tr></table></figure></li>\n<li><p><b>显示容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示全部容器</span></span><br><span class=\"line\">sudo docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前运行的容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure></li>\n<li><p><b>启动容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个已经停止的容器</span></span><br><span class=\"line\">sudo docker start 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启一个容器</span></span><br><span class=\"line\">sudo docker restart 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器附着</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入一个运行中的容器</span></span><br><span class=\"line\">sudo docker attach 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>关闭容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭运行中的容器</span></span><br><span class=\"line\">sudo docker stop 容器ID</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器日志查看</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过容器名查看</span></span><br><span class=\"line\">sudo docker logs bob_the_container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过容器ID查看</span></span><br><span class=\"line\">sudo docker logs 16ecf568ca88</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看守护容器的日志消息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -f：类似于tail -f命令，可以用来监控Docker的日志，会持续动态更新打印日志的内容，按下Ctrl+C可退出查看</span></span><br><span class=\"line\">sudo docker logs -f daemon_dave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --tail 用来查看日志的某一片段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看日志的最后10行内容</span></span><br><span class=\"line\">sudo docker logs --<span class=\"built_in\">tail</span> 10 daemon_dave</span><br><span class=\"line\"><span class=\"comment\"># 查看某个容器的最新日志而不必读取整个日志文件</span></span><br><span class=\"line\">sudo docker logs --<span class=\"built_in\">tail</span> 0 -f daemon_dave</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># --t 为每一条日志加上时间戳</span></span><br><span class=\"line\">sudo docker logs -ft daemon_dave</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的进程信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top 容器ID/容器名称</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的统计信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stats 容器ID/容器名称</span><br></pre></td></tr></table></figure></li>\n<li><p><b>容器的详细信息</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker inspect</span><br></pre></td></tr></table></figure></li>\n<li><p><b>在容器的内部执行新程序</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先运行容器</span></span><br><span class=\"line\">sudo docker start lijiahao</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在不进入该容器的情况下，让其执行一条touch命令</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> bob_the_container <span class=\"built_in\">touch</span> /etc/new_config_file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入该容器，可以查看到该文件创建成功</span></span><br><span class=\"line\">sudo docker attach lijiahao </span><br><span class=\"line\"><span class=\"built_in\">ls</span> /etc/new_config_file</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个守护容器中启动新的任务 /bin/bash</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it 66ba58480ea9 /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li><p><b>自动重启容器</b></p>\n<p>  –restart选项可以让Dcoker在出错的情况下自动重启 <br/><br>  –restart会检查容器的退出代码，并依次来判断是否要重启容器 <br/><br>  默认的情况下，Docker是不会重启任何容器的 <br/></p>\n<p>  创建一个容器：–restart的取值为always，表示Docker总是会自动重启该容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=always -i -t --name container_dong -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>  创建一个容器: on-failure标志表示只有当容器的退出代码为非0值的时候才会自动重启 <br/><br>  on-failure标志后面还接一个可选的数值，表示最多重启多少次</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=on-failure:5 -i -t --name container_dong -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure></li>\n<li><p><b>删除容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">rm</span> 容器ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器(-q 只列出容器ID)</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">rm</span> $(sudo docker ps -aq)</span><br></pre></td></tr></table></figure></li>\n<li><p><b>导出容器</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出容器</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">export</span> 容器ID &gt; xxx.tar</span><br></pre></td></tr></table></figure></li>\n<li><p>导入容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker load -i xxx.tar</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><ul>\n<li><p><b>查看本地镜像</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地镜像</span></span><br><span class=\"line\">sudo docker images</span><br></pre></td></tr></table></figure></li>\n<li><p><b>删除本地镜像</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除指定镜像</span></span><br><span class=\"line\">sudo docker rmi 镜像名</span><br><span class=\"line\"><span class=\"comment\"># 强制删除镜像(会把镜像生成的容器一并删除)</span></span><br><span class=\"line\">sudo docker rmi -f 镜像名</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">sudo docker rmi $(sudo docker images -q)</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像标签</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为了区分一个仓库中不同的镜像，Docker提供了标签（tag）的功能</span></span><br></pre></td></tr></table></figure></li>\n<li><p><b>存储路径</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/docker：该目录存放着Docker镜像、容器以及容器的配置</span><br><span class=\"line\">/var/lib/docker/image：这个目录下存放着镜像</span><br><span class=\"line\">/var/lib/docker/containers：所有的容器都保存在该目录下</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的拉取</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果本地没有ubuntu镜像，就会去Docker Hub中拉取镜像</span></span><br><span class=\"line\">sudo docker run -t -i ubuntu /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">sudo docker pull ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker run和docker pull在下载镜像的时候，如果没有指定镜像的标签，那么默认下载的是标签为“latest”的镜像</span></span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的推送</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">sudo docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改仓库名(更改的仓库名必须前面是 用户名)</span></span><br><span class=\"line\">sudo docker tag  lijiahao/static_web:v2 lijahaohb/static_web:v2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># push</span></span><br><span class=\"line\">sudo docker push lijahaohb/static_web:v2</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的搜素</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过docker search命令来查找所有Docker Hub上公共的可用镜像</span></span><br><span class=\"line\">sudo docker search puppet</span><br></pre></td></tr></table></figure></li>\n<li><p><b>镜像的构建</b></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用docker commit命令来提交一个新镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 演示案例</span></span><br><span class=\"line\"><span class=\"comment\"># 第一步：运行一个带有ubuntu镜像的容器</span></span><br><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二步：然后我们在该ubuntu镜像系统中安装Apache软件包</span></span><br><span class=\"line\"><span class=\"comment\"># 更新，-yqq忽略所有提示信息</span></span><br><span class=\"line\">apt-get -yqq update</span><br><span class=\"line\"><span class=\"comment\"># 安装apache2服务器</span></span><br><span class=\"line\">apt-get -y install apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定的容器 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看刚才那个容器的ID</span></span><br><span class=\"line\">sudo docker ps -a</span><br><span class=\"line\"><span class=\"comment\"># 提交定制容器，需要指定容器ID、镜像名</span></span><br><span class=\"line\">sudo docker commit f3f694f1fc97 jamtur01/apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第四步：查看一下新创建的镜像</span></span><br><span class=\"line\">sudo docker images jamtur01/apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第五步：可以通过dcoker inspect命令查看新创建的镜像的详细信息</span></span><br><span class=\"line\">sudo docker inspect jamtur01/apache2</span><br></pre></td></tr></table></figure></li>\n<li><p><b>dockerfile + docker build</b></p>\n<ul>\n<li><p>项目地址</p>\n<p>  <a href=\"https://github.com/gzyunke/test-docker\">自己制作的项目地址</a></p>\n</li>\n<li><p>编写<code>dockerfile</code></p>\n<p>  <code>dockerfile:</code></p>\n  <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> easydoc.net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制代码</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> . /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置容器启动后的默认运行目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行命令，安装依赖</span></span><br><span class=\"line\"><span class=\"comment\"># RUN 命令可以有多个，但是可以用 &amp;&amp; 连接多个命令来减少层级。</span></span><br><span class=\"line\"><span class=\"comment\"># 例如 RUN npm install &amp;&amp; cd /app &amp;&amp; mkdir logs</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果还需要运行其他命令可以用 &amp;&amp; 连接，也可以写成一个shell脚本去执行。</span></span><br><span class=\"line\"><span class=\"comment\"># 例如 CMD cd /app &amp;&amp; ./start.sh</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> node app.js</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用<code>docker build</code>指令构建镜像</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t=<span class=\"built_in\">test</span>:v1 .</span><br></pre></td></tr></table></figure></li>\n<li><p>查看镜像是否构建成功</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker images</span><br></pre></td></tr></table></figure></li>\n<li><p>查看构建历史</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker <span class=\"built_in\">history</span> <span class=\"built_in\">test</span>:v1 </span><br></pre></td></tr></table></figure></li>\n<li><p>根据上面创建的镜像运行一个容器</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 8080:8080 --name test-hello <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h2><ul>\n<li><code>bind mount</code> 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上</li>\n<li><code>volume</code> 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上</li>\n<li><code>tmpfs mount</code> 适合存储临时文件，存宿主机内存中。不可多容器共享。  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bind mount 方式用绝对路径 -v /home/lijiahao/docker/test-docker:/code:/app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># volume 方式，只需要一个名字 -v db-data:/app</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -p 8080:8080 --name test-hello -v /home/lijiahao/docker/test-docker:/app -d <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"容器间通信\"><a href=\"#容器间通信\" class=\"headerlink\" title=\"容器间通信\"></a>容器间通信</h2><ul>\n<li><p>容器间通信的方式</p>\n<ul>\n<li>docker内部网路</li>\n<li>docker networking功能</li>\n<li>docker链接</li>\n</ul>\n</li>\n<li><p>docker networking</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建新的Docker网络</span></span><br><span class=\"line\">sudo docker network create test-net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 查看新创建的网络</span></span><br><span class=\"line\">sudo docker network inspect test-net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 列出当前宿主机中所有的网络</span></span><br><span class=\"line\">sudo docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 启动容器，并加入到app新网络</span></span><br><span class=\"line\">sudo docker run -d --name redis --network test-net --network-alias redis redis:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 启动另一个容器，并加入到app新网络</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 --name <span class=\"built_in\">test</span> -v /home/lijiahao/docker/test-docker:/app --network test-net -d <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure></li>\n<li><p>docker链接</p>\n</li>\n</ul>\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h2><ul>\n<li><p>docker-compose安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker-compose稳定版本</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对二进制文件应用可执行权限</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装是否成功</span></span><br><span class=\"line\">docker-compose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></li>\n<li><p>docker-compose 使用</p>\n<ul>\n<li>编写<code>docker-compose.yml</code>  <code>docker-compose.yml</code>  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">\t<span class=\"attr\">build:</span> <span class=\"string\">./</span></span><br><span class=\"line\">\t<span class=\"attr\">ports:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:8080</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">./:/app</span></span><br><span class=\"line\">\t<span class=\"attr\">environment:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">\t<span class=\"attr\">image:</span> <span class=\"string\">redis:5.0.13</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">redis:/data</span></span><br><span class=\"line\">\t<span class=\"attr\">environment:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br></pre></td></tr></table></figure></li>\n<li>启动  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li>\n<li>查看运行状态  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose ps</span><br></pre></td></tr></table></figure></li>\n<li>停止运行  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose stop</span><br></pre></td></tr></table></figure></li>\n<li>重启  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose restart</span><br></pre></td></tr></table></figure></li>\n<li>重启单个服务  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose restart service-name</span><br></pre></td></tr></table></figure></li>\n<li>进入容器命令行  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose <span class=\"built_in\">exec</span> service-name sh</span><br></pre></td></tr></table></figure></li>\n<li>查看容器运行log  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose logs [service-name]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"im-gochat","_content":"# go-chat\n\n* `connect`架构 <br/>\n\t`Server`\n\t``` go\n\ttype Server struct {\n\t\tBuckets   []*Bucket\n\t\tOptions   ServerOptions\n\t\tbucketIdx uint32\n\t\toperator  Operator\n\t}\n\t```\n\n\t`Bucket`\n\t``` go\n\ttype Bucket struct {\n\t\tcLock         sync.RWMutex     // protect the channels for chs\n\t\tchs           map[int]*Channel // map sub key to a channel\n\t\tbucketOptions BucketOptions\n\t\trooms         map[int]*Room // bucket room channels\n\t\troutines      []chan *proto.PushRoomMsgRequest\n\t\troutinesNum   uint64\n\t\tbroadcast     chan []byte\n\t}\n\t```\n\n\t`Room`\n\t``` go\n\ttype Room struct {\n\t\tId          int\n\t\tOnlineCount int // room online user count\n\t\trLock       sync.RWMutex\n\t\tdrop        bool // make room is live\n\t\tnext        *Channel\n\t}\n\t```\n\n\t`Channel`\n\t``` go\n\ttype Channel struct {\n\t\tRoom      *Room\n\t\tNext      *Channel\n\t\tPrev      *Channel\n\t\tbroadcast chan *proto.Msg\n\t\tuserId    int\n\t\tconn      *websocket.Conn\n\t\tconnTcp   *net.TCPConn\n\t}\n\t```\n\n* 接口文档\n\t\n\n","source":"_posts/go/go_chat.md","raw":"---\ntitle: im-gochat \ncategories: \n- GolangStudy\n---\n# go-chat\n\n* `connect`架构 <br/>\n\t`Server`\n\t``` go\n\ttype Server struct {\n\t\tBuckets   []*Bucket\n\t\tOptions   ServerOptions\n\t\tbucketIdx uint32\n\t\toperator  Operator\n\t}\n\t```\n\n\t`Bucket`\n\t``` go\n\ttype Bucket struct {\n\t\tcLock         sync.RWMutex     // protect the channels for chs\n\t\tchs           map[int]*Channel // map sub key to a channel\n\t\tbucketOptions BucketOptions\n\t\trooms         map[int]*Room // bucket room channels\n\t\troutines      []chan *proto.PushRoomMsgRequest\n\t\troutinesNum   uint64\n\t\tbroadcast     chan []byte\n\t}\n\t```\n\n\t`Room`\n\t``` go\n\ttype Room struct {\n\t\tId          int\n\t\tOnlineCount int // room online user count\n\t\trLock       sync.RWMutex\n\t\tdrop        bool // make room is live\n\t\tnext        *Channel\n\t}\n\t```\n\n\t`Channel`\n\t``` go\n\ttype Channel struct {\n\t\tRoom      *Room\n\t\tNext      *Channel\n\t\tPrev      *Channel\n\t\tbroadcast chan *proto.Msg\n\t\tuserId    int\n\t\tconn      *websocket.Conn\n\t\tconnTcp   *net.TCPConn\n\t}\n\t```\n\n* 接口文档\n\t\n\n","slug":"go/go_chat","published":1,"date":"2022-05-31T10:26:44.586Z","updated":"2022-05-31T10:26:44.590Z","_id":"cl3tkt6cn0002f8wzfxc7537q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"go-chat\"><a href=\"#go-chat\" class=\"headerlink\" title=\"go-chat\"></a>go-chat</h1><ul>\n<li><p><code>connect</code>架构 <br/><br>  <code>Server</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Server <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tBuckets   []*Bucket</span><br><span class=\"line\">\tOptions   ServerOptions</span><br><span class=\"line\">\tbucketIdx <span class=\"type\">uint32</span></span><br><span class=\"line\">\toperator  Operator</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Bucket</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Bucket <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcLock         sync.RWMutex     <span class=\"comment\">// protect the channels for chs</span></span><br><span class=\"line\">\tchs           <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]*Channel <span class=\"comment\">// map sub key to a channel</span></span><br><span class=\"line\">\tbucketOptions BucketOptions</span><br><span class=\"line\">\trooms         <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]*Room <span class=\"comment\">// bucket room channels</span></span><br><span class=\"line\">\troutines      []<span class=\"keyword\">chan</span> *proto.PushRoomMsgRequest</span><br><span class=\"line\">\troutinesNum   <span class=\"type\">uint64</span></span><br><span class=\"line\">\tbroadcast     <span class=\"keyword\">chan</span> []<span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Room</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Room <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId          <span class=\"type\">int</span></span><br><span class=\"line\">\tOnlineCount <span class=\"type\">int</span> <span class=\"comment\">// room online user count</span></span><br><span class=\"line\">\trLock       sync.RWMutex</span><br><span class=\"line\">\tdrop        <span class=\"type\">bool</span> <span class=\"comment\">// make room is live</span></span><br><span class=\"line\">\tnext        *Channel</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Channel</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Channel <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tRoom      *Room</span><br><span class=\"line\">\tNext      *Channel</span><br><span class=\"line\">\tPrev      *Channel</span><br><span class=\"line\">\tbroadcast <span class=\"keyword\">chan</span> *proto.Msg</span><br><span class=\"line\">\tuserId    <span class=\"type\">int</span></span><br><span class=\"line\">\tconn      *websocket.Conn</span><br><span class=\"line\">\tconnTcp   *net.TCPConn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接口文档</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go-chat\"><a href=\"#go-chat\" class=\"headerlink\" title=\"go-chat\"></a>go-chat</h1><ul>\n<li><p><code>connect</code>架构 <br/><br>  <code>Server</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Server <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tBuckets   []*Bucket</span><br><span class=\"line\">\tOptions   ServerOptions</span><br><span class=\"line\">\tbucketIdx <span class=\"type\">uint32</span></span><br><span class=\"line\">\toperator  Operator</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Bucket</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Bucket <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcLock         sync.RWMutex     <span class=\"comment\">// protect the channels for chs</span></span><br><span class=\"line\">\tchs           <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]*Channel <span class=\"comment\">// map sub key to a channel</span></span><br><span class=\"line\">\tbucketOptions BucketOptions</span><br><span class=\"line\">\trooms         <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]*Room <span class=\"comment\">// bucket room channels</span></span><br><span class=\"line\">\troutines      []<span class=\"keyword\">chan</span> *proto.PushRoomMsgRequest</span><br><span class=\"line\">\troutinesNum   <span class=\"type\">uint64</span></span><br><span class=\"line\">\tbroadcast     <span class=\"keyword\">chan</span> []<span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Room</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Room <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId          <span class=\"type\">int</span></span><br><span class=\"line\">\tOnlineCount <span class=\"type\">int</span> <span class=\"comment\">// room online user count</span></span><br><span class=\"line\">\trLock       sync.RWMutex</span><br><span class=\"line\">\tdrop        <span class=\"type\">bool</span> <span class=\"comment\">// make room is live</span></span><br><span class=\"line\">\tnext        *Channel</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Channel</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Channel <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tRoom      *Room</span><br><span class=\"line\">\tNext      *Channel</span><br><span class=\"line\">\tPrev      *Channel</span><br><span class=\"line\">\tbroadcast <span class=\"keyword\">chan</span> *proto.Msg</span><br><span class=\"line\">\tuserId    <span class=\"type\">int</span></span><br><span class=\"line\">\tconn      *websocket.Conn</span><br><span class=\"line\">\tconnTcp   *net.TCPConn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接口文档</p>\n</li>\n</ul>\n"},{"title":"go程序调试","_content":"\n# go程序调试\n\n## delve\n\n* `delve`安装\n\t``` bash\n\tgo install github.com/go-delve/delve/cmd/dlv@latest\n\n\t# 如果go版本小于1.16可以使用下面方式安装\n\tgit clone https://github.com/go-delve/delve\n\tcd delve\n\tgo install github.com/go-delve/delve/cmd/dlv]\n\t```\n\n* 进入调试的方法\n\t``` bash\n\t# 1、编译并开始调试当前目录下的包或者指定的包\n\tdlv debug xxx.go\n\n\t# 2、找到项目运行的进程id,attach上去\n\tgo build -gcflags \"-N -l\" main.go\n\t./main\n\tps -ef | grep ./main\n\tdlv attach 进程id\n\t```\n\n* 报错处理\n\t``` bash\n\t# Could not attach to pid 129591: this could be caused by a kernel security setting, try writing \"0\" to /proc/sys/kernel/yama/ptrace_scope\n\n\tsudo sysctl kernel.yama.ptrace_scope=0\n\t```\n\n* `dlv`指令\n\t- 断点管理\n\t\t``` bash\n\t\tbreak(b)\t\t设置断点\t\n\t\tbreakpoints(bp)\t查看当前所有断点\t\n\t\tclear\t\t\t删除断点\n\t\tclearall\t\t删除多个断点\t\n\t\ttoggle\t\t\t启用或关闭断点\n\t\t```\n\n\t- 调试指令\n\t\t``` bash\n\t\tcontinue(c)\t\t\t\t继续执行到一个断点或者程序结束\n\t\tnext(n)\t\t\t\t\t执行下一行代码\n\t\tstep(s)\t\t\t\t\t进入函数执行下一行代码\n\t\tstep-instruction(si)\t执行下一行机器码\n\t\tstepout(so)\t\t\t\t跳出当前执行函数\t\n\t\trestart(r)\t\t\t\t重新执行程码\n\t\t```\n\t- 参数管理\n\t\t``` bash\n\t\tlocals\t\t打印所有的局部变量\n\t\tvars \t\t打印所有的全局变量\n\t\targs\t\t打印当前函数的参数\t\n\t\tdisplay\t\t打印加入到display的变量的值\t\n\t\tprint(p)\t打印表达式的结果\n\t\tset\t\t\t设置某个变量的值\t\n\t\tvars\t\t查看全局变量\n\t\twhatis\t\t查看变量类型\t\n\t\t```\n\n* debug案例1\n\t`config.yaml`\n\t``` yaml \n\tTimeStamp: \"2018-07-16 10:23:19\"\n\tAuthor: \"WZP\"\n\tPassWd: \"Hello\"\n\tInformation:\n\t  Name: \"Harry\"\n\t  Age: \"37\"\n\t  Alise:\n\t\t- \"Lion\"\n\t\t- \"NK\"\n\t\t- \"KaQS\"\n\t  Image: \"/path/header.rpg\"\n\t  Public: false\n\n\tFavorite:\n\t  Sport:\n\t\t- \"swimming\"\n\t\t- \"football\"\n\t  Music:\n\t\t- \"zui xuan min zu feng\"\n\t  LuckyNumber: 99\n\t```\n\n\t`main.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\t\"fmt\"\n\t\t\t\"log\"\n\n\t\t\t\"github.com/spf13/viper\"\n\t)\n\n\ttype config struct {\n\t\t\tv *viper.Viper\n\t}\n\n\tfunc LoadConfigFromYaml(c *config) error {\n\t\t\tc.v = viper.New()\n\t\t\tc.v.SetConfigFile(\"./config.yaml\")\n\n\t\t\tif err := c.v.ReadInConfig(); err != nil {\n\t\t\t\t\treturn err\n\t\t\t}\n\t\t\tage := c.v.Get(\"Information.Age\")\n\t\t\tname := c.v.Get(\"Information.Name\")\n\t\t\tlog.Printf(\"age:%s, name:%s\\n\", age, name)\n\n\t\t\tm := c.v.Sub(\"information\")\n\t\t\tlog.Printf(\"keys:%s, image:%s\", m.AllKeys(), m.Get(\"image\"))\n\t\t\treturn nil\n\t}\n\n\tfunc main() {\n\t\t\tcfg := config{v: viper.New()}\n\t\t\tif err := LoadConfigFromYaml(&cfg); err != nil {\n\t\t\t\t\tfmt.Println(\"Failed read config\")\n\t\t\t}\n\t}\n\t```\n\n","source":"_posts/go/go_debug.md","raw":"---\ntitle: go程序调试 \ncategories: \n- GolangStudy\n---\n\n# go程序调试\n\n## delve\n\n* `delve`安装\n\t``` bash\n\tgo install github.com/go-delve/delve/cmd/dlv@latest\n\n\t# 如果go版本小于1.16可以使用下面方式安装\n\tgit clone https://github.com/go-delve/delve\n\tcd delve\n\tgo install github.com/go-delve/delve/cmd/dlv]\n\t```\n\n* 进入调试的方法\n\t``` bash\n\t# 1、编译并开始调试当前目录下的包或者指定的包\n\tdlv debug xxx.go\n\n\t# 2、找到项目运行的进程id,attach上去\n\tgo build -gcflags \"-N -l\" main.go\n\t./main\n\tps -ef | grep ./main\n\tdlv attach 进程id\n\t```\n\n* 报错处理\n\t``` bash\n\t# Could not attach to pid 129591: this could be caused by a kernel security setting, try writing \"0\" to /proc/sys/kernel/yama/ptrace_scope\n\n\tsudo sysctl kernel.yama.ptrace_scope=0\n\t```\n\n* `dlv`指令\n\t- 断点管理\n\t\t``` bash\n\t\tbreak(b)\t\t设置断点\t\n\t\tbreakpoints(bp)\t查看当前所有断点\t\n\t\tclear\t\t\t删除断点\n\t\tclearall\t\t删除多个断点\t\n\t\ttoggle\t\t\t启用或关闭断点\n\t\t```\n\n\t- 调试指令\n\t\t``` bash\n\t\tcontinue(c)\t\t\t\t继续执行到一个断点或者程序结束\n\t\tnext(n)\t\t\t\t\t执行下一行代码\n\t\tstep(s)\t\t\t\t\t进入函数执行下一行代码\n\t\tstep-instruction(si)\t执行下一行机器码\n\t\tstepout(so)\t\t\t\t跳出当前执行函数\t\n\t\trestart(r)\t\t\t\t重新执行程码\n\t\t```\n\t- 参数管理\n\t\t``` bash\n\t\tlocals\t\t打印所有的局部变量\n\t\tvars \t\t打印所有的全局变量\n\t\targs\t\t打印当前函数的参数\t\n\t\tdisplay\t\t打印加入到display的变量的值\t\n\t\tprint(p)\t打印表达式的结果\n\t\tset\t\t\t设置某个变量的值\t\n\t\tvars\t\t查看全局变量\n\t\twhatis\t\t查看变量类型\t\n\t\t```\n\n* debug案例1\n\t`config.yaml`\n\t``` yaml \n\tTimeStamp: \"2018-07-16 10:23:19\"\n\tAuthor: \"WZP\"\n\tPassWd: \"Hello\"\n\tInformation:\n\t  Name: \"Harry\"\n\t  Age: \"37\"\n\t  Alise:\n\t\t- \"Lion\"\n\t\t- \"NK\"\n\t\t- \"KaQS\"\n\t  Image: \"/path/header.rpg\"\n\t  Public: false\n\n\tFavorite:\n\t  Sport:\n\t\t- \"swimming\"\n\t\t- \"football\"\n\t  Music:\n\t\t- \"zui xuan min zu feng\"\n\t  LuckyNumber: 99\n\t```\n\n\t`main.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\t\"fmt\"\n\t\t\t\"log\"\n\n\t\t\t\"github.com/spf13/viper\"\n\t)\n\n\ttype config struct {\n\t\t\tv *viper.Viper\n\t}\n\n\tfunc LoadConfigFromYaml(c *config) error {\n\t\t\tc.v = viper.New()\n\t\t\tc.v.SetConfigFile(\"./config.yaml\")\n\n\t\t\tif err := c.v.ReadInConfig(); err != nil {\n\t\t\t\t\treturn err\n\t\t\t}\n\t\t\tage := c.v.Get(\"Information.Age\")\n\t\t\tname := c.v.Get(\"Information.Name\")\n\t\t\tlog.Printf(\"age:%s, name:%s\\n\", age, name)\n\n\t\t\tm := c.v.Sub(\"information\")\n\t\t\tlog.Printf(\"keys:%s, image:%s\", m.AllKeys(), m.Get(\"image\"))\n\t\t\treturn nil\n\t}\n\n\tfunc main() {\n\t\t\tcfg := config{v: viper.New()}\n\t\t\tif err := LoadConfigFromYaml(&cfg); err != nil {\n\t\t\t\t\tfmt.Println(\"Failed read config\")\n\t\t\t}\n\t}\n\t```\n\n","slug":"go/go_debug","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6cp0003f8wzf0p7ehx9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"go程序调试\"><a href=\"#go程序调试\" class=\"headerlink\" title=\"go程序调试\"></a>go程序调试</h1><h2 id=\"delve\"><a href=\"#delve\" class=\"headerlink\" title=\"delve\"></a>delve</h2><ul>\n<li><p><code>delve</code>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/go-delve/delve/cmd/dlv@latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果go版本小于1.16可以使用下面方式安装</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/go-delve/delve</span><br><span class=\"line\"><span class=\"built_in\">cd</span> delve</span><br><span class=\"line\">go install github.com/go-delve/delve/cmd/dlv]</span><br></pre></td></tr></table></figure></li>\n<li><p>进入调试的方法</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、编译并开始调试当前目录下的包或者指定的包</span></span><br><span class=\"line\">dlv debug xxx.go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、找到项目运行的进程id,attach上去</span></span><br><span class=\"line\">go build -gcflags <span class=\"string\">&quot;-N -l&quot;</span> main.go</span><br><span class=\"line\">./main</span><br><span class=\"line\">ps -ef | grep ./main</span><br><span class=\"line\">dlv attach 进程<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure></li>\n<li><p>报错处理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Could not attach to pid 129591: this could be caused by a kernel security setting, try writing &quot;0&quot; to /proc/sys/kernel/yama/ptrace_scope</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo sysctl kernel.yama.ptrace_scope=0</span><br></pre></td></tr></table></figure></li>\n<li><p><code>dlv</code>指令</p>\n<ul>\n<li><p>断点管理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">break</span>(b)\t\t设置断点\t</span><br><span class=\"line\">breakpoints(bp)\t查看当前所有断点\t</span><br><span class=\"line\">clear\t\t\t删除断点</span><br><span class=\"line\">clearall\t\t删除多个断点\t</span><br><span class=\"line\">toggle\t\t\t启用或关闭断点</span><br></pre></td></tr></table></figure></li>\n<li><p>调试指令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">continue</span>(c)\t\t\t\t继续执行到一个断点或者程序结束</span><br><span class=\"line\">next(n)\t\t\t\t\t执行下一行代码</span><br><span class=\"line\">step(s)\t\t\t\t\t进入函数执行下一行代码</span><br><span class=\"line\">step-instruction(si)\t执行下一行机器码</span><br><span class=\"line\">stepout(so)\t\t\t\t跳出当前执行函数\t</span><br><span class=\"line\">restart(r)\t\t\t\t重新执行程码</span><br></pre></td></tr></table></figure></li>\n<li><p>参数管理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locals\t\t打印所有的局部变量</span><br><span class=\"line\">vars \t\t打印所有的全局变量</span><br><span class=\"line\">args\t\t打印当前函数的参数\t</span><br><span class=\"line\">display\t\t打印加入到display的变量的值\t</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)\t打印表达式的结果</span><br><span class=\"line\"><span class=\"built_in\">set</span>\t\t\t设置某个变量的值\t</span><br><span class=\"line\">vars\t\t查看全局变量</span><br><span class=\"line\">whatis\t\t查看变量类型\t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>debug案例1<br>  <code>config.yaml</code></p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TimeStamp:</span> <span class=\"string\">&quot;2018-07-16 10:23:19&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Author:</span> <span class=\"string\">&quot;WZP&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PassWd:</span> <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Information:</span></span><br><span class=\"line\">  <span class=\"attr\">Name:</span> <span class=\"string\">&quot;Harry&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Age:</span> <span class=\"string\">&quot;37&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Alise:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;Lion&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;NK&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;KaQS&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Image:</span> <span class=\"string\">&quot;/path/header.rpg&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Public:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Favorite:</span></span><br><span class=\"line\">  <span class=\"attr\">Sport:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;swimming&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;football&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Music:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;zui xuan min zu feng&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">LuckyNumber:</span> <span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n\n<p>  <code>main.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> config <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tv *viper.Viper</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LoadConfigFromYaml</span><span class=\"params\">(c *config)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t\tc.v = viper.New()</span><br><span class=\"line\">\t\tc.v.SetConfigFile(<span class=\"string\">&quot;./config.yaml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := c.v.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tage := c.v.Get(<span class=\"string\">&quot;Information.Age&quot;</span>)</span><br><span class=\"line\">\t\tname := c.v.Get(<span class=\"string\">&quot;Information.Name&quot;</span>)</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;age:%s, name:%s\\n&quot;</span>, age, name)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm := c.v.Sub(<span class=\"string\">&quot;information&quot;</span>)</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;keys:%s, image:%s&quot;</span>, m.AllKeys(), m.Get(<span class=\"string\">&quot;image&quot;</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tcfg := config&#123;v: viper.New()&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := LoadConfigFromYaml(&amp;cfg); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;Failed read config&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go程序调试\"><a href=\"#go程序调试\" class=\"headerlink\" title=\"go程序调试\"></a>go程序调试</h1><h2 id=\"delve\"><a href=\"#delve\" class=\"headerlink\" title=\"delve\"></a>delve</h2><ul>\n<li><p><code>delve</code>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/go-delve/delve/cmd/dlv@latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果go版本小于1.16可以使用下面方式安装</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/go-delve/delve</span><br><span class=\"line\"><span class=\"built_in\">cd</span> delve</span><br><span class=\"line\">go install github.com/go-delve/delve/cmd/dlv]</span><br></pre></td></tr></table></figure></li>\n<li><p>进入调试的方法</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、编译并开始调试当前目录下的包或者指定的包</span></span><br><span class=\"line\">dlv debug xxx.go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、找到项目运行的进程id,attach上去</span></span><br><span class=\"line\">go build -gcflags <span class=\"string\">&quot;-N -l&quot;</span> main.go</span><br><span class=\"line\">./main</span><br><span class=\"line\">ps -ef | grep ./main</span><br><span class=\"line\">dlv attach 进程<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure></li>\n<li><p>报错处理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Could not attach to pid 129591: this could be caused by a kernel security setting, try writing &quot;0&quot; to /proc/sys/kernel/yama/ptrace_scope</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo sysctl kernel.yama.ptrace_scope=0</span><br></pre></td></tr></table></figure></li>\n<li><p><code>dlv</code>指令</p>\n<ul>\n<li><p>断点管理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">break</span>(b)\t\t设置断点\t</span><br><span class=\"line\">breakpoints(bp)\t查看当前所有断点\t</span><br><span class=\"line\">clear\t\t\t删除断点</span><br><span class=\"line\">clearall\t\t删除多个断点\t</span><br><span class=\"line\">toggle\t\t\t启用或关闭断点</span><br></pre></td></tr></table></figure></li>\n<li><p>调试指令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">continue</span>(c)\t\t\t\t继续执行到一个断点或者程序结束</span><br><span class=\"line\">next(n)\t\t\t\t\t执行下一行代码</span><br><span class=\"line\">step(s)\t\t\t\t\t进入函数执行下一行代码</span><br><span class=\"line\">step-instruction(si)\t执行下一行机器码</span><br><span class=\"line\">stepout(so)\t\t\t\t跳出当前执行函数\t</span><br><span class=\"line\">restart(r)\t\t\t\t重新执行程码</span><br></pre></td></tr></table></figure></li>\n<li><p>参数管理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locals\t\t打印所有的局部变量</span><br><span class=\"line\">vars \t\t打印所有的全局变量</span><br><span class=\"line\">args\t\t打印当前函数的参数\t</span><br><span class=\"line\">display\t\t打印加入到display的变量的值\t</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)\t打印表达式的结果</span><br><span class=\"line\"><span class=\"built_in\">set</span>\t\t\t设置某个变量的值\t</span><br><span class=\"line\">vars\t\t查看全局变量</span><br><span class=\"line\">whatis\t\t查看变量类型\t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>debug案例1<br>  <code>config.yaml</code></p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TimeStamp:</span> <span class=\"string\">&quot;2018-07-16 10:23:19&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Author:</span> <span class=\"string\">&quot;WZP&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PassWd:</span> <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Information:</span></span><br><span class=\"line\">  <span class=\"attr\">Name:</span> <span class=\"string\">&quot;Harry&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Age:</span> <span class=\"string\">&quot;37&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Alise:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;Lion&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;NK&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;KaQS&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Image:</span> <span class=\"string\">&quot;/path/header.rpg&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Public:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Favorite:</span></span><br><span class=\"line\">  <span class=\"attr\">Sport:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;swimming&quot;</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;football&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">Music:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">&quot;zui xuan min zu feng&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">LuckyNumber:</span> <span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n\n<p>  <code>main.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> config <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tv *viper.Viper</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LoadConfigFromYaml</span><span class=\"params\">(c *config)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t\tc.v = viper.New()</span><br><span class=\"line\">\t\tc.v.SetConfigFile(<span class=\"string\">&quot;./config.yaml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := c.v.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tage := c.v.Get(<span class=\"string\">&quot;Information.Age&quot;</span>)</span><br><span class=\"line\">\t\tname := c.v.Get(<span class=\"string\">&quot;Information.Name&quot;</span>)</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;age:%s, name:%s\\n&quot;</span>, age, name)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm := c.v.Sub(<span class=\"string\">&quot;information&quot;</span>)</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;keys:%s, image:%s&quot;</span>, m.AllKeys(), m.Get(<span class=\"string\">&quot;image&quot;</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tcfg := config&#123;v: viper.New()&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := LoadConfigFromYaml(&amp;cfg); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;Failed read config&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Golang后端框架","_content":"# go Web后端框架\n\n## go标准库`net/http`\n\n`服务端示例代码:`\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc sayhello(res http.ResponseWriter, req *http.Request) {\n\tb, err := ioutil.ReadFile(\"./hello.txt\")\n\tif err != nil {\n\t\tfmt.Printf(\"ReadFile failed, err: %v\", err)\n\t\treturn\n\t}\n\tfmt.Fprintln(res, string(b))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", sayhello)\n\terr := http.ListenAndServe(\":9090\", nil)\n\tif err != nil {\n\t\tfmt.Printf(\"http server failed, err: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n## gin框架基本使用\n\n* gin框架安装\n\n``` bash\n# gin框架安装\ngo get -u \"github.com/gin-gonic/gin\"\"\n```\n\n`服务端代码`\n``` go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc sayhello(c *gin.Context) {\n\tc.JSON(200, gin.H{\n\t\t\"message\": \"hello golang\",\n\t})\n}\n\nfunc main() {\n\t// 创建一个默认的路由引擎\n\tr := gin.Default()\n\n\t//指定用户使用GET请求访问/hello时，执行sayhello\n\tr.GET(\"/hello\", sayhello)\n\t//启动服务\n\tr.Run()\n}\n```\n\n* <b>gin 返回json数据<b/>\n\n``` go\nfunc main() {\n\tr := gin.Default()\n\n\t// gin.H 是map[string]interface{}的缩写\n\tr.GET(\"/someJSON\", func(c *gin.Context) {\n\t\t// 方式一：自己拼接JSON\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello world!\"})\n\t})\n\tr.GET(\"/moreJSON\", func(c *gin.Context) {\n\t\t// 方法二：使用结构体\n\t\ttype msg struct {\n\t\t\t// 结构体tag标签\n\t\t\tName    string `json:\"user\"`\n\t\t\tMessage string\n\t\t\tAge     int\n\t\t}\n\n\t\tme := msg {\n\t\t\t\"lijihao\",\n\t\t\t\"male\",\n\t\t\t18,\n\t\t}\n\t\tc.JSON(http.StatusOK, me)\n\t})\n\tr.Run(\":8080\")\n}\n```\n\n* <b>gin 获取querystring参数<b/>\n\n`querystring`指的是URL中?后面携带的参数，例如：`/web?username=小王子&address=沙河` \n\n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/web\", func(c *gin.Context) {\n\t\t//获取get请求中的querystring\n\t\tname := c.Query(\"query\") //通过Query方法获取get请求中的querystring数据\n\t\tage := c.Query(\"age\")\n\t\t//name := c.DefaultQuery(\"query\", \"somebody\") //找不到就给一个指定的默认值\n\t\t//name, ok := c.GetQuery(\"query\") //如果取不到第二个参数返回布尔值\n\t\t//if !ok {\n\t\t//\tname = \"somebody\"\n\t\t//}\n\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\"name\": name,\n\t\t\tS\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n* <b>gin 获取form表单参数<b/>\n\n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.LoadHTMLFiles(\"./login.tmpl\", \"./index.tmpl\")\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"login.tmpl\", nil)\n\t})\n\n\t// 处理login post请求\n\tr.POST(\"/login\", func(c *gin.Context) {\n\t\t//获取form表单提交的数据\n\t\tusername := c.PostForm(\"username\")\n\t\tpassword := c.PostForm(\"password\")\n\t\t//username := c.DefaultPostForm(\"username\", \"***\")\n\t\t//password := c.DefaultPostForm(\"password\", \"***\")\n\t\t//username, _ := c.GetPostForm(\"username\")\n\t\t//password, _ := c.GetPostForm(\"password\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"Username\": username,\n\t\t\t\"Password\": password,\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n`login.tmpl`的内容如下:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>login</title>\n</head>\n<body>\n{{/*form表单参数*/}}\n<form action=\"/login\" method=\"post\" novalidate autocomplete=\"off\">\n    <div>\n        <label for=\"username\">username:</label>\n        <input type=\"text\" name=\"username\" id=\"username\">\n    </div>\n\n    <div>\n        <label for=\"password\">password:</label>\n        <input type=\"password\" name=\"password\" id=\"password\">\n    </div>\n\n    <div>\n        <input type=\"submit\" value=\"登录\">\n    </div>\n\n</form>\n</body>\n</html>\n```\n\n`index.tmpl`的内容如下:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>index</title>\n</head>\n<body>\n<h1>Hello Golang {{ .Username }}!</h1>\n<p>你的密码是{{ .Password }}</p>\n</body>\n</html>\n```\n* <b>gin 获取path参数</b>\n\n请求的参数通过URL路径传递，例如：`/user/search/小王子/沙河` \n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\t//动态路由, note:两个路径应该能够区分开\n\tr.GET(\"/user/:name/:age\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tage := c.Param(\"age\")\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"Name\": name,\n\t\t\t\"Age\": age,\n\t\t})\n\t})\n\n\tr.GET(\"/blogs/:year/:month\", func(c *gin.Context) {\n\t\tyear := c.Param(\"year\")\n\t\tmonth := c.Param(\"month\")\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"year\": year,\n\t\t\t\"month\": month,\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n* <b>gin 参数绑定<b/>\n\n\n为了能够更方便的获取请求相关参数，可以使用`ShouldBind()`自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype UserInfo struct {\n\t//note: `form:\"xx\" json:\"xxx\"`指定表单和json中使用的key\n\tUsername string `form:\"username\" json:\"username\"`\n\tPassword string `form:\"password\" json:\"password\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.LoadHTMLFiles(\"./login.tmpl\")\n\tr.GET(\"user\", func(c *gin.Context) {\n\t\t//var u1 UserInfo\n\t\t//u1.Username = c.Query(\"username\")\n\t\t//u1.Password = c.Query(\"password\")\n\t\t//参数绑定\n\t\tvar u UserInfo\n\t\t//提取querystring类型的参数，绑定到结构体\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tfmt.Printf(\"%#v\", u)\n\t\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"login.tmpl\", nil)\n\t})\n\n\tr.POST(\"/form\", func(c *gin.Context) {\n\t\tvar u UserInfo\n\t\t//绑定form表单参数\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.POST(\"/json\", func(c *gin.Context) {\n\t\tvar u UserInfo\n\t\t//绑定Json参数\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(\":9090\")\n}\n```\n\n`login.tmpl`的内容:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"ch-CN\">\n<head>\n    <title>login</title>\n</head>\n<body>\n{{/*from表单 action -->表示要往哪提交数据 method--> 表示强求的方法*/}}\n<form action=\"/form\" method=\"post\">\n    <input type=\"text\" name=\"username\">\n    <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n```\n\n* <b>gin 单个文件上传</b>\n\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.LoadHTMLFiles(\"./index.tmpl\")\n\tr.GET(\"/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", nil)\n\t})\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t// 从请求中读取文件\n\t\tf, err := c.FormFile(\"f1\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H {\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\t//将文件保存到本地(服务器)\n\t\t\tdst := fmt.Sprintf(\"./%s\", f.Filename)\n\t\t\tc.SaveUploadedFile(f, dst)\n\t\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\t\"status\": \"Ok\",\n\t\t\t})\n\t\t}\n\t})\n\tr.Run(\":9090\")\n}\n```\n`index.tmpl`的内容如下:\n``` html\n<!DOCTYPE html>\n<html lang=\"ch-CN\">\n<head>\n    <title>index</title>\n</head>\n<body>\n<form action=\"/upload\"  method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"f1\">\n    <input type=\"submit\" value=\"上传\">\n</form>\n</body>\n</html>\n```\n\n* <b>gin 多个文件上传</b>\n\n``` go\nfunc main() {\n\trouter := gin.Default()\n\t// 处理multipart forms提交文件时默认的内存限制是32 MiB\n\t// 可以通过下面的方式修改\n\t// router.MaxMultipartMemory = 8 << 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\t// Multipart form\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"file\"]\n\n\t\tfor index, file := range files {\n\t\t\tlog.Println(file.Filename)\n\t\t\tdst := fmt.Sprintf(\"C:/tmp/%s_%d\", file.Filename, index)\n\t\t\t// 上传文件到指定的目录\n\t\t\tc.SaveUploadedFile(file, dst)\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": fmt.Sprintf(\"%d files uploaded!\", len(files)),\n\t\t})\n\t})\n\trouter.Run()\n}\n```\n\n* <b>gin 重定向</b>\n\n请求重定向:\n``` go\nr.GET(\"/index\", func(c *gin.Context) {\n\tc.Redirect(http.StatusMovedPermanently, \"http://www.sogo.com\")\n})\n```\n请求转发\n``` go\nr.GET(\"/a\", func(c *gin.Context) {\n\t//跳转到b对应的路由函数\n\tc.Request.URL.Path = \"/b\" //修改请求的URL地址\n\tr.HandleContext(c) //继续后续的处理\n})\nr.GET(\"/b\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"message\": \"b\",\n\t})\n})\n```\n\n* <b>gin 重定向</b>\n\n* <b>普通路由</b>:\n\n``` go\nr.GET(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"GET\",\n\t})\n})\nr.POST(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"POST\",\n\t})\n})\nr.PUT(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"PUT\",\n\t})\n})\nr.DELETE(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"delete\",\n\t})\n})\n```\n此外，还有一个可以匹配所有请求方法的`Any`方法如下：\n``` go\n//能够使用这一个函数处理/user的所有请求\nr.Any(\"/user\", func(c *gin.Context) {\n\tswitch c.Request.Method {\n\tcase \"GET\":\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"GET\"})\n\tcase \"POST\":\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"PSOT\"})\n\tcase http.MethodPut:\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"PUT\"})\n\t}\n})\n```\n为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回`views/404.html`页面。\n``` go \nr.NoRoute(func(c *gin.Context) {\n\t\tc.HTML(http.StatusNotFound, \"views/404.html\", nil)\n\t})\n```\n\n<b>路由组</b>:\n\n``` go \n//路由组 多用于区分不同的业务线或者API版本\n//把公共前缀提取出来组成一个路由组\nvideoGroup := r.Group(\"/video\")\n{\n\tvideoGroup.GET(\"/index\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/index\"})\n\t})\n\tvideoGroup.GET(\"/xx\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/xx\"})\n\t})\n\tvideoGroup.GET(\"/oo\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/oo\"})\n\t})\n}\n```\n路由组也是支持嵌套的，例如：\n``` go\nshopGroup := r.Group(\"/shop\")\n\t{\n\t\tshopGroup.GET(\"/index\", func(c *gin.Context) {...})\n\t\tshopGroup.GET(\"/cart\", func(c *gin.Context) {...})\n\t\tshopGroup.POST(\"/checkout\", func(c *gin.Context) {...})\n\t\t// 嵌套路由组\n\t\txx := shopGroup.Group(\"xx\")\n\t\txx.GET(\"/oo\", func(c *gin.Context) {...})\n\t}\n```\n* <b>gin 中间件</b>:\n\nGin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。\n\n<b>定义中间件</b>\n\nGin的中间件必须是`func(c *gin.Context)`类型 \n``` go\n// StatCost 是一个统计耗时请求耗时的中间件\nfunc StatCost(c *gin.Context) {\n\t\tprintln(\"StatCost in\")\n\t\tstart := time.Now()\n\t\tc.Set(\"name\", \"小王子\") // 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值\n\t\t// 调用该请求的剩余处理程序\n\t\tc.Next()\n\t\t// 不调用该请求的剩余处理程序\n\t\t// c.Abort()\n\t\t// 计算耗时\n\t\tcost := time.Since(start)\n\t\tlog.Println(cost)\n\t\tprintln(\"StatCost out\")\n}\n```\n中间件一般使用闭包来做，中间还可以加一些其他逻辑，以权限校验为例:\n``` go\nfunc authMiddleware(doCheck bool) gin.HandlerFunc {\n\t//连接数据库\n\t//或者一些其它的准备工作\n\treturn func(c *gin.Context) {\n\t\tif doCheck { //doCheck相当于一个开关\n\t\t\t//是否登录的判断\n\t\t\t// if 是登录用户\n\t\t\t// c.Next()\n\t\t\t// else\n\t\t\t// c.Abort()\n\t\t} else {\n\t\t\tc.Next()\n\t\t}\n\t}\n}\n```\n\n<b>注册中间件</b>\n\n在gin框架中，我们可以为每个路由添加任意数量的中间件。\n\n* 为全局路由注册中间件\n``` go\nfunc main() {\n\t// 新建一个没有任何默认中间件的路由\n\tr := gin.New()\n\t// 注册一个全局中间件\n\tr.Use(StatCost)\n\n\tr.GET(\"/test\", func(c *gin.Context) {\n\t\tname := c.MustGet(\"name\").(string) // 从上下文取值\n\t\tlog.Println(name)\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Hello world!\",\n\t\t})\n\t})\n\tr.Run()\n}\n```\n* 为某个路由单独注册中间件\n``` go\n// 给/test2路由单独注册中间件（可注册多个）\nr.GET(\"/test2\", StatCost, func(c *gin.Context) {\n\tname := c.MustGet(\"name\").(string) // 从上下文取值\n\tlog.Println(name)\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"message\": \"Hello world!\",\n\t})\n})\n```\n* 为路由组注册中间件\n为路由组注册中间件有以下两种写法:\n1. 写法1:\n``` go\nshopGroup := r.Group(\"/shop\", StatCost)\n{\n    shopGroup.GET(\"/index\", func(c *gin.Context) {...})\n    ...\n}\n```\n2. 写法2:\n``` go\nshopGroup := r.Group(\"/shop\")\nshopGroup.Use(StatCost)\n{\n    shopGroup.GET(\"/index\", func(c *gin.Context) {...})\n    ...\n}\n```\n\n`note:`\n<b>gin默认中间件</b>\n`gin.Default()`默认使用了`Logger`和`Recovery`中间件，其中：\n\n`Logger`中间件将日志写入gin.DefaultWriter，即使配置了`GIN_MODE=release`\n`Recovery`中间件会recover任何panic。如果有panic的话，会写入500响应码。\n如果不想使用上面两个默认的中间件，可以使用`gin.New()`新建一个没有任何默认中间件的路由。\n\n","source":"_posts/go/go_gin.md","raw":"---\ntitle: Golang后端框架 \ncategories: \n- GolangStudy\n---\n# go Web后端框架\n\n## go标准库`net/http`\n\n`服务端示例代码:`\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc sayhello(res http.ResponseWriter, req *http.Request) {\n\tb, err := ioutil.ReadFile(\"./hello.txt\")\n\tif err != nil {\n\t\tfmt.Printf(\"ReadFile failed, err: %v\", err)\n\t\treturn\n\t}\n\tfmt.Fprintln(res, string(b))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", sayhello)\n\terr := http.ListenAndServe(\":9090\", nil)\n\tif err != nil {\n\t\tfmt.Printf(\"http server failed, err: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n## gin框架基本使用\n\n* gin框架安装\n\n``` bash\n# gin框架安装\ngo get -u \"github.com/gin-gonic/gin\"\"\n```\n\n`服务端代码`\n``` go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc sayhello(c *gin.Context) {\n\tc.JSON(200, gin.H{\n\t\t\"message\": \"hello golang\",\n\t})\n}\n\nfunc main() {\n\t// 创建一个默认的路由引擎\n\tr := gin.Default()\n\n\t//指定用户使用GET请求访问/hello时，执行sayhello\n\tr.GET(\"/hello\", sayhello)\n\t//启动服务\n\tr.Run()\n}\n```\n\n* <b>gin 返回json数据<b/>\n\n``` go\nfunc main() {\n\tr := gin.Default()\n\n\t// gin.H 是map[string]interface{}的缩写\n\tr.GET(\"/someJSON\", func(c *gin.Context) {\n\t\t// 方式一：自己拼接JSON\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello world!\"})\n\t})\n\tr.GET(\"/moreJSON\", func(c *gin.Context) {\n\t\t// 方法二：使用结构体\n\t\ttype msg struct {\n\t\t\t// 结构体tag标签\n\t\t\tName    string `json:\"user\"`\n\t\t\tMessage string\n\t\t\tAge     int\n\t\t}\n\n\t\tme := msg {\n\t\t\t\"lijihao\",\n\t\t\t\"male\",\n\t\t\t18,\n\t\t}\n\t\tc.JSON(http.StatusOK, me)\n\t})\n\tr.Run(\":8080\")\n}\n```\n\n* <b>gin 获取querystring参数<b/>\n\n`querystring`指的是URL中?后面携带的参数，例如：`/web?username=小王子&address=沙河` \n\n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/web\", func(c *gin.Context) {\n\t\t//获取get请求中的querystring\n\t\tname := c.Query(\"query\") //通过Query方法获取get请求中的querystring数据\n\t\tage := c.Query(\"age\")\n\t\t//name := c.DefaultQuery(\"query\", \"somebody\") //找不到就给一个指定的默认值\n\t\t//name, ok := c.GetQuery(\"query\") //如果取不到第二个参数返回布尔值\n\t\t//if !ok {\n\t\t//\tname = \"somebody\"\n\t\t//}\n\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\"name\": name,\n\t\t\tS\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n* <b>gin 获取form表单参数<b/>\n\n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.LoadHTMLFiles(\"./login.tmpl\", \"./index.tmpl\")\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"login.tmpl\", nil)\n\t})\n\n\t// 处理login post请求\n\tr.POST(\"/login\", func(c *gin.Context) {\n\t\t//获取form表单提交的数据\n\t\tusername := c.PostForm(\"username\")\n\t\tpassword := c.PostForm(\"password\")\n\t\t//username := c.DefaultPostForm(\"username\", \"***\")\n\t\t//password := c.DefaultPostForm(\"password\", \"***\")\n\t\t//username, _ := c.GetPostForm(\"username\")\n\t\t//password, _ := c.GetPostForm(\"password\")\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"Username\": username,\n\t\t\t\"Password\": password,\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n`login.tmpl`的内容如下:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>login</title>\n</head>\n<body>\n{{/*form表单参数*/}}\n<form action=\"/login\" method=\"post\" novalidate autocomplete=\"off\">\n    <div>\n        <label for=\"username\">username:</label>\n        <input type=\"text\" name=\"username\" id=\"username\">\n    </div>\n\n    <div>\n        <label for=\"password\">password:</label>\n        <input type=\"password\" name=\"password\" id=\"password\">\n    </div>\n\n    <div>\n        <input type=\"submit\" value=\"登录\">\n    </div>\n\n</form>\n</body>\n</html>\n```\n\n`index.tmpl`的内容如下:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>index</title>\n</head>\n<body>\n<h1>Hello Golang {{ .Username }}!</h1>\n<p>你的密码是{{ .Password }}</p>\n</body>\n</html>\n```\n* <b>gin 获取path参数</b>\n\n请求的参数通过URL路径传递，例如：`/user/search/小王子/沙河` \n``` go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\t//动态路由, note:两个路径应该能够区分开\n\tr.GET(\"/user/:name/:age\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tage := c.Param(\"age\")\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"Name\": name,\n\t\t\t\"Age\": age,\n\t\t})\n\t})\n\n\tr.GET(\"/blogs/:year/:month\", func(c *gin.Context) {\n\t\tyear := c.Param(\"year\")\n\t\tmonth := c.Param(\"month\")\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"year\": year,\n\t\t\t\"month\": month,\n\t\t})\n\t})\n\tr.Run(\":9090\")\n}\n```\n\n* <b>gin 参数绑定<b/>\n\n\n为了能够更方便的获取请求相关参数，可以使用`ShouldBind()`自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype UserInfo struct {\n\t//note: `form:\"xx\" json:\"xxx\"`指定表单和json中使用的key\n\tUsername string `form:\"username\" json:\"username\"`\n\tPassword string `form:\"password\" json:\"password\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.LoadHTMLFiles(\"./login.tmpl\")\n\tr.GET(\"user\", func(c *gin.Context) {\n\t\t//var u1 UserInfo\n\t\t//u1.Username = c.Query(\"username\")\n\t\t//u1.Password = c.Query(\"password\")\n\t\t//参数绑定\n\t\tvar u UserInfo\n\t\t//提取querystring类型的参数，绑定到结构体\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tfmt.Printf(\"%#v\", u)\n\t\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"login.tmpl\", nil)\n\t})\n\n\tr.POST(\"/form\", func(c *gin.Context) {\n\t\tvar u UserInfo\n\t\t//绑定form表单参数\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.POST(\"/json\", func(c *gin.Context) {\n\t\tvar u UserInfo\n\t\t//绑定Json参数\n\t\terr := c.ShouldBind(&u)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\"name\": u.Username,\n\t\t\t\t\"password\": u.Password,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(\":9090\")\n}\n```\n\n`login.tmpl`的内容:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"ch-CN\">\n<head>\n    <title>login</title>\n</head>\n<body>\n{{/*from表单 action -->表示要往哪提交数据 method--> 表示强求的方法*/}}\n<form action=\"/form\" method=\"post\">\n    <input type=\"text\" name=\"username\">\n    <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n```\n\n* <b>gin 单个文件上传</b>\n\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.LoadHTMLFiles(\"./index.tmpl\")\n\tr.GET(\"/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", nil)\n\t})\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t// 从请求中读取文件\n\t\tf, err := c.FormFile(\"f1\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H {\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t} else {\n\t\t\t//将文件保存到本地(服务器)\n\t\t\tdst := fmt.Sprintf(\"./%s\", f.Filename)\n\t\t\tc.SaveUploadedFile(f, dst)\n\t\t\tc.JSON(http.StatusOK, gin.H {\n\t\t\t\t\"status\": \"Ok\",\n\t\t\t})\n\t\t}\n\t})\n\tr.Run(\":9090\")\n}\n```\n`index.tmpl`的内容如下:\n``` html\n<!DOCTYPE html>\n<html lang=\"ch-CN\">\n<head>\n    <title>index</title>\n</head>\n<body>\n<form action=\"/upload\"  method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"f1\">\n    <input type=\"submit\" value=\"上传\">\n</form>\n</body>\n</html>\n```\n\n* <b>gin 多个文件上传</b>\n\n``` go\nfunc main() {\n\trouter := gin.Default()\n\t// 处理multipart forms提交文件时默认的内存限制是32 MiB\n\t// 可以通过下面的方式修改\n\t// router.MaxMultipartMemory = 8 << 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\t// Multipart form\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"file\"]\n\n\t\tfor index, file := range files {\n\t\t\tlog.Println(file.Filename)\n\t\t\tdst := fmt.Sprintf(\"C:/tmp/%s_%d\", file.Filename, index)\n\t\t\t// 上传文件到指定的目录\n\t\t\tc.SaveUploadedFile(file, dst)\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": fmt.Sprintf(\"%d files uploaded!\", len(files)),\n\t\t})\n\t})\n\trouter.Run()\n}\n```\n\n* <b>gin 重定向</b>\n\n请求重定向:\n``` go\nr.GET(\"/index\", func(c *gin.Context) {\n\tc.Redirect(http.StatusMovedPermanently, \"http://www.sogo.com\")\n})\n```\n请求转发\n``` go\nr.GET(\"/a\", func(c *gin.Context) {\n\t//跳转到b对应的路由函数\n\tc.Request.URL.Path = \"/b\" //修改请求的URL地址\n\tr.HandleContext(c) //继续后续的处理\n})\nr.GET(\"/b\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"message\": \"b\",\n\t})\n})\n```\n\n* <b>gin 重定向</b>\n\n* <b>普通路由</b>:\n\n``` go\nr.GET(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"GET\",\n\t})\n})\nr.POST(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"POST\",\n\t})\n})\nr.PUT(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"PUT\",\n\t})\n})\nr.DELETE(\"/index\", func(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H {\n\t\t\"method\": \"delete\",\n\t})\n})\n```\n此外，还有一个可以匹配所有请求方法的`Any`方法如下：\n``` go\n//能够使用这一个函数处理/user的所有请求\nr.Any(\"/user\", func(c *gin.Context) {\n\tswitch c.Request.Method {\n\tcase \"GET\":\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"GET\"})\n\tcase \"POST\":\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"PSOT\"})\n\tcase http.MethodPut:\n\t\tc.JSON(http.StatusOK, gin.H{\"method\": \"PUT\"})\n\t}\n})\n```\n为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回`views/404.html`页面。\n``` go \nr.NoRoute(func(c *gin.Context) {\n\t\tc.HTML(http.StatusNotFound, \"views/404.html\", nil)\n\t})\n```\n\n<b>路由组</b>:\n\n``` go \n//路由组 多用于区分不同的业务线或者API版本\n//把公共前缀提取出来组成一个路由组\nvideoGroup := r.Group(\"/video\")\n{\n\tvideoGroup.GET(\"/index\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/index\"})\n\t})\n\tvideoGroup.GET(\"/xx\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/xx\"})\n\t})\n\tvideoGroup.GET(\"/oo\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"/video/oo\"})\n\t})\n}\n```\n路由组也是支持嵌套的，例如：\n``` go\nshopGroup := r.Group(\"/shop\")\n\t{\n\t\tshopGroup.GET(\"/index\", func(c *gin.Context) {...})\n\t\tshopGroup.GET(\"/cart\", func(c *gin.Context) {...})\n\t\tshopGroup.POST(\"/checkout\", func(c *gin.Context) {...})\n\t\t// 嵌套路由组\n\t\txx := shopGroup.Group(\"xx\")\n\t\txx.GET(\"/oo\", func(c *gin.Context) {...})\n\t}\n```\n* <b>gin 中间件</b>:\n\nGin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。\n\n<b>定义中间件</b>\n\nGin的中间件必须是`func(c *gin.Context)`类型 \n``` go\n// StatCost 是一个统计耗时请求耗时的中间件\nfunc StatCost(c *gin.Context) {\n\t\tprintln(\"StatCost in\")\n\t\tstart := time.Now()\n\t\tc.Set(\"name\", \"小王子\") // 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值\n\t\t// 调用该请求的剩余处理程序\n\t\tc.Next()\n\t\t// 不调用该请求的剩余处理程序\n\t\t// c.Abort()\n\t\t// 计算耗时\n\t\tcost := time.Since(start)\n\t\tlog.Println(cost)\n\t\tprintln(\"StatCost out\")\n}\n```\n中间件一般使用闭包来做，中间还可以加一些其他逻辑，以权限校验为例:\n``` go\nfunc authMiddleware(doCheck bool) gin.HandlerFunc {\n\t//连接数据库\n\t//或者一些其它的准备工作\n\treturn func(c *gin.Context) {\n\t\tif doCheck { //doCheck相当于一个开关\n\t\t\t//是否登录的判断\n\t\t\t// if 是登录用户\n\t\t\t// c.Next()\n\t\t\t// else\n\t\t\t// c.Abort()\n\t\t} else {\n\t\t\tc.Next()\n\t\t}\n\t}\n}\n```\n\n<b>注册中间件</b>\n\n在gin框架中，我们可以为每个路由添加任意数量的中间件。\n\n* 为全局路由注册中间件\n``` go\nfunc main() {\n\t// 新建一个没有任何默认中间件的路由\n\tr := gin.New()\n\t// 注册一个全局中间件\n\tr.Use(StatCost)\n\n\tr.GET(\"/test\", func(c *gin.Context) {\n\t\tname := c.MustGet(\"name\").(string) // 从上下文取值\n\t\tlog.Println(name)\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Hello world!\",\n\t\t})\n\t})\n\tr.Run()\n}\n```\n* 为某个路由单独注册中间件\n``` go\n// 给/test2路由单独注册中间件（可注册多个）\nr.GET(\"/test2\", StatCost, func(c *gin.Context) {\n\tname := c.MustGet(\"name\").(string) // 从上下文取值\n\tlog.Println(name)\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"message\": \"Hello world!\",\n\t})\n})\n```\n* 为路由组注册中间件\n为路由组注册中间件有以下两种写法:\n1. 写法1:\n``` go\nshopGroup := r.Group(\"/shop\", StatCost)\n{\n    shopGroup.GET(\"/index\", func(c *gin.Context) {...})\n    ...\n}\n```\n2. 写法2:\n``` go\nshopGroup := r.Group(\"/shop\")\nshopGroup.Use(StatCost)\n{\n    shopGroup.GET(\"/index\", func(c *gin.Context) {...})\n    ...\n}\n```\n\n`note:`\n<b>gin默认中间件</b>\n`gin.Default()`默认使用了`Logger`和`Recovery`中间件，其中：\n\n`Logger`中间件将日志写入gin.DefaultWriter，即使配置了`GIN_MODE=release`\n`Recovery`中间件会recover任何panic。如果有panic的话，会写入500响应码。\n如果不想使用上面两个默认的中间件，可以使用`gin.New()`新建一个没有任何默认中间件的路由。\n\n","slug":"go/go_gin","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6cr0004f8wz0zdzersq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"go-Web后端框架\"><a href=\"#go-Web后端框架\" class=\"headerlink\" title=\"go Web后端框架\"></a>go Web后端框架</h1><h2 id=\"go标准库net-http\"><a href=\"#go标准库net-http\" class=\"headerlink\" title=\"go标准库net/http\"></a>go标准库<code>net/http</code></h2><p><code>服务端示例代码:</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(res http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tb, err := ioutil.ReadFile(<span class=\"string\">&quot;./hello.txt&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;ReadFile failed, err: %v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Fprintln(res, <span class=\"type\">string</span>(b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/hello&quot;</span>, sayhello)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:9090&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;http server failed, err: %v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gin框架基本使用\"><a href=\"#gin框架基本使用\" class=\"headerlink\" title=\"gin框架基本使用\"></a>gin框架基本使用</h2><ul>\n<li>gin框架安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gin框架安装</span></span><br><span class=\"line\">go get -u <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span><span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;hello golang&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个默认的路由引擎</span></span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指定用户使用GET请求访问/hello时，执行sayhello</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/hello&quot;</span>, sayhello)</span><br><span class=\"line\">\t<span class=\"comment\">//启动服务</span></span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 返回json数据<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/someJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式一：自己拼接JSON</span></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/moreJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方法二：使用结构体</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">type</span> msg <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 结构体tag标签</span></span><br><span class=\"line\">\t\t\tName    <span class=\"type\">string</span> <span class=\"string\">`json:&quot;user&quot;`</span></span><br><span class=\"line\">\t\t\tMessage <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tAge     <span class=\"type\">int</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tme := msg &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;lijihao&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, me)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 获取querystring参数<b/></li>\n</ul>\n<p><code>querystring</code>指的是URL中?后面携带的参数，例如：<code>/web?username=小王子&amp;address=沙河</code> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/web&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取get请求中的querystring</span></span><br><span class=\"line\">\t\tname := c.Query(<span class=\"string\">&quot;query&quot;</span>) <span class=\"comment\">//通过Query方法获取get请求中的querystring数据</span></span><br><span class=\"line\">\t\tage := c.Query(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//name := c.DefaultQuery(&quot;query&quot;, &quot;somebody&quot;) //找不到就给一个指定的默认值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//name, ok := c.GetQuery(&quot;query&quot;) //如果取不到第二个参数返回布尔值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//if !ok &#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tname = &quot;somebody&quot;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">\t\t\tS</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 获取form表单参数<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./login.tmpl&quot;</span>, <span class=\"string\">&quot;./index.tmpl&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;login.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理login post请求</span></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取form表单提交的数据</span></span><br><span class=\"line\">\t\tusername := c.PostForm(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\t\tpassword := c.PostForm(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//username := c.DefaultPostForm(&quot;username&quot;, &quot;***&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//password := c.DefaultPostForm(&quot;password&quot;, &quot;***&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//username, _ := c.GetPostForm(&quot;username&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//password, _ := c.GetPostForm(&quot;password&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Username&quot;</span>: username,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Password&quot;</span>: password,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>login.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;/*form表单参数*/&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">novalidate</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>username:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>index.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Golang &#123;&#123; .Username &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你的密码是&#123;&#123; .Password &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><b>gin 获取path参数</b></li>\n</ul>\n<p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">//动态路由, note:两个路径应该能够区分开</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/user/:name/:age&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tname := c.Param(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">\t\tage := c.Param(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Name&quot;</span>: name,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Age&quot;</span>: age,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/blogs/:year/:month&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tyear := c.Param(<span class=\"string\">&quot;year&quot;</span>)</span><br><span class=\"line\">\t\tmonth := c.Param(<span class=\"string\">&quot;month&quot;</span>)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;year&quot;</span>: year,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;month&quot;</span>: month,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 参数绑定<b/></li>\n</ul>\n<p>为了能够更方便的获取请求相关参数，可以使用<code>ShouldBind()</code>自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//note: `form:&quot;xx&quot; json:&quot;xxx&quot;`指定表单和json中使用的key</span></span><br><span class=\"line\">\tUsername <span class=\"type\">string</span> <span class=\"string\">`form:&quot;username&quot; json:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span> <span class=\"string\">`form:&quot;password&quot; json:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./login.tmpl&quot;</span>)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;user&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//var u1 UserInfo</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//u1.Username = c.Query(&quot;username&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//u1.Password = c.Query(&quot;password&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//参数绑定</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//提取querystring类型的参数，绑定到结构体</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%#v&quot;</span>, u)</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;login.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/form&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//绑定form表单参数</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/json&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//绑定Json参数</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>login.tmpl</code>的内容:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch-CN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;/*from表单 action --&gt;表示要往哪提交数据 method--&gt; 表示强求的方法*/&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/form&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 单个文件上传</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./index.tmpl&quot;</span>)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;index.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从请求中读取文件</span></span><br><span class=\"line\">\t\tf, err := c.FormFile(<span class=\"string\">&quot;f1&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将文件保存到本地(服务器)</span></span><br><span class=\"line\">\t\t\tdst := fmt.Sprintf(<span class=\"string\">&quot;./%s&quot;</span>, f.Filename)</span><br><span class=\"line\">\t\t\tc.SaveUploadedFile(f, dst)</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;Ok&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch-CN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/upload&quot;</span>  <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;f1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;上传&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 多个文件上传</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span></span><br><span class=\"line\">\t<span class=\"comment\">// 可以通过下面的方式修改</span></span><br><span class=\"line\">\t<span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">\trouter.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Multipart form</span></span><br><span class=\"line\">\t\tform, _ := c.MultipartForm()</span><br><span class=\"line\">\t\tfiles := form.File[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> index, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">\t\t\tlog.Println(file.Filename)</span><br><span class=\"line\">\t\t\tdst := fmt.Sprintf(<span class=\"string\">&quot;C:/tmp/%s_%d&quot;</span>, file.Filename, index)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 上传文件到指定的目录</span></span><br><span class=\"line\">\t\t\tc.SaveUploadedFile(file, dst)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;message&quot;</span>: fmt.Sprintf(<span class=\"string\">&quot;%d files uploaded!&quot;</span>, <span class=\"built_in\">len</span>(files)),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 重定向</b></li>\n</ul>\n<p>请求重定向:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;http://www.sogo.com&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>请求转发</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/a&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//跳转到b对应的路由函数</span></span><br><span class=\"line\">\tc.Request.URL.Path = <span class=\"string\">&quot;/b&quot;</span> <span class=\"comment\">//修改请求的URL地址</span></span><br><span class=\"line\">\tr.HandleContext(c) <span class=\"comment\">//继续后续的处理</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/b&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;b&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><b>gin 重定向</b></p>\n</li>\n<li><p><b>普通路由</b>:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.POST(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.PUT(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PUT&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.DELETE(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;delete&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此外，还有一个可以匹配所有请求方法的<code>Any</code>方法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//能够使用这一个函数处理/user的所有请求</span></span><br><span class=\"line\">r.Any(<span class=\"string\">&quot;/user&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> c.Request.Method &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PSOT&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> http.MethodPut:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PUT&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回<code>views/404.html</code>页面。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusNotFound, <span class=\"string\">&quot;views/404.html&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><b>路由组</b>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由组 多用于区分不同的业务线或者API版本</span></span><br><span class=\"line\"><span class=\"comment\">//把公共前缀提取出来组成一个路由组</span></span><br><span class=\"line\">videoGroup := r.Group(<span class=\"string\">&quot;/video&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/index&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/xx&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/xx&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/oo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/oo&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由组也是支持嵌套的，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\tshopGroup.GET(<span class=\"string\">&quot;/cart&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\tshopGroup.POST(<span class=\"string\">&quot;/checkout&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 嵌套路由组</span></span><br><span class=\"line\">\t\txx := shopGroup.Group(<span class=\"string\">&quot;xx&quot;</span>)</span><br><span class=\"line\">\t\txx.GET(<span class=\"string\">&quot;/oo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><b>gin 中间件</b>:</li>\n</ul>\n<p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p>\n<p><b>定义中间件</b></p>\n<p>Gin的中间件必须是<code>func(c *gin.Context)</code>类型 </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StatCost 是一个统计耗时请求耗时的中间件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StatCost</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;StatCost in&quot;</span>)</span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\tc.Set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;小王子&quot;</span>) <span class=\"comment\">// 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用该请求的剩余处理程序</span></span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 不调用该请求的剩余处理程序</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// c.Abort()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算耗时</span></span><br><span class=\"line\">\t\tcost := time.Since(start)</span><br><span class=\"line\">\t\tlog.Println(cost)</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;StatCost out&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中间件一般使用闭包来做，中间还可以加一些其他逻辑，以权限校验为例:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">authMiddleware</span><span class=\"params\">(doCheck <span class=\"type\">bool</span>)</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">\t<span class=\"comment\">//或者一些其它的准备工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> doCheck &#123; <span class=\"comment\">//doCheck相当于一个开关</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//是否登录的判断</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// if 是登录用户</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// c.Next()</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// else</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// c.Abort()</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.Next()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><b>注册中间件</b></p>\n<p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p>\n<ul>\n<li>为全局路由注册中间件<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个没有任何默认中间件的路由</span></span><br><span class=\"line\">\tr := gin.New()</span><br><span class=\"line\">\t<span class=\"comment\">// 注册一个全局中间件</span></span><br><span class=\"line\">\tr.Use(StatCost)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/test&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tname := c.MustGet(<span class=\"string\">&quot;name&quot;</span>).(<span class=\"type\">string</span>) <span class=\"comment\">// 从上下文取值</span></span><br><span class=\"line\">\t\tlog.Println(name)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>为某个路由单独注册中间件<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给/test2路由单独注册中间件（可注册多个）</span></span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/test2&quot;</span>, StatCost, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tname := c.MustGet(<span class=\"string\">&quot;name&quot;</span>).(<span class=\"type\">string</span>) <span class=\"comment\">// 从上下文取值</span></span><br><span class=\"line\">\tlog.Println(name)</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>为路由组注册中间件<br>为路由组注册中间件有以下两种写法:</li>\n</ul>\n<ol>\n<li>写法1:<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>, StatCost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写法2:<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>)</span><br><span class=\"line\">shopGroup.Use(StatCost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><code>note:</code><br><b>gin默认中间件</b><br><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p>\n<p><code>Logger</code>中间件将日志写入gin.DefaultWriter，即使配置了<code>GIN_MODE=release</code><br><code>Recovery</code>中间件会recover任何panic。如果有panic的话，会写入500响应码。<br>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go-Web后端框架\"><a href=\"#go-Web后端框架\" class=\"headerlink\" title=\"go Web后端框架\"></a>go Web后端框架</h1><h2 id=\"go标准库net-http\"><a href=\"#go标准库net-http\" class=\"headerlink\" title=\"go标准库net/http\"></a>go标准库<code>net/http</code></h2><p><code>服务端示例代码:</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(res http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tb, err := ioutil.ReadFile(<span class=\"string\">&quot;./hello.txt&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;ReadFile failed, err: %v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Fprintln(res, <span class=\"type\">string</span>(b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/hello&quot;</span>, sayhello)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:9090&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;http server failed, err: %v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gin框架基本使用\"><a href=\"#gin框架基本使用\" class=\"headerlink\" title=\"gin框架基本使用\"></a>gin框架基本使用</h2><ul>\n<li>gin框架安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gin框架安装</span></span><br><span class=\"line\">go get -u <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span><span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;hello golang&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个默认的路由引擎</span></span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指定用户使用GET请求访问/hello时，执行sayhello</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/hello&quot;</span>, sayhello)</span><br><span class=\"line\">\t<span class=\"comment\">//启动服务</span></span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 返回json数据<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/someJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式一：自己拼接JSON</span></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/moreJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方法二：使用结构体</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">type</span> msg <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 结构体tag标签</span></span><br><span class=\"line\">\t\t\tName    <span class=\"type\">string</span> <span class=\"string\">`json:&quot;user&quot;`</span></span><br><span class=\"line\">\t\t\tMessage <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tAge     <span class=\"type\">int</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tme := msg &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;lijihao&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;male&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, me)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 获取querystring参数<b/></li>\n</ul>\n<p><code>querystring</code>指的是URL中?后面携带的参数，例如：<code>/web?username=小王子&amp;address=沙河</code> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/web&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取get请求中的querystring</span></span><br><span class=\"line\">\t\tname := c.Query(<span class=\"string\">&quot;query&quot;</span>) <span class=\"comment\">//通过Query方法获取get请求中的querystring数据</span></span><br><span class=\"line\">\t\tage := c.Query(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//name := c.DefaultQuery(&quot;query&quot;, &quot;somebody&quot;) //找不到就给一个指定的默认值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//name, ok := c.GetQuery(&quot;query&quot;) //如果取不到第二个参数返回布尔值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//if !ok &#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tname = &quot;somebody&quot;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">\t\t\tS</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 获取form表单参数<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./login.tmpl&quot;</span>, <span class=\"string\">&quot;./index.tmpl&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;login.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理login post请求</span></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取form表单提交的数据</span></span><br><span class=\"line\">\t\tusername := c.PostForm(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\t\tpassword := c.PostForm(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">//username := c.DefaultPostForm(&quot;username&quot;, &quot;***&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//password := c.DefaultPostForm(&quot;password&quot;, &quot;***&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//username, _ := c.GetPostForm(&quot;username&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//password, _ := c.GetPostForm(&quot;password&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Username&quot;</span>: username,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Password&quot;</span>: password,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>login.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;/*form表单参数*/&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">novalidate</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>username:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>index.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Golang &#123;&#123; .Username &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你的密码是&#123;&#123; .Password &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><b>gin 获取path参数</b></li>\n</ul>\n<p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">//动态路由, note:两个路径应该能够区分开</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/user/:name/:age&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tname := c.Param(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">\t\tage := c.Param(<span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Name&quot;</span>: name,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Age&quot;</span>: age,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/blogs/:year/:month&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tyear := c.Param(<span class=\"string\">&quot;year&quot;</span>)</span><br><span class=\"line\">\t\tmonth := c.Param(<span class=\"string\">&quot;month&quot;</span>)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;year&quot;</span>: year,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;month&quot;</span>: month,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 参数绑定<b/></li>\n</ul>\n<p>为了能够更方便的获取请求相关参数，可以使用<code>ShouldBind()</code>自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//note: `form:&quot;xx&quot; json:&quot;xxx&quot;`指定表单和json中使用的key</span></span><br><span class=\"line\">\tUsername <span class=\"type\">string</span> <span class=\"string\">`form:&quot;username&quot; json:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span> <span class=\"string\">`form:&quot;password&quot; json:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./login.tmpl&quot;</span>)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;user&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//var u1 UserInfo</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//u1.Username = c.Query(&quot;username&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//u1.Password = c.Query(&quot;password&quot;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//参数绑定</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//提取querystring类型的参数，绑定到结构体</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%#v&quot;</span>, u)</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;login.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/form&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//绑定form表单参数</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/json&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t\t<span class=\"comment\">//绑定Json参数</span></span><br><span class=\"line\">\t\terr := c.ShouldBind(&amp;u)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: u.Username,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;password&quot;</span>: u.Password,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>login.tmpl</code>的内容:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch-CN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;/*from表单 action --&gt;表示要往哪提交数据 method--&gt; 表示强求的方法*/&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/form&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 单个文件上传</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.LoadHTMLFiles(<span class=\"string\">&quot;./index.tmpl&quot;</span>)</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">&quot;index.tmpl&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从请求中读取文件</span></span><br><span class=\"line\">\t\tf, err := c.FormFile(<span class=\"string\">&quot;f1&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusBadRequest, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;error&quot;</span>: err.Error(),</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将文件保存到本地(服务器)</span></span><br><span class=\"line\">\t\t\tdst := fmt.Sprintf(<span class=\"string\">&quot;./%s&quot;</span>, f.Filename)</span><br><span class=\"line\">\t\t\tc.SaveUploadedFile(f, dst)</span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;Ok&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run(<span class=\"string\">&quot;:9090&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index.tmpl</code>的内容如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch-CN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/upload&quot;</span>  <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;f1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;上传&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 多个文件上传</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span></span><br><span class=\"line\">\t<span class=\"comment\">// 可以通过下面的方式修改</span></span><br><span class=\"line\">\t<span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">\trouter.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Multipart form</span></span><br><span class=\"line\">\t\tform, _ := c.MultipartForm()</span><br><span class=\"line\">\t\tfiles := form.File[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> index, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">\t\t\tlog.Println(file.Filename)</span><br><span class=\"line\">\t\t\tdst := fmt.Sprintf(<span class=\"string\">&quot;C:/tmp/%s_%d&quot;</span>, file.Filename, index)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 上传文件到指定的目录</span></span><br><span class=\"line\">\t\t\tc.SaveUploadedFile(file, dst)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;message&quot;</span>: fmt.Sprintf(<span class=\"string\">&quot;%d files uploaded!&quot;</span>, <span class=\"built_in\">len</span>(files)),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>gin 重定向</b></li>\n</ul>\n<p>请求重定向:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;http://www.sogo.com&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>请求转发</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/a&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//跳转到b对应的路由函数</span></span><br><span class=\"line\">\tc.Request.URL.Path = <span class=\"string\">&quot;/b&quot;</span> <span class=\"comment\">//修改请求的URL地址</span></span><br><span class=\"line\">\tr.HandleContext(c) <span class=\"comment\">//继续后续的处理</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/b&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;b&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><b>gin 重定向</b></p>\n</li>\n<li><p><b>普通路由</b>:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.POST(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.PUT(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PUT&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">r.DELETE(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;delete&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此外，还有一个可以匹配所有请求方法的<code>Any</code>方法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//能够使用这一个函数处理/user的所有请求</span></span><br><span class=\"line\">r.Any(<span class=\"string\">&quot;/user&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> c.Request.Method &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PSOT&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> http.MethodPut:</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;PUT&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回<code>views/404.html</code>页面。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusNotFound, <span class=\"string\">&quot;views/404.html&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><b>路由组</b>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由组 多用于区分不同的业务线或者API版本</span></span><br><span class=\"line\"><span class=\"comment\">//把公共前缀提取出来组成一个路由组</span></span><br><span class=\"line\">videoGroup := r.Group(<span class=\"string\">&quot;/video&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/index&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/xx&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/xx&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tvideoGroup.GET(<span class=\"string\">&quot;/oo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;/video/oo&quot;</span>&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由组也是支持嵌套的，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tshopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\tshopGroup.GET(<span class=\"string\">&quot;/cart&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\tshopGroup.POST(<span class=\"string\">&quot;/checkout&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 嵌套路由组</span></span><br><span class=\"line\">\t\txx := shopGroup.Group(<span class=\"string\">&quot;xx&quot;</span>)</span><br><span class=\"line\">\t\txx.GET(<span class=\"string\">&quot;/oo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><b>gin 中间件</b>:</li>\n</ul>\n<p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p>\n<p><b>定义中间件</b></p>\n<p>Gin的中间件必须是<code>func(c *gin.Context)</code>类型 </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StatCost 是一个统计耗时请求耗时的中间件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StatCost</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;StatCost in&quot;</span>)</span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\tc.Set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;小王子&quot;</span>) <span class=\"comment\">// 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用该请求的剩余处理程序</span></span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 不调用该请求的剩余处理程序</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// c.Abort()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算耗时</span></span><br><span class=\"line\">\t\tcost := time.Since(start)</span><br><span class=\"line\">\t\tlog.Println(cost)</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;StatCost out&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中间件一般使用闭包来做，中间还可以加一些其他逻辑，以权限校验为例:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">authMiddleware</span><span class=\"params\">(doCheck <span class=\"type\">bool</span>)</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">\t<span class=\"comment\">//或者一些其它的准备工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> doCheck &#123; <span class=\"comment\">//doCheck相当于一个开关</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//是否登录的判断</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// if 是登录用户</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// c.Next()</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// else</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// c.Abort()</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc.Next()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><b>注册中间件</b></p>\n<p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p>\n<ul>\n<li>为全局路由注册中间件<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个没有任何默认中间件的路由</span></span><br><span class=\"line\">\tr := gin.New()</span><br><span class=\"line\">\t<span class=\"comment\">// 注册一个全局中间件</span></span><br><span class=\"line\">\tr.Use(StatCost)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/test&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tname := c.MustGet(<span class=\"string\">&quot;name&quot;</span>).(<span class=\"type\">string</span>) <span class=\"comment\">// 从上下文取值</span></span><br><span class=\"line\">\t\tlog.Println(name)</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>为某个路由单独注册中间件<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给/test2路由单独注册中间件（可注册多个）</span></span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/test2&quot;</span>, StatCost, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tname := c.MustGet(<span class=\"string\">&quot;name&quot;</span>).(<span class=\"type\">string</span>) <span class=\"comment\">// 从上下文取值</span></span><br><span class=\"line\">\tlog.Println(name)</span><br><span class=\"line\">\tc.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>为路由组注册中间件<br>为路由组注册中间件有以下两种写法:</li>\n</ul>\n<ol>\n<li>写法1:<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>, StatCost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写法2:<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shopGroup := r.Group(<span class=\"string\">&quot;/shop&quot;</span>)</span><br><span class=\"line\">shopGroup.Use(StatCost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    shopGroup.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><code>note:</code><br><b>gin默认中间件</b><br><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p>\n<p><code>Logger</code>中间件将日志写入gin.DefaultWriter，即使配置了<code>GIN_MODE=release</code><br><code>Recovery</code>中间件会recover任何panic。如果有panic的话，会写入500响应码。<br>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>\n"},{"title":"Golang操作kafka","_content":"# Kafka API\n\n## 生产者API\n\n* 安装`sarama`\n``` bash\n  go get -u github.com/Shopify/sarama\n```\n\n* 消息发送流程\n\t- Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中,涉及到了两个线程——main 线程和 Sender 线程,以及一个线程共享变量——RecordAccumulator。\n\t- main 线程将消息发送给 RecordAccumulator,Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。\n\n* 异步生产者\n\n`示例代码`\n\n``` go \npackage main\n\nimport (\n\t\"github.com/Shopify/sarama\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tproducer, err := sarama.NewAsyncProducerFromClient(client)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Trap SIGINT to trigger a graceful shutdown.\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\n\tvar (\n\t\twg        sync.WaitGroup\n\t\tenqueued, successes, errors int\n\t)\n\n\twg.Add(1)\n\t// start a groutines to count successes num\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor range producer.Successes() {\n\t\t\tsuccesses++\n\t\t}\n\t}()\n\n\twg.Add(1)\n\t// start a groutines to count error num\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor err := range producer.Errors() {\n\t\t\tlog.Println(err)\n\t\t\terrors++\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := &sarama.ProducerMessage{Topic: \"my-topic\", Value: sarama.StringEncoder(\"testing 123\")}\n\t\tselect {\n\t\tcase producer.Input() <- message:\n\t\t\tenqueued++\n\n\t\tcase <-signals:\n\t\t\tproducer.AsyncClose() // Trigger a shutdown of the producer.\n\t\t\tbreak \n\t\t}\n\t}\n\n\twg.Wait()\n\n\tlog.Printf(\"Successfully produced: %d; errors: %d\\n\", successes, errors)\n}\n```\n\n* 同步生产者\n\n` 示例代码`\n\n``` go\n// 连接Kafka发送消息\npackage main\n\nimport \"github.com/Shopify/sarama\"\nimport \"fmt\"\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll          // 发送完数据需要leader和follow都确认\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner // 新选出一个partition\n\tconfig.Producer.Return.Successes = true                   // 成功交付的消息将在success channel返回\n\n\t// 构造一个消息\n\tmsg := &sarama.ProducerMessage{}\n\tmsg.Topic = \"web_log\"\n\tmsg.Value = sarama.StringEncoder(\"this is a test log\")\n\t// 连接kafka\n\tclient, err := sarama.NewSyncProducer([]string{\"127.0.0.1:9092\"}, config)\n\tif err != nil {\n\t\tfmt.Println(\"producer closed, err:\", err)\n\t\treturn\n\t}\n\tdefer client.Close()\n\t// 发送消息\n\tpid, offset, err := client.SendMessage(msg)\n\tif err != nil {\n\t\tfmt.Println(\"send msg failed, err:\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"pid:%v offset:%v\\n\", pid, offset)\n}\n```\n\n\n## 消费者API\n\n* 消费者\n\n``` go\n// 连接kafka消费消息\npackage main\n\nimport (\n\t\"github.com/Shopify/sarama\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n)\n\nfunc main()  {\n\tconfig := sarama.NewConfig()\n\tconfig.Consumer.Return.Errors = true\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tconsumer, err := sarama.NewConsumerFromClient(client)\n\n\tdefer consumer.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// get partitionId list\n\tpartitions,err := consumer.Partitions(\"my-topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, partitionId := range partitions{\n\t\t// create partitionConsumer for every partitionId\n\t\tpartitionConsumer, err := consumer.ConsumePartition(\"my-topic\", partitionId, sarama.OffsetNewest)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tgo func(pc *sarama.PartitionConsumer) {\n\t\t\tdefer (*pc).Close()\n\t\t\t// block\n\t\t\tfor message := range (*pc).Messages(){\n\t\t\t\tvalue := string(message.Value)\n\t\t\t\tlog.Printf(\"Partitionid: %d; offset:%d, value: %s\\n\", message.Partition,message.Offset, value)\n\t\t\t}\n\n\t\t}(&partitionConsumer)\n\t}\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\tselect {\n\tcase <-signals:\n\n\t}\n}\n```\n\n* 消费者组\n\n``` go \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n)\ntype consumerGroupHandler struct{\n\tname string\n}\n\nfunc (consumerGroupHandler) Setup(_ sarama.ConsumerGroupSession) error   { return nil }\nfunc (consumerGroupHandler) Cleanup(_ sarama.ConsumerGroupSession) error { return nil }\nfunc (h consumerGroupHandler) ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {\n\tfor msg := range claim.Messages() {\n\t\tfmt.Printf(\"%s Message topic:%q partition:%d offset:%d  value:%s\\n\",h.name, msg.Topic, msg.Partition, msg.Offset, string(msg.Value))\n\t\t// 手动确认消息\n\t\tsess.MarkMessage(msg, \"\")\n\t}\n\treturn nil\n}\n\nfunc handleErrors(group *sarama.ConsumerGroup,wg  *sync.WaitGroup ){\n\twg.Done()\n\tfor err := range (*group).Errors() {\n\t\tfmt.Println(\"ERROR\", err)\n\t}\n}\n\nfunc consume(group *sarama.ConsumerGroup,wg  *sync.WaitGroup, name string) {\n\tfmt.Println(name + \"start\")\n\twg.Done()\n\tctx := context.Background()\n\tfor {\n\t\ttopics := []string{\"my_topic\"}\n\t\thandler := consumerGroupHandler{name: name}\n\t\terr := (*group).Consume(ctx, topics, handler)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n\nfunc main(){\n\tvar wg sync.WaitGroup\n\tconfig := sarama.NewConfig()\n\tconfig.Consumer.Return.Errors = false\n\tconfig.Version = sarama.V0_10_2_0\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgroup, err := sarama.NewConsumerGroupFromClient(\"c1\", client)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer group.Close()\n\twg.Add(3)\n\tgo consume(&group,&wg,\"c1\")\n\twg.Wait()\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\tselect {\n\tcase <-signals:\n\t}\n}\n```\n\n\t\t\n","source":"_posts/go/go_kafka.md","raw":"---\ntitle: Golang操作kafka \ncategories: \n- GolangStudy\n---\n# Kafka API\n\n## 生产者API\n\n* 安装`sarama`\n``` bash\n  go get -u github.com/Shopify/sarama\n```\n\n* 消息发送流程\n\t- Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中,涉及到了两个线程——main 线程和 Sender 线程,以及一个线程共享变量——RecordAccumulator。\n\t- main 线程将消息发送给 RecordAccumulator,Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。\n\n* 异步生产者\n\n`示例代码`\n\n``` go \npackage main\n\nimport (\n\t\"github.com/Shopify/sarama\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tproducer, err := sarama.NewAsyncProducerFromClient(client)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Trap SIGINT to trigger a graceful shutdown.\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\n\tvar (\n\t\twg        sync.WaitGroup\n\t\tenqueued, successes, errors int\n\t)\n\n\twg.Add(1)\n\t// start a groutines to count successes num\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor range producer.Successes() {\n\t\t\tsuccesses++\n\t\t}\n\t}()\n\n\twg.Add(1)\n\t// start a groutines to count error num\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor err := range producer.Errors() {\n\t\t\tlog.Println(err)\n\t\t\terrors++\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := &sarama.ProducerMessage{Topic: \"my-topic\", Value: sarama.StringEncoder(\"testing 123\")}\n\t\tselect {\n\t\tcase producer.Input() <- message:\n\t\t\tenqueued++\n\n\t\tcase <-signals:\n\t\t\tproducer.AsyncClose() // Trigger a shutdown of the producer.\n\t\t\tbreak \n\t\t}\n\t}\n\n\twg.Wait()\n\n\tlog.Printf(\"Successfully produced: %d; errors: %d\\n\", successes, errors)\n}\n```\n\n* 同步生产者\n\n` 示例代码`\n\n``` go\n// 连接Kafka发送消息\npackage main\n\nimport \"github.com/Shopify/sarama\"\nimport \"fmt\"\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll          // 发送完数据需要leader和follow都确认\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner // 新选出一个partition\n\tconfig.Producer.Return.Successes = true                   // 成功交付的消息将在success channel返回\n\n\t// 构造一个消息\n\tmsg := &sarama.ProducerMessage{}\n\tmsg.Topic = \"web_log\"\n\tmsg.Value = sarama.StringEncoder(\"this is a test log\")\n\t// 连接kafka\n\tclient, err := sarama.NewSyncProducer([]string{\"127.0.0.1:9092\"}, config)\n\tif err != nil {\n\t\tfmt.Println(\"producer closed, err:\", err)\n\t\treturn\n\t}\n\tdefer client.Close()\n\t// 发送消息\n\tpid, offset, err := client.SendMessage(msg)\n\tif err != nil {\n\t\tfmt.Println(\"send msg failed, err:\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"pid:%v offset:%v\\n\", pid, offset)\n}\n```\n\n\n## 消费者API\n\n* 消费者\n\n``` go\n// 连接kafka消费消息\npackage main\n\nimport (\n\t\"github.com/Shopify/sarama\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n)\n\nfunc main()  {\n\tconfig := sarama.NewConfig()\n\tconfig.Consumer.Return.Errors = true\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tconsumer, err := sarama.NewConsumerFromClient(client)\n\n\tdefer consumer.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// get partitionId list\n\tpartitions,err := consumer.Partitions(\"my-topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, partitionId := range partitions{\n\t\t// create partitionConsumer for every partitionId\n\t\tpartitionConsumer, err := consumer.ConsumePartition(\"my-topic\", partitionId, sarama.OffsetNewest)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tgo func(pc *sarama.PartitionConsumer) {\n\t\t\tdefer (*pc).Close()\n\t\t\t// block\n\t\t\tfor message := range (*pc).Messages(){\n\t\t\t\tvalue := string(message.Value)\n\t\t\t\tlog.Printf(\"Partitionid: %d; offset:%d, value: %s\\n\", message.Partition,message.Offset, value)\n\t\t\t}\n\n\t\t}(&partitionConsumer)\n\t}\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\tselect {\n\tcase <-signals:\n\n\t}\n}\n```\n\n* 消费者组\n\n``` go \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n)\ntype consumerGroupHandler struct{\n\tname string\n}\n\nfunc (consumerGroupHandler) Setup(_ sarama.ConsumerGroupSession) error   { return nil }\nfunc (consumerGroupHandler) Cleanup(_ sarama.ConsumerGroupSession) error { return nil }\nfunc (h consumerGroupHandler) ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {\n\tfor msg := range claim.Messages() {\n\t\tfmt.Printf(\"%s Message topic:%q partition:%d offset:%d  value:%s\\n\",h.name, msg.Topic, msg.Partition, msg.Offset, string(msg.Value))\n\t\t// 手动确认消息\n\t\tsess.MarkMessage(msg, \"\")\n\t}\n\treturn nil\n}\n\nfunc handleErrors(group *sarama.ConsumerGroup,wg  *sync.WaitGroup ){\n\twg.Done()\n\tfor err := range (*group).Errors() {\n\t\tfmt.Println(\"ERROR\", err)\n\t}\n}\n\nfunc consume(group *sarama.ConsumerGroup,wg  *sync.WaitGroup, name string) {\n\tfmt.Println(name + \"start\")\n\twg.Done()\n\tctx := context.Background()\n\tfor {\n\t\ttopics := []string{\"my_topic\"}\n\t\thandler := consumerGroupHandler{name: name}\n\t\terr := (*group).Consume(ctx, topics, handler)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n\nfunc main(){\n\tvar wg sync.WaitGroup\n\tconfig := sarama.NewConfig()\n\tconfig.Consumer.Return.Errors = false\n\tconfig.Version = sarama.V0_10_2_0\n\tclient,err := sarama.NewClient([]string{\"localhost:9092\"}, config)\n\tdefer client.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgroup, err := sarama.NewConsumerGroupFromClient(\"c1\", client)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer group.Close()\n\twg.Add(3)\n\tgo consume(&group,&wg,\"c1\")\n\twg.Wait()\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, os.Interrupt)\n\tselect {\n\tcase <-signals:\n\t}\n}\n```\n\n\t\t\n","slug":"go/go_kafka","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6ct0005f8wzakd609vx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Kafka-API\"><a href=\"#Kafka-API\" class=\"headerlink\" title=\"Kafka API\"></a>Kafka API</h1><h2 id=\"生产者API\"><a href=\"#生产者API\" class=\"headerlink\" title=\"生产者API\"></a>生产者API</h2><ul>\n<li><p>安装<code>sarama</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/Shopify/sarama</span><br></pre></td></tr></table></figure></li>\n<li><p>消息发送流程</p>\n<ul>\n<li>Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中,涉及到了两个线程——main 线程和 Sender 线程,以及一个线程共享变量——RecordAccumulator。</li>\n<li>main 线程将消息发送给 RecordAccumulator,Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。</li>\n</ul>\n</li>\n<li><p>异步生产者</p>\n</li>\n</ul>\n<p><code>示例代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfig.Producer.Return.Successes = <span class=\"literal\">true</span></span><br><span class=\"line\">\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tproducer, err := sarama.NewAsyncProducerFromClient(client)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trap SIGINT to trigger a graceful shutdown.</span></span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\twg        sync.WaitGroup</span><br><span class=\"line\">\t\tenqueued, successes, errors <span class=\"type\">int</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// start a groutines to count successes num</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">range</span> producer.Successes() &#123;</span><br><span class=\"line\">\t\t\tsuccesses++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// start a groutines to count error num</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> producer.Errors() &#123;</span><br><span class=\"line\">\t\t\tlog.Println(err)</span><br><span class=\"line\">\t\t\terrors++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmessage := &amp;sarama.ProducerMessage&#123;Topic: <span class=\"string\">&quot;my-topic&quot;</span>, Value: sarama.StringEncoder(<span class=\"string\">&quot;testing 123&quot;</span>)&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> producer.Input() &lt;- message:</span><br><span class=\"line\">\t\t\tenqueued++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">\t\t\tproducer.AsyncClose() <span class=\"comment\">// Trigger a shutdown of the producer.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Successfully produced: %d; errors: %d\\n&quot;</span>, successes, errors)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步生产者</li>\n</ul>\n<p><code> 示例代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接Kafka发送消息</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Producer.RequiredAcks = sarama.WaitForAll          <span class=\"comment\">// 发送完数据需要leader和follow都确认</span></span><br><span class=\"line\">\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner <span class=\"comment\">// 新选出一个partition</span></span><br><span class=\"line\">\tconfig.Producer.Return.Successes = <span class=\"literal\">true</span>                   <span class=\"comment\">// 成功交付的消息将在success channel返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构造一个消息</span></span><br><span class=\"line\">\tmsg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class=\"line\">\tmsg.Topic = <span class=\"string\">&quot;web_log&quot;</span></span><br><span class=\"line\">\tmsg.Value = sarama.StringEncoder(<span class=\"string\">&quot;this is a test log&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 连接kafka</span></span><br><span class=\"line\">\tclient, err := sarama.NewSyncProducer([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;producer closed, err:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">\tpid, offset, err := client.SendMessage(msg)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;send msg failed, err:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;pid:%v offset:%v\\n&quot;</span>, pid, offset)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"消费者API\"><a href=\"#消费者API\" class=\"headerlink\" title=\"消费者API\"></a>消费者API</h2><ul>\n<li>消费者</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接kafka消费消息</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Consumer.Return.Errors = <span class=\"literal\">true</span></span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsumer, err := sarama.NewConsumerFromClient(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> consumer.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// get partitionId list</span></span><br><span class=\"line\">\tpartitions,err := consumer.Partitions(<span class=\"string\">&quot;my-topic&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, partitionId := <span class=\"keyword\">range</span> partitions&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// create partitionConsumer for every partitionId</span></span><br><span class=\"line\">\t\tpartitionConsumer, err := consumer.ConsumePartition(<span class=\"string\">&quot;my-topic&quot;</span>, partitionId, sarama.OffsetNewest)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pc *sarama.PartitionConsumer)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> (*pc).Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// block</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> message := <span class=\"keyword\">range</span> (*pc).Messages()&#123;</span><br><span class=\"line\">\t\t\t\tvalue := <span class=\"type\">string</span>(message.Value)</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">&quot;Partitionid: %d; offset:%d, value: %s\\n&quot;</span>, message.Partition,message.Offset, value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;(&amp;partitionConsumer)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消费者组</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> consumerGroupHandler <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span></span> Setup(_ sarama.ConsumerGroupSession) <span class=\"type\">error</span>   &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span></span> Cleanup(_ sarama.ConsumerGroupSession) <span class=\"type\">error</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h consumerGroupHandler)</span></span> ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> claim.Messages() &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s Message topic:%q partition:%d offset:%d  value:%s\\n&quot;</span>,h.name, msg.Topic, msg.Partition, msg.Offset, <span class=\"type\">string</span>(msg.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 手动确认消息</span></span><br><span class=\"line\">\t\tsess.MarkMessage(msg, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleErrors</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup )</span></span>&#123;</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> (*group).Errors() &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;ERROR&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">consume</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup, name <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(name + <span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttopics := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;my_topic&quot;</span>&#125;</span><br><span class=\"line\">\t\thandler := consumerGroupHandler&#123;name: name&#125;</span><br><span class=\"line\">\t\terr := (*group).Consume(ctx, topics, handler)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Consumer.Return.Errors = <span class=\"literal\">false</span></span><br><span class=\"line\">\tconfig.Version = sarama.V0_10_2_0</span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgroup, err := sarama.NewConsumerGroupFromClient(<span class=\"string\">&quot;c1&quot;</span>, client)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> group.Close()</span><br><span class=\"line\">\twg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> consume(&amp;group,&amp;wg,<span class=\"string\">&quot;c1&quot;</span>)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kafka-API\"><a href=\"#Kafka-API\" class=\"headerlink\" title=\"Kafka API\"></a>Kafka API</h1><h2 id=\"生产者API\"><a href=\"#生产者API\" class=\"headerlink\" title=\"生产者API\"></a>生产者API</h2><ul>\n<li><p>安装<code>sarama</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/Shopify/sarama</span><br></pre></td></tr></table></figure></li>\n<li><p>消息发送流程</p>\n<ul>\n<li>Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中,涉及到了两个线程——main 线程和 Sender 线程,以及一个线程共享变量——RecordAccumulator。</li>\n<li>main 线程将消息发送给 RecordAccumulator,Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。</li>\n</ul>\n</li>\n<li><p>异步生产者</p>\n</li>\n</ul>\n<p><code>示例代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfig.Producer.Return.Successes = <span class=\"literal\">true</span></span><br><span class=\"line\">\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tproducer, err := sarama.NewAsyncProducerFromClient(client)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trap SIGINT to trigger a graceful shutdown.</span></span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\twg        sync.WaitGroup</span><br><span class=\"line\">\t\tenqueued, successes, errors <span class=\"type\">int</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// start a groutines to count successes num</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">range</span> producer.Successes() &#123;</span><br><span class=\"line\">\t\t\tsuccesses++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// start a groutines to count error num</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> producer.Errors() &#123;</span><br><span class=\"line\">\t\t\tlog.Println(err)</span><br><span class=\"line\">\t\t\terrors++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmessage := &amp;sarama.ProducerMessage&#123;Topic: <span class=\"string\">&quot;my-topic&quot;</span>, Value: sarama.StringEncoder(<span class=\"string\">&quot;testing 123&quot;</span>)&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> producer.Input() &lt;- message:</span><br><span class=\"line\">\t\t\tenqueued++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">\t\t\tproducer.AsyncClose() <span class=\"comment\">// Trigger a shutdown of the producer.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Successfully produced: %d; errors: %d\\n&quot;</span>, successes, errors)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步生产者</li>\n</ul>\n<p><code> 示例代码</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接Kafka发送消息</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Producer.RequiredAcks = sarama.WaitForAll          <span class=\"comment\">// 发送完数据需要leader和follow都确认</span></span><br><span class=\"line\">\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner <span class=\"comment\">// 新选出一个partition</span></span><br><span class=\"line\">\tconfig.Producer.Return.Successes = <span class=\"literal\">true</span>                   <span class=\"comment\">// 成功交付的消息将在success channel返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构造一个消息</span></span><br><span class=\"line\">\tmsg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class=\"line\">\tmsg.Topic = <span class=\"string\">&quot;web_log&quot;</span></span><br><span class=\"line\">\tmsg.Value = sarama.StringEncoder(<span class=\"string\">&quot;this is a test log&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 连接kafka</span></span><br><span class=\"line\">\tclient, err := sarama.NewSyncProducer([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;producer closed, err:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">\tpid, offset, err := client.SendMessage(msg)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;send msg failed, err:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;pid:%v offset:%v\\n&quot;</span>, pid, offset)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"消费者API\"><a href=\"#消费者API\" class=\"headerlink\" title=\"消费者API\"></a>消费者API</h2><ul>\n<li>消费者</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接kafka消费消息</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Consumer.Return.Errors = <span class=\"literal\">true</span></span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsumer, err := sarama.NewConsumerFromClient(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> consumer.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// get partitionId list</span></span><br><span class=\"line\">\tpartitions,err := consumer.Partitions(<span class=\"string\">&quot;my-topic&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, partitionId := <span class=\"keyword\">range</span> partitions&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// create partitionConsumer for every partitionId</span></span><br><span class=\"line\">\t\tpartitionConsumer, err := consumer.ConsumePartition(<span class=\"string\">&quot;my-topic&quot;</span>, partitionId, sarama.OffsetNewest)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pc *sarama.PartitionConsumer)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> (*pc).Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// block</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> message := <span class=\"keyword\">range</span> (*pc).Messages()&#123;</span><br><span class=\"line\">\t\t\t\tvalue := <span class=\"type\">string</span>(message.Value)</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">&quot;Partitionid: %d; offset:%d, value: %s\\n&quot;</span>, message.Partition,message.Offset, value)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;(&amp;partitionConsumer)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消费者组</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/signal&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> consumerGroupHandler <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span></span> Setup(_ sarama.ConsumerGroupSession) <span class=\"type\">error</span>   &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span></span> Cleanup(_ sarama.ConsumerGroupSession) <span class=\"type\">error</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h consumerGroupHandler)</span></span> ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> claim.Messages() &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s Message topic:%q partition:%d offset:%d  value:%s\\n&quot;</span>,h.name, msg.Topic, msg.Partition, msg.Offset, <span class=\"type\">string</span>(msg.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 手动确认消息</span></span><br><span class=\"line\">\t\tsess.MarkMessage(msg, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleErrors</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup )</span></span>&#123;</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> (*group).Errors() &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;ERROR&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">consume</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup, name <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(name + <span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttopics := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;my_topic&quot;</span>&#125;</span><br><span class=\"line\">\t\thandler := consumerGroupHandler&#123;name: name&#125;</span><br><span class=\"line\">\t\terr := (*group).Consume(ctx, topics, handler)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tconfig := sarama.NewConfig()</span><br><span class=\"line\">\tconfig.Consumer.Return.Errors = <span class=\"literal\">false</span></span><br><span class=\"line\">\tconfig.Version = sarama.V0_10_2_0</span><br><span class=\"line\">\tclient,err := sarama.NewClient([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgroup, err := sarama.NewConsumerGroupFromClient(<span class=\"string\">&quot;c1&quot;</span>, client)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> group.Close()</span><br><span class=\"line\">\twg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> consume(&amp;group,&amp;wg,<span class=\"string\">&quot;c1&quot;</span>)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tsignals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tsignal.Notify(signals, os.Interrupt)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"音视频-go_live","_content":"## go_live\n\n* 基础知识 \n\t- [结合go_live源码学习rtmp协议](https://zhuanlan.zhihu.com/p/447683475)\n\t- [rtmp协议]()\n\n","source":"_posts/go/go_live.md","raw":"---\ntitle: 音视频-go_live \ncategories: \n- GolangStudy\n---\n## go_live\n\n* 基础知识 \n\t- [结合go_live源码学习rtmp协议](https://zhuanlan.zhihu.com/p/447683475)\n\t- [rtmp协议]()\n\n","slug":"go/go_live","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6cu0006f8wzf1peaaq7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"go-live\"><a href=\"#go-live\" class=\"headerlink\" title=\"go_live\"></a>go_live</h2><ul>\n<li>基础知识 <ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/447683475\">结合go_live源码学习rtmp协议</a></li>\n<li><a href=\"\">rtmp协议</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"go-live\"><a href=\"#go-live\" class=\"headerlink\" title=\"go_live\"></a>go_live</h2><ul>\n<li>基础知识 <ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/447683475\">结合go_live源码学习rtmp协议</a></li>\n<li><a href=\"\">rtmp协议</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"im-goim","_content":"\n## goim架构\n\n![](../img/arch.png)\n\n## 环境搭建\n\n* 启动`kafka`\n\t- 首先启动`zookeeper`\n\t\t``` bash\n\t\tsudo bin/zookeeper-server-start.sh  config/zookeeper.properties\n\n\t\t# 后台启动zookeeper\n\t\tsudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties\n\t\t```\n\t- 再启动`kafka`\n\t\t``` bash\n\t\tsudo bin/kafka-server-start.sh config/server.properties\n\n\t\t# 后台启动kafka\n\t\tsudo bin/kafka-server-start.sh -daemon config/server.properties\n\t\t```\n\n* 编译goim\n\t``` bash\n\tgit clone https://github.com/Terry-Mao/goim\n\tcd goim \n\tmake build\n\t# make build 之后即可在target文件加中找到可执行文件\n\t```\n\n* 编译`discovery`\n\t``` bash\n\tgit clone https://github.com/bilibili/discovery.git\n\tcd discovery\n\t# make build 之前需要修改Makefile文件 将文件中的cmd/discovery/discovery-example.toml改为cmd/discovery/discovery.toml\n\tmake build\n\t```\n\n* 启动`discovery`\n\t``` bash\n\tcd discovery\n\t./dist/bin/discovery -conf ./dist/conf/discovery.toml\n\t```\n\n* 启动`comet`\n\t``` bash\n\t# 设置环境变量\n\texport REGION=sh\n    export ZONE=sh001\n    export DEPLOY_ENV=dev\n\n\t# 前台运行\n\ttarget/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 \n\n\t# 后台运行\n\tnohup target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 -debug=true 2>&1 > target/comet.log &\n\t```\n\n* 启动`logic`\n\t``` bash\n\t# 前台运行\n\ttarget/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10\n\n\t# 后台运行\n\tnohup target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 2>&1 > target/logic.log &\n\t```\n\n* 启动`job`\n\t``` bash\n\t# 前台运行\n\ttarget/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev\n\n\t# 后台运行\n\tnohup target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev 2>&1 > target/job.log &\n\t```\n\n* 直接启动`logic`，`comet`,`job`\n\t``` bash\n\tmake run\n\t```\n\n","source":"_posts/go/go_im.md","raw":"---\ntitle: im-goim \ncategories: \n- GolangStudy\n---\n\n## goim架构\n\n![](../img/arch.png)\n\n## 环境搭建\n\n* 启动`kafka`\n\t- 首先启动`zookeeper`\n\t\t``` bash\n\t\tsudo bin/zookeeper-server-start.sh  config/zookeeper.properties\n\n\t\t# 后台启动zookeeper\n\t\tsudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties\n\t\t```\n\t- 再启动`kafka`\n\t\t``` bash\n\t\tsudo bin/kafka-server-start.sh config/server.properties\n\n\t\t# 后台启动kafka\n\t\tsudo bin/kafka-server-start.sh -daemon config/server.properties\n\t\t```\n\n* 编译goim\n\t``` bash\n\tgit clone https://github.com/Terry-Mao/goim\n\tcd goim \n\tmake build\n\t# make build 之后即可在target文件加中找到可执行文件\n\t```\n\n* 编译`discovery`\n\t``` bash\n\tgit clone https://github.com/bilibili/discovery.git\n\tcd discovery\n\t# make build 之前需要修改Makefile文件 将文件中的cmd/discovery/discovery-example.toml改为cmd/discovery/discovery.toml\n\tmake build\n\t```\n\n* 启动`discovery`\n\t``` bash\n\tcd discovery\n\t./dist/bin/discovery -conf ./dist/conf/discovery.toml\n\t```\n\n* 启动`comet`\n\t``` bash\n\t# 设置环境变量\n\texport REGION=sh\n    export ZONE=sh001\n    export DEPLOY_ENV=dev\n\n\t# 前台运行\n\ttarget/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 \n\n\t# 后台运行\n\tnohup target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 -debug=true 2>&1 > target/comet.log &\n\t```\n\n* 启动`logic`\n\t``` bash\n\t# 前台运行\n\ttarget/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10\n\n\t# 后台运行\n\tnohup target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 2>&1 > target/logic.log &\n\t```\n\n* 启动`job`\n\t``` bash\n\t# 前台运行\n\ttarget/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev\n\n\t# 后台运行\n\tnohup target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev 2>&1 > target/job.log &\n\t```\n\n* 直接启动`logic`，`comet`,`job`\n\t``` bash\n\tmake run\n\t```\n\n","slug":"go/go_im","published":1,"date":"2022-07-08T02:16:25.023Z","updated":"2022-07-08T02:16:25.023Z","_id":"cl3tkt6cw0007f8wz1p7406ey","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"goim架构\"><a href=\"#goim架构\" class=\"headerlink\" title=\"goim架构\"></a>goim架构</h2><p><img src=\"../img/arch.png\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ul>\n<li><p>启动<code>kafka</code></p>\n<ul>\n<li>首先启动<code>zookeeper</code>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/zookeeper-server-start.sh  config/zookeeper.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动zookeeper</span></span><br><span class=\"line\">sudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties</span><br></pre></td></tr></table></figure></li>\n<li>再启动<code>kafka</code>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/kafka-server-start.sh config/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动kafka</span></span><br><span class=\"line\">sudo bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>编译goim</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Terry-Mao/goim</span><br><span class=\"line\"><span class=\"built_in\">cd</span> goim </span><br><span class=\"line\">make build</span><br><span class=\"line\"><span class=\"comment\"># make build 之后即可在target文件加中找到可执行文件</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编译<code>discovery</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/bilibili/discovery.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> discovery</span><br><span class=\"line\"><span class=\"comment\"># make build 之前需要修改Makefile文件 将文件中的cmd/discovery/discovery-example.toml改为cmd/discovery/discovery.toml</span></span><br><span class=\"line\">make build</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>discovery</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> discovery</span><br><span class=\"line\">./dist/bin/discovery -conf ./dist/conf/discovery.toml</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>comet</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> REGION=sh</span><br><span class=\"line\">   <span class=\"built_in\">export</span> ZONE=sh001</span><br><span class=\"line\">   <span class=\"built_in\">export</span> DEPLOY_ENV=dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 -debug=<span class=\"literal\">true</span> 2&gt;&amp;1 &gt; target/comet.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>logic</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 2&gt;&amp;1 &gt; target/logic.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>job</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev 2&gt;&amp;1 &gt; target/job.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>直接启动<code>logic</code>，<code>comet</code>,<code>job</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make run</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"goim架构\"><a href=\"#goim架构\" class=\"headerlink\" title=\"goim架构\"></a>goim架构</h2><p><img src=\"../img/arch.png\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ul>\n<li><p>启动<code>kafka</code></p>\n<ul>\n<li>首先启动<code>zookeeper</code>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/zookeeper-server-start.sh  config/zookeeper.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动zookeeper</span></span><br><span class=\"line\">sudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties</span><br></pre></td></tr></table></figure></li>\n<li>再启动<code>kafka</code>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/kafka-server-start.sh config/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动kafka</span></span><br><span class=\"line\">sudo bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>编译goim</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Terry-Mao/goim</span><br><span class=\"line\"><span class=\"built_in\">cd</span> goim </span><br><span class=\"line\">make build</span><br><span class=\"line\"><span class=\"comment\"># make build 之后即可在target文件加中找到可执行文件</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编译<code>discovery</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/bilibili/discovery.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> discovery</span><br><span class=\"line\"><span class=\"comment\"># make build 之前需要修改Makefile文件 将文件中的cmd/discovery/discovery-example.toml改为cmd/discovery/discovery.toml</span></span><br><span class=\"line\">make build</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>discovery</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> discovery</span><br><span class=\"line\">./dist/bin/discovery -conf ./dist/conf/discovery.toml</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>comet</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> REGION=sh</span><br><span class=\"line\">   <span class=\"built_in\">export</span> ZONE=sh001</span><br><span class=\"line\">   <span class=\"built_in\">export</span> DEPLOY_ENV=dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/comet -conf=target/comet.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 -addrs=127.0.0.1 -debug=<span class=\"literal\">true</span> 2&gt;&amp;1 &gt; target/comet.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>logic</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/logic -conf=target/logic.toml -region=sh -zone=sh001 -deploy.env=dev -weight=10 2&gt;&amp;1 &gt; target/logic.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动<code>job</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前台运行</span></span><br><span class=\"line\">target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> target/job -conf=target/job.toml -region=sh -zone=sh001 -deploy.env=dev 2&gt;&amp;1 &gt; target/job.log &amp;</span><br></pre></td></tr></table></figure></li>\n<li><p>直接启动<code>logic</code>，<code>comet</code>,<code>job</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make run</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Golang 操作redis","_content":"\n## 安装`go-redis`\n\n``` bash\ngo get github.com/go-redis/redis/v8\n```\n\n## 连接redis\n\n\n\n","source":"_posts/go/go_redis.md","raw":"---\ntitle: Golang 操作redis \ncategories: \n- GolangStudy\n---\n\n## 安装`go-redis`\n\n``` bash\ngo get github.com/go-redis/redis/v8\n```\n\n## 连接redis\n\n\n\n","slug":"go/go_redis","published":1,"date":"2022-07-03T02:30:48.106Z","updated":"2022-07-03T02:30:48.106Z","_id":"cl3tkt6cy0008f8wz0t3ihje3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装go-redis\"><a href=\"#安装go-redis\" class=\"headerlink\" title=\"安装go-redis\"></a>安装<code>go-redis</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/go-redis/redis/v8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接redis\"><a href=\"#连接redis\" class=\"headerlink\" title=\"连接redis\"></a>连接redis</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装go-redis\"><a href=\"#安装go-redis\" class=\"headerlink\" title=\"安装go-redis\"></a>安装<code>go-redis</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/go-redis/redis/v8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接redis\"><a href=\"#连接redis\" class=\"headerlink\" title=\"连接redis\"></a>连接redis</h2>"},{"title":"Golang rpc框架","_content":"\n## 基本概念\n\n* 注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：`zookeeper`，`eureka`，`consul`，`etcd` 等开源框架实现。 \n\n* 服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。\n\n* 服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）\n\n## rpcx\n\n* [rpcx技术文档](https://doc.rpcx.io/)\n\n* 安装`rpcx`\n\n``` bash\ngo get -u -v -tags \"reuseport quic kcp zookeeper etcd consul ping\" github.com/smallnest/rpcx/...\n```\n\n`服务端代码:`\n\n`server/server.go`\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/smallnest/rpcx/server\"\n\t\"github.com/smallnest/rpcx/serverplugin\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr      = flag.String(\"addr\", \"localhost:8972\", \"server address\")\n\tetcdServers = []string{\"127.0.0.1:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t//1、new一个服务struct\n\ts := server.NewServer()\n\t//2、连接注册中心（这里是zookeeper）\n\taddRegistryPlugin(s)\n\t//3、服务注册\n\ts.RegisterName(\"Arith\", new(Arith), \"\")\n\t//4、启动服务监听\n\ts.Serve(\"tcp\", *addr)\n}\n\nfunc addRegistryPlugin(s *server.Server) {\n\tr := &serverplugin.EtcdV3RegisterPlugin{\n\t\tServiceAddress: \"tcp@\" + *addr,\n\t\tEtcdServers:   etcdServers,\n\t\tBasePath:       basePath,\n\t\tUpdateInterval: time.Minute,\n\t}\n\terr := r.Start()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts.Plugins.Add(r)\n}\n```\n\n`server/rpc.go`\n\n``` go\npackage main \n\n// 定义服务\ntype Arith int\n\nfunc (t *Arith) Mul(cxt context.Context, args *Args, reply *int) error {\n  fmt.Println(\"Mul on\", *addr)\n  *reply = args.A * args.B\n  return nil\n}\n\nfunc (t *Arith) Div(cxt context.Context, args *Args, quo *Quotient) error {\n  fmt.Println(\"Div on\", *addr)\n  if args.B == 0 {\n    return errors.New(\"divide by 0\")\n  }\n\n  quo.Quo = args.A / args.B\n  quo.Rem = args.A % args.B\n  return nil\n}\n```\n\n公共代码`proto/proto.go`\n\n``` go\npackage proto\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\n```\n\n* 初始化server\n* 连接注册中心\n* 注册服务\n* 启动监听服务\n\n\n`客户端代码`\n\n`client.go`\n\n``` go\npackage main\n\nimport (\n\t\"github.com/smallnest/rpcx/client\"\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"exercise/rpcx_test/proto\"\n)\nvar (\n\tetcdServers = []string{\"localhost:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main()  {\n\tflag.Parse()\n\n\t//1、启动一个ZookeeperDiscovery实例\n\td := client.NewEtcdV3Discovery(basePath,\"Arith\", etcdServers, nil)\n\t//2、启动一个客户端\n\txclient := client.NewXClient(\"Arith\", client.Failtry, client.RandomSelect, d, client.DefaultOption)\n\n\tdefer xclient.Close()\n\n\targs := &proto.Args{\n\t\tA: 25,\n\t\tB: 4,\n\t}\n\n\tquo := &proto.Quotient{}\n\n\tfor {\n\t\treply := new(int)\n\n\t\terr := xclient.Call(context.Background(), \"Mul\", args, reply)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\n\t\tlog.Printf(\"%d * %d = %d\", args.A, args.B, *reply)\n\n\t\terr = xclient.Call(context.Background(), \"Div\", args, quo)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\t\tlog.Printf(\"%d / %d = %d, 余数为%d\", args.A, args.B, quo.Quo, quo.Rem)\n\t\ttime.Sleep(3*time.Second)\n\t}\n}\n\n```\n\n* 服务发现\n\n服务发现主要涵盖两个方面：\n\t- 客户端获取服务元数据\n\t- 自动剔除失效的服务\n\n* 启动服务发现实例\n* 启动客户端\n\n\n## protobuf环境搭建\n\n* 安装protobuf编译工具\n``` bash\n# 下载protobuf\ngit clone https://github.com/protocolbuffers/protobuf.git\n# 安装依赖库\nsudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y\n# 进入目录\ncd protobuf/\n# 自动生成configure配置文件：\n./autogen.sh\n# 配置环境：\n./configure\n# 编译源代码(要有耐心！)：\nmake\n# 安装\nsudo make install\n# 刷新共享库 （很重要的一步啊）\nsudo ldconfig\n# 成功后需要使用命令测试\nprotoc -h\n```\n\n* 安装go 插件\n``` bash\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u google.golang.org/protobuf/proto\n```\n\n## protobuf使用步骤\n\n* 书写.proto文件\n\n\t`pb/Person.proto: `\n\n\t``` protobuf\n\tsyntax = \"proto3\";\n\tpackage pb;\n\n\timport \"google/protobuf/timestamp.proto\";\n\n\toption go_package = \"./;pb\";\n\n\tmessage Person {\n\t\tstring name = 1;\n\t\tint32 id = 2;  // Unique ID number for this person.\n\t\tstring email = 3;\n\n\t\tenum PhoneType {\n\t\t  MOBILE = 0;\n\t\t  HOME = 1;\n\t\t  WORK = 2;\n\t\t}\n\n\t\tmessage PhoneNumber {\n\t\t  string number = 1;\n\t\t  PhoneType type = 2;\n\t\t}\n\n\t\trepeated PhoneNumber phones = 4;\n\n\t\tgoogle.protobuf.Timestamp last_updated = 5;\n\t  }\n\n\t  // Our address book file is just one of these.\n\t  message AddressBook {\n\t\trepeated Person people = 1;\n\t}\n\t```\n\n* 编译.proto文件\n``` bash\nprotoc *.proto --go_out=.\n```\n\n* 使用\n\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"zinx/myDemo/protobufDemo/pb\"\n\n\t\t\"google.golang.org/protobuf/proto\"\n\t)\n\n\tfunc main() {\n\t\t// 定义一个Person结构体对象\n\t\tperson := &pb.Person{\n\t\t\tName:  \"lijiahao\",\n\t\t\tId:    0,\n\t\t\tEmail: \"18702748294@163.com\",\n\t\t\tPhones: []*pb.Person_PhoneNumber{\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"15136588270\",\n\t\t\t\t\tType: pb.Person_MOBILE,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"190019393\",\n\t\t\t\t\tType: pb.Person_HOME,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"17182920303\",\n\t\t\t\t\tType: pb.Person_WORK,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// 将Person对象进行序列化\n\t\tdata, err := proto.Marshal(person)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"proto marshal error: \", err)\n\t\t}\n\n\t\t// 反序列化\n\t\tnewData := &pb.Person{}\n\t\terr = proto.Unmarshal(data, newData)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unmarshal error: \", err)\n\t\t}\n\t\tfmt.Println(newData)\n\t}\n\t```\n\n## grpc 使用步骤\n\n* 安装grpc go插件\n```\ngo get -u -v google.golang.org/grpc\n```\n\n* 编写.proto文件\n\n\t`pb/hello_grpc.proto`\n\n\t``` protobuf\n\t// 指定protobuf版本号\n\tsyntax = \"proto3\";\n\n\tpackage pb;\n\n\toption go_package = \"./;hello_grpc\";\n\n\t// 定义服务\n\tservice Greeter {\n\t  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\t}\n\n\tmessage HelloRequest {\n\t  string name = 1;\n\t}\n\n\tmessage HelloReply {\n\t  string message = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t- 安装go语言插件\n\t\t``` bash\n\t\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\t\t```\n\t- 编译.proto文件\n\t\t``` bash\n\t\tprotoc -I pb/ pb/*.proto --go_out=plugins=grpc:service\n\t\t* -I 后面指定proto文件存放目录，和proto文件\n\t\t* --go_out=plugins=grpc:后面指定生成go代码存放的目录\n\t\t```\n\n\n* 编写服务端代码\n\t`server/server.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"hello_grpc/service\"\n\t\t\"google.golang.org/grpc\"\n\t\t\"google.golang.org/grpc/reflection\"\n\t\t\"net\"\n\t)\n\n\ttype server struct {}\n\n\t// 给对象绑定方法，实现接口\n\tfunc (s *server) SayHello(ctx context.Context, in *service.HelloRequest) (*service.HelloReply, error) {\n\t\treturn &service.HelloReply{Message: \"hello \" + in.Name}, nil\n\t}\n\n\tfunc main() {\n\t\t// 监听本地端口\n\t\tlis, err := net.Listen(\"tcp\", \":8080\")\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"监听端口失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// 创建gRPC服务器\n\t\ts := grpc.NewServer()\n\n\t\t// 注册服务\n\t\tservice.RegisterGreeterServer(s, &server{})\n\n\t\treflection.Register(s)\n\n\t\t// 开启服务\n\t\terr = s.Serve(lis)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"开启服务失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t}\n\t```\n\n* 编写客户端代码\n\t`client/client.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"hello_grpc/service\"\n\t\t\"google.golang.org/grpc\"\n\t)\n\n\tfunc main(){\n\t\t// 连接服务器\n\t\tconn, err := grpc.Dial(\":8080\", grpc.WithInsecure())\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"连接服务端失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t// 新建一个客户端\n\t\tc := service.NewGreeterClient(conn)\n\n\t\t// 调用服务端函数\n\t\tr, err := c.SayHello(context.Background(), &service.HelloRequest{Name: \"horika\"})\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"调用服务端代码失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(\"调用成功: %s\", r.Message)\n\t}\n\n\t```\n\n## RPC封装\n* 服务端使用步骤\n\t- 注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)\n\t``` go\n\trpc.RegisterName(\"服务名\", 回调对象)\n\t```\n\n\t- 创建监听器\n\t``` go\n\tlistener, err := net.Listen()\n\t```\n\n\t- 建立连接\n\t``` go\n\tconn, err := listener.Accept()\n\t```\n\n\t- 给连接绑定Rpc服务\n\t``` go\n\trpc.ServeConn(conn)\n\t```\n\n* 客户端使用步骤\n\t- 使用Rpc连接服务器\n\t``` go\n\tconn, err := rpc.Dial()\n\t```\n\n\t- 调用远程函数\n\t``` go\n\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t```\n\n* 客户端和服务端封装\n\t``` go\n\tpackage design\n\n\timport (\n\t\t\"net/rpc\"\n\t\t\"net/rpc/jsonrpc\"\n\t)\n\n\t// 服务端封装\n\t/*\n\t\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法\n\t\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数\n\t*/\n\ttype MyInterface interface {\n\t\tHelloWorld(string, *string) error\n\t}\n\n\tfunc RegisterService(i MyInterface) error {\n\t\treturn rpc.RegisterName(\"hello\", i)\n\t}\n\n\t// 客户端封装\n\t/*\n\t\t* 封装连接远程服务器和调用远程函数过程\n\t\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法\n\t\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程\n\t*/\n\ttype MyClient struct {\n\t\tc *rpc.Client\n\t}\n\n\tfunc InitClient(addr string) *MyClient {\n\t\tconn, _ := jsonrpc.Dial(\"tcp\", addr)\n\n\t\treturn &MyClient{c:conn}\n\t}\n\n\tfunc (m *MyClient)HelloWorld(a string, b *string) error {\n\t\treturn m.c.Call(\"hello.HelloWorld\", a, b)\n\t}\n\t```\n\n","source":"_posts/go/go_rpc.md","raw":"---\ntitle: Golang rpc框架 \ncategories: \n- GolangStudy\n---\n\n## 基本概念\n\n* 注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：`zookeeper`，`eureka`，`consul`，`etcd` 等开源框架实现。 \n\n* 服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。\n\n* 服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）\n\n## rpcx\n\n* [rpcx技术文档](https://doc.rpcx.io/)\n\n* 安装`rpcx`\n\n``` bash\ngo get -u -v -tags \"reuseport quic kcp zookeeper etcd consul ping\" github.com/smallnest/rpcx/...\n```\n\n`服务端代码:`\n\n`server/server.go`\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/smallnest/rpcx/server\"\n\t\"github.com/smallnest/rpcx/serverplugin\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr      = flag.String(\"addr\", \"localhost:8972\", \"server address\")\n\tetcdServers = []string{\"127.0.0.1:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t//1、new一个服务struct\n\ts := server.NewServer()\n\t//2、连接注册中心（这里是zookeeper）\n\taddRegistryPlugin(s)\n\t//3、服务注册\n\ts.RegisterName(\"Arith\", new(Arith), \"\")\n\t//4、启动服务监听\n\ts.Serve(\"tcp\", *addr)\n}\n\nfunc addRegistryPlugin(s *server.Server) {\n\tr := &serverplugin.EtcdV3RegisterPlugin{\n\t\tServiceAddress: \"tcp@\" + *addr,\n\t\tEtcdServers:   etcdServers,\n\t\tBasePath:       basePath,\n\t\tUpdateInterval: time.Minute,\n\t}\n\terr := r.Start()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts.Plugins.Add(r)\n}\n```\n\n`server/rpc.go`\n\n``` go\npackage main \n\n// 定义服务\ntype Arith int\n\nfunc (t *Arith) Mul(cxt context.Context, args *Args, reply *int) error {\n  fmt.Println(\"Mul on\", *addr)\n  *reply = args.A * args.B\n  return nil\n}\n\nfunc (t *Arith) Div(cxt context.Context, args *Args, quo *Quotient) error {\n  fmt.Println(\"Div on\", *addr)\n  if args.B == 0 {\n    return errors.New(\"divide by 0\")\n  }\n\n  quo.Quo = args.A / args.B\n  quo.Rem = args.A % args.B\n  return nil\n}\n```\n\n公共代码`proto/proto.go`\n\n``` go\npackage proto\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\n```\n\n* 初始化server\n* 连接注册中心\n* 注册服务\n* 启动监听服务\n\n\n`客户端代码`\n\n`client.go`\n\n``` go\npackage main\n\nimport (\n\t\"github.com/smallnest/rpcx/client\"\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"exercise/rpcx_test/proto\"\n)\nvar (\n\tetcdServers = []string{\"localhost:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main()  {\n\tflag.Parse()\n\n\t//1、启动一个ZookeeperDiscovery实例\n\td := client.NewEtcdV3Discovery(basePath,\"Arith\", etcdServers, nil)\n\t//2、启动一个客户端\n\txclient := client.NewXClient(\"Arith\", client.Failtry, client.RandomSelect, d, client.DefaultOption)\n\n\tdefer xclient.Close()\n\n\targs := &proto.Args{\n\t\tA: 25,\n\t\tB: 4,\n\t}\n\n\tquo := &proto.Quotient{}\n\n\tfor {\n\t\treply := new(int)\n\n\t\terr := xclient.Call(context.Background(), \"Mul\", args, reply)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\n\t\tlog.Printf(\"%d * %d = %d\", args.A, args.B, *reply)\n\n\t\terr = xclient.Call(context.Background(), \"Div\", args, quo)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\t\tlog.Printf(\"%d / %d = %d, 余数为%d\", args.A, args.B, quo.Quo, quo.Rem)\n\t\ttime.Sleep(3*time.Second)\n\t}\n}\n\n```\n\n* 服务发现\n\n服务发现主要涵盖两个方面：\n\t- 客户端获取服务元数据\n\t- 自动剔除失效的服务\n\n* 启动服务发现实例\n* 启动客户端\n\n\n## protobuf环境搭建\n\n* 安装protobuf编译工具\n``` bash\n# 下载protobuf\ngit clone https://github.com/protocolbuffers/protobuf.git\n# 安装依赖库\nsudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y\n# 进入目录\ncd protobuf/\n# 自动生成configure配置文件：\n./autogen.sh\n# 配置环境：\n./configure\n# 编译源代码(要有耐心！)：\nmake\n# 安装\nsudo make install\n# 刷新共享库 （很重要的一步啊）\nsudo ldconfig\n# 成功后需要使用命令测试\nprotoc -h\n```\n\n* 安装go 插件\n``` bash\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u google.golang.org/protobuf/proto\n```\n\n## protobuf使用步骤\n\n* 书写.proto文件\n\n\t`pb/Person.proto: `\n\n\t``` protobuf\n\tsyntax = \"proto3\";\n\tpackage pb;\n\n\timport \"google/protobuf/timestamp.proto\";\n\n\toption go_package = \"./;pb\";\n\n\tmessage Person {\n\t\tstring name = 1;\n\t\tint32 id = 2;  // Unique ID number for this person.\n\t\tstring email = 3;\n\n\t\tenum PhoneType {\n\t\t  MOBILE = 0;\n\t\t  HOME = 1;\n\t\t  WORK = 2;\n\t\t}\n\n\t\tmessage PhoneNumber {\n\t\t  string number = 1;\n\t\t  PhoneType type = 2;\n\t\t}\n\n\t\trepeated PhoneNumber phones = 4;\n\n\t\tgoogle.protobuf.Timestamp last_updated = 5;\n\t  }\n\n\t  // Our address book file is just one of these.\n\t  message AddressBook {\n\t\trepeated Person people = 1;\n\t}\n\t```\n\n* 编译.proto文件\n``` bash\nprotoc *.proto --go_out=.\n```\n\n* 使用\n\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"fmt\"\n\t\t\"zinx/myDemo/protobufDemo/pb\"\n\n\t\t\"google.golang.org/protobuf/proto\"\n\t)\n\n\tfunc main() {\n\t\t// 定义一个Person结构体对象\n\t\tperson := &pb.Person{\n\t\t\tName:  \"lijiahao\",\n\t\t\tId:    0,\n\t\t\tEmail: \"18702748294@163.com\",\n\t\t\tPhones: []*pb.Person_PhoneNumber{\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"15136588270\",\n\t\t\t\t\tType: pb.Person_MOBILE,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"190019393\",\n\t\t\t\t\tType: pb.Person_HOME,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"17182920303\",\n\t\t\t\t\tType: pb.Person_WORK,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// 将Person对象进行序列化\n\t\tdata, err := proto.Marshal(person)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"proto marshal error: \", err)\n\t\t}\n\n\t\t// 反序列化\n\t\tnewData := &pb.Person{}\n\t\terr = proto.Unmarshal(data, newData)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unmarshal error: \", err)\n\t\t}\n\t\tfmt.Println(newData)\n\t}\n\t```\n\n## grpc 使用步骤\n\n* 安装grpc go插件\n```\ngo get -u -v google.golang.org/grpc\n```\n\n* 编写.proto文件\n\n\t`pb/hello_grpc.proto`\n\n\t``` protobuf\n\t// 指定protobuf版本号\n\tsyntax = \"proto3\";\n\n\tpackage pb;\n\n\toption go_package = \"./;hello_grpc\";\n\n\t// 定义服务\n\tservice Greeter {\n\t  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\t}\n\n\tmessage HelloRequest {\n\t  string name = 1;\n\t}\n\n\tmessage HelloReply {\n\t  string message = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t- 安装go语言插件\n\t\t``` bash\n\t\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\t\t```\n\t- 编译.proto文件\n\t\t``` bash\n\t\tprotoc -I pb/ pb/*.proto --go_out=plugins=grpc:service\n\t\t* -I 后面指定proto文件存放目录，和proto文件\n\t\t* --go_out=plugins=grpc:后面指定生成go代码存放的目录\n\t\t```\n\n\n* 编写服务端代码\n\t`server/server.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"hello_grpc/service\"\n\t\t\"google.golang.org/grpc\"\n\t\t\"google.golang.org/grpc/reflection\"\n\t\t\"net\"\n\t)\n\n\ttype server struct {}\n\n\t// 给对象绑定方法，实现接口\n\tfunc (s *server) SayHello(ctx context.Context, in *service.HelloRequest) (*service.HelloReply, error) {\n\t\treturn &service.HelloReply{Message: \"hello \" + in.Name}, nil\n\t}\n\n\tfunc main() {\n\t\t// 监听本地端口\n\t\tlis, err := net.Listen(\"tcp\", \":8080\")\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"监听端口失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// 创建gRPC服务器\n\t\ts := grpc.NewServer()\n\n\t\t// 注册服务\n\t\tservice.RegisterGreeterServer(s, &server{})\n\n\t\treflection.Register(s)\n\n\t\t// 开启服务\n\t\terr = s.Serve(lis)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"开启服务失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t}\n\t```\n\n* 编写客户端代码\n\t`client/client.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"hello_grpc/service\"\n\t\t\"google.golang.org/grpc\"\n\t)\n\n\tfunc main(){\n\t\t// 连接服务器\n\t\tconn, err := grpc.Dial(\":8080\", grpc.WithInsecure())\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"连接服务端失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t// 新建一个客户端\n\t\tc := service.NewGreeterClient(conn)\n\n\t\t// 调用服务端函数\n\t\tr, err := c.SayHello(context.Background(), &service.HelloRequest{Name: \"horika\"})\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"调用服务端代码失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(\"调用成功: %s\", r.Message)\n\t}\n\n\t```\n\n## RPC封装\n* 服务端使用步骤\n\t- 注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)\n\t``` go\n\trpc.RegisterName(\"服务名\", 回调对象)\n\t```\n\n\t- 创建监听器\n\t``` go\n\tlistener, err := net.Listen()\n\t```\n\n\t- 建立连接\n\t``` go\n\tconn, err := listener.Accept()\n\t```\n\n\t- 给连接绑定Rpc服务\n\t``` go\n\trpc.ServeConn(conn)\n\t```\n\n* 客户端使用步骤\n\t- 使用Rpc连接服务器\n\t``` go\n\tconn, err := rpc.Dial()\n\t```\n\n\t- 调用远程函数\n\t``` go\n\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t```\n\n* 客户端和服务端封装\n\t``` go\n\tpackage design\n\n\timport (\n\t\t\"net/rpc\"\n\t\t\"net/rpc/jsonrpc\"\n\t)\n\n\t// 服务端封装\n\t/*\n\t\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法\n\t\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数\n\t*/\n\ttype MyInterface interface {\n\t\tHelloWorld(string, *string) error\n\t}\n\n\tfunc RegisterService(i MyInterface) error {\n\t\treturn rpc.RegisterName(\"hello\", i)\n\t}\n\n\t// 客户端封装\n\t/*\n\t\t* 封装连接远程服务器和调用远程函数过程\n\t\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法\n\t\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程\n\t*/\n\ttype MyClient struct {\n\t\tc *rpc.Client\n\t}\n\n\tfunc InitClient(addr string) *MyClient {\n\t\tconn, _ := jsonrpc.Dial(\"tcp\", addr)\n\n\t\treturn &MyClient{c:conn}\n\t}\n\n\tfunc (m *MyClient)HelloWorld(a string, b *string) error {\n\t\treturn m.c.Call(\"hello.HelloWorld\", a, b)\n\t}\n\t```\n\n","slug":"go/go_rpc","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6cz0009f8wz7fk3cy63","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p>注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：<code>zookeeper</code>，<code>eureka</code>，<code>consul</code>，<code>etcd</code> 等开源框架实现。 </p>\n</li>\n<li><p>服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。</p>\n</li>\n<li><p>服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）</p>\n</li>\n</ul>\n<h2 id=\"rpcx\"><a href=\"#rpcx\" class=\"headerlink\" title=\"rpcx\"></a>rpcx</h2><ul>\n<li><p><a href=\"https://doc.rpcx.io/\">rpcx技术文档</a></p>\n</li>\n<li><p>安装<code>rpcx</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v -tags <span class=\"string\">&quot;reuseport quic kcp zookeeper etcd consul ping&quot;</span> github.com/smallnest/rpcx/...</span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码:</code></p>\n<p><code>server/server.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/server&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/serverplugin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\taddr      = flag.String(<span class=\"string\">&quot;addr&quot;</span>, <span class=\"string\">&quot;localhost:8972&quot;</span>, <span class=\"string\">&quot;server address&quot;</span>)</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、new一个服务struct</span></span><br><span class=\"line\">\ts := server.NewServer()</span><br><span class=\"line\">\t<span class=\"comment\">//2、连接注册中心（这里是zookeeper）</span></span><br><span class=\"line\">\taddRegistryPlugin(s)</span><br><span class=\"line\">\t<span class=\"comment\">//3、服务注册</span></span><br><span class=\"line\">\ts.RegisterName(<span class=\"string\">&quot;Arith&quot;</span>, <span class=\"built_in\">new</span>(Arith), <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//4、启动服务监听</span></span><br><span class=\"line\">\ts.Serve(<span class=\"string\">&quot;tcp&quot;</span>, *addr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addRegistryPlugin</span><span class=\"params\">(s *server.Server)</span></span> &#123;</span><br><span class=\"line\">\tr := &amp;serverplugin.EtcdV3RegisterPlugin&#123;</span><br><span class=\"line\">\t\tServiceAddress: <span class=\"string\">&quot;tcp@&quot;</span> + *addr,</span><br><span class=\"line\">\t\tEtcdServers:   etcdServers,</span><br><span class=\"line\">\t\tBasePath:       basePath,</span><br><span class=\"line\">\t\tUpdateInterval: time.Minute,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.Start()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.Plugins.Add(r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>server/rpc.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Mul(cxt context.Context, args *Args, reply *<span class=\"type\">int</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Mul on&quot;</span>, *addr)</span><br><span class=\"line\">  *reply = args.A * args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Div(cxt context.Context, args *Args, quo *Quotient) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Div on&quot;</span>, *addr)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;divide by 0&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  quo.Quo = args.A / args.B</span><br><span class=\"line\">  quo.Rem = args.A % args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公共代码<code>proto/proto.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化server</li>\n<li>连接注册中心</li>\n<li>注册服务</li>\n<li>启动监听服务</li>\n</ul>\n<p><code>客户端代码</code></p>\n<p><code>client.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/client&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpcx_test/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、启动一个ZookeeperDiscovery实例</span></span><br><span class=\"line\">\td := client.NewEtcdV3Discovery(basePath,<span class=\"string\">&quot;Arith&quot;</span>, etcdServers, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//2、启动一个客户端</span></span><br><span class=\"line\">\txclient := client.NewXClient(<span class=\"string\">&quot;Arith&quot;</span>, client.Failtry, client.RandomSelect, d, client.DefaultOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> xclient.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := &amp;proto.Args&#123;</span><br><span class=\"line\">\t\tA: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\tB: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo := &amp;proto.Quotient&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\treply := <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr := xclient.Call(context.Background(), <span class=\"string\">&quot;Mul&quot;</span>, args, reply)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d * %d = %d&quot;</span>, args.A, args.B, *reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr = xclient.Call(context.Background(), <span class=\"string\">&quot;Div&quot;</span>, args, quo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d / %d = %d, 余数为%d&quot;</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">3</span>*time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务发现</li>\n</ul>\n<p>服务发现主要涵盖两个方面：<br>    - 客户端获取服务元数据<br>    - 自动剔除失效的服务</p>\n<ul>\n<li>启动服务发现实例</li>\n<li>启动客户端</li>\n</ul>\n<h2 id=\"protobuf环境搭建\"><a href=\"#protobuf环境搭建\" class=\"headerlink\" title=\"protobuf环境搭建\"></a>protobuf环境搭建</h2><ul>\n<li><p>安装protobuf编译工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载protobuf</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖库</span></span><br><span class=\"line\">sudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> protobuf/</span><br><span class=\"line\"><span class=\"comment\"># 自动生成configure配置文件：</span></span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\"><span class=\"comment\"># 配置环境：</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"comment\"># 编译源代码(要有耐心！)：</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"><span class=\"comment\"># 刷新共享库 （很重要的一步啊）</span></span><br><span class=\"line\">sudo ldconfig</span><br><span class=\"line\"><span class=\"comment\"># 成功后需要使用命令测试</span></span><br><span class=\"line\">protoc -h</span><br></pre></td></tr></table></figure></li>\n<li><p>安装go 插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u google.golang.org/protobuf/proto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"protobuf使用步骤\"><a href=\"#protobuf使用步骤\" class=\"headerlink\" title=\"protobuf使用步骤\"></a>protobuf使用步骤</h2><ul>\n<li><p>书写.proto文件</p>\n<p>  <code>pb/Person.proto: </code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/timestamp.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int32</span> id = <span class=\"number\">2</span>;  <span class=\"comment\">// Unique ID number for this person.</span></span><br><span class=\"line\">\t<span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">\t  MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t  HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">\t  <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  PhoneType type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> PhoneNumber phones = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoogle.protobuf.Timestamp last_updated = <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our address book file is just one of these.</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> Person people = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=.</span><br></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;zinx/myDemo/protobufDemo/pb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个Person结构体对象</span></span><br><span class=\"line\">\tperson := &amp;pb.Person&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;lijiahao&quot;</span>,</span><br><span class=\"line\">\t\tId:    <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tEmail: <span class=\"string\">&quot;18702748294@163.com&quot;</span>,</span><br><span class=\"line\">\t\tPhones: []*pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;15136588270&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_MOBILE,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;190019393&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_HOME,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;17182920303&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_WORK,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Person对象进行序列化</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(person)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;proto marshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">\tnewData := &amp;pb.Person&#123;&#125;</span><br><span class=\"line\">\terr = proto.Unmarshal(data, newData)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unmarshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(newData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"grpc-使用步骤\"><a href=\"#grpc-使用步骤\" class=\"headerlink\" title=\"grpc 使用步骤\"></a>grpc 使用步骤</h2><ul>\n<li><p>安装grpc go插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v google.golang.org/grpc</span><br></pre></td></tr></table></figure></li>\n<li><p>编写.proto文件</p>\n<p>  <code>pb/hello_grpc.proto</code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf版本号</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;hello_grpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloReply</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<ul>\n<li>安装go语言插件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li>\n<li>编译.proto文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I pb/ pb/*.proto --go_out=plugins=grpc:service</span><br><span class=\"line\">* -I 后面指定proto文件存放目录，和proto文件</span><br><span class=\"line\">* --go_out=plugins=grpc:后面指定生成go代码存放的目录</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>编写服务端代码<br>  <code>server/server.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;hello_grpc/service&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给对象绑定方法，实现接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> SayHello(ctx context.Context, in *service.HelloRequest) (*service.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;service.HelloReply&#123;Message: <span class=\"string\">&quot;hello &quot;</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 监听本地端口</span></span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;监听端口失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建gRPC服务器</span></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册服务</span></span><br><span class=\"line\">\tservice.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开启服务</span></span><br><span class=\"line\">\terr = s.Serve(lis)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开启服务失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写客户端代码<br>  <code>client/client.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;hello_grpc/service&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(<span class=\"string\">&quot;:8080&quot;</span>, grpc.WithInsecure())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;连接服务端失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个客户端</span></span><br><span class=\"line\">\tc := service.NewGreeterClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用服务端函数</span></span><br><span class=\"line\">\tr, err := c.SayHello(context.Background(), &amp;service.HelloRequest&#123;Name: <span class=\"string\">&quot;horika&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;调用服务端代码失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;调用成功: %s&quot;</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"RPC封装\"><a href=\"#RPC封装\" class=\"headerlink\" title=\"RPC封装\"></a>RPC封装</h2><ul>\n<li><p>服务端使用步骤</p>\n<ul>\n<li><p>注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br></pre></td></tr></table></figure></li>\n<li><p>创建监听器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li><p>建立连接</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li><p>给连接绑定Rpc服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端使用步骤</p>\n<ul>\n<li><p>使用Rpc连接服务器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li><p>调用远程函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端和服务端封装</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> design</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInterface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHelloWorld(<span class=\"type\">string</span>, *<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterService</span><span class=\"params\">(i MyInterface)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rpc.RegisterName(<span class=\"string\">&quot;hello&quot;</span>, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装连接远程服务器和调用远程函数过程</span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc *rpc.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitClient</span><span class=\"params\">(addr <span class=\"type\">string</span>)</span></span> *MyClient &#123;</span><br><span class=\"line\">\tconn, _ := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyClient&#123;c:conn&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyClient)</span></span>HelloWorld(a <span class=\"type\">string</span>, b *<span class=\"type\">string</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m.c.Call(<span class=\"string\">&quot;hello.HelloWorld&quot;</span>, a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p>注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：<code>zookeeper</code>，<code>eureka</code>，<code>consul</code>，<code>etcd</code> 等开源框架实现。 </p>\n</li>\n<li><p>服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。</p>\n</li>\n<li><p>服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）</p>\n</li>\n</ul>\n<h2 id=\"rpcx\"><a href=\"#rpcx\" class=\"headerlink\" title=\"rpcx\"></a>rpcx</h2><ul>\n<li><p><a href=\"https://doc.rpcx.io/\">rpcx技术文档</a></p>\n</li>\n<li><p>安装<code>rpcx</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v -tags <span class=\"string\">&quot;reuseport quic kcp zookeeper etcd consul ping&quot;</span> github.com/smallnest/rpcx/...</span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码:</code></p>\n<p><code>server/server.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/server&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/serverplugin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\taddr      = flag.String(<span class=\"string\">&quot;addr&quot;</span>, <span class=\"string\">&quot;localhost:8972&quot;</span>, <span class=\"string\">&quot;server address&quot;</span>)</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、new一个服务struct</span></span><br><span class=\"line\">\ts := server.NewServer()</span><br><span class=\"line\">\t<span class=\"comment\">//2、连接注册中心（这里是zookeeper）</span></span><br><span class=\"line\">\taddRegistryPlugin(s)</span><br><span class=\"line\">\t<span class=\"comment\">//3、服务注册</span></span><br><span class=\"line\">\ts.RegisterName(<span class=\"string\">&quot;Arith&quot;</span>, <span class=\"built_in\">new</span>(Arith), <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//4、启动服务监听</span></span><br><span class=\"line\">\ts.Serve(<span class=\"string\">&quot;tcp&quot;</span>, *addr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addRegistryPlugin</span><span class=\"params\">(s *server.Server)</span></span> &#123;</span><br><span class=\"line\">\tr := &amp;serverplugin.EtcdV3RegisterPlugin&#123;</span><br><span class=\"line\">\t\tServiceAddress: <span class=\"string\">&quot;tcp@&quot;</span> + *addr,</span><br><span class=\"line\">\t\tEtcdServers:   etcdServers,</span><br><span class=\"line\">\t\tBasePath:       basePath,</span><br><span class=\"line\">\t\tUpdateInterval: time.Minute,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.Start()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.Plugins.Add(r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>server/rpc.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Mul(cxt context.Context, args *Args, reply *<span class=\"type\">int</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Mul on&quot;</span>, *addr)</span><br><span class=\"line\">  *reply = args.A * args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Div(cxt context.Context, args *Args, quo *Quotient) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Div on&quot;</span>, *addr)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;divide by 0&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  quo.Quo = args.A / args.B</span><br><span class=\"line\">  quo.Rem = args.A % args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公共代码<code>proto/proto.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化server</li>\n<li>连接注册中心</li>\n<li>注册服务</li>\n<li>启动监听服务</li>\n</ul>\n<p><code>客户端代码</code></p>\n<p><code>client.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/client&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpcx_test/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、启动一个ZookeeperDiscovery实例</span></span><br><span class=\"line\">\td := client.NewEtcdV3Discovery(basePath,<span class=\"string\">&quot;Arith&quot;</span>, etcdServers, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//2、启动一个客户端</span></span><br><span class=\"line\">\txclient := client.NewXClient(<span class=\"string\">&quot;Arith&quot;</span>, client.Failtry, client.RandomSelect, d, client.DefaultOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> xclient.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := &amp;proto.Args&#123;</span><br><span class=\"line\">\t\tA: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\tB: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo := &amp;proto.Quotient&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\treply := <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr := xclient.Call(context.Background(), <span class=\"string\">&quot;Mul&quot;</span>, args, reply)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d * %d = %d&quot;</span>, args.A, args.B, *reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr = xclient.Call(context.Background(), <span class=\"string\">&quot;Div&quot;</span>, args, quo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d / %d = %d, 余数为%d&quot;</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">3</span>*time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务发现</li>\n</ul>\n<p>服务发现主要涵盖两个方面：<br>    - 客户端获取服务元数据<br>    - 自动剔除失效的服务</p>\n<ul>\n<li>启动服务发现实例</li>\n<li>启动客户端</li>\n</ul>\n<h2 id=\"protobuf环境搭建\"><a href=\"#protobuf环境搭建\" class=\"headerlink\" title=\"protobuf环境搭建\"></a>protobuf环境搭建</h2><ul>\n<li><p>安装protobuf编译工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载protobuf</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖库</span></span><br><span class=\"line\">sudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> protobuf/</span><br><span class=\"line\"><span class=\"comment\"># 自动生成configure配置文件：</span></span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\"><span class=\"comment\"># 配置环境：</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"comment\"># 编译源代码(要有耐心！)：</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"><span class=\"comment\"># 刷新共享库 （很重要的一步啊）</span></span><br><span class=\"line\">sudo ldconfig</span><br><span class=\"line\"><span class=\"comment\"># 成功后需要使用命令测试</span></span><br><span class=\"line\">protoc -h</span><br></pre></td></tr></table></figure></li>\n<li><p>安装go 插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u google.golang.org/protobuf/proto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"protobuf使用步骤\"><a href=\"#protobuf使用步骤\" class=\"headerlink\" title=\"protobuf使用步骤\"></a>protobuf使用步骤</h2><ul>\n<li><p>书写.proto文件</p>\n<p>  <code>pb/Person.proto: </code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/timestamp.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int32</span> id = <span class=\"number\">2</span>;  <span class=\"comment\">// Unique ID number for this person.</span></span><br><span class=\"line\">\t<span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">\t  MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t  HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">\t  <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  PhoneType type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> PhoneNumber phones = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoogle.protobuf.Timestamp last_updated = <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our address book file is just one of these.</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> Person people = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=.</span><br></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;zinx/myDemo/protobufDemo/pb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个Person结构体对象</span></span><br><span class=\"line\">\tperson := &amp;pb.Person&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;lijiahao&quot;</span>,</span><br><span class=\"line\">\t\tId:    <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tEmail: <span class=\"string\">&quot;18702748294@163.com&quot;</span>,</span><br><span class=\"line\">\t\tPhones: []*pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;15136588270&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_MOBILE,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;190019393&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_HOME,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;17182920303&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_WORK,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Person对象进行序列化</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(person)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;proto marshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">\tnewData := &amp;pb.Person&#123;&#125;</span><br><span class=\"line\">\terr = proto.Unmarshal(data, newData)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unmarshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(newData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"grpc-使用步骤\"><a href=\"#grpc-使用步骤\" class=\"headerlink\" title=\"grpc 使用步骤\"></a>grpc 使用步骤</h2><ul>\n<li><p>安装grpc go插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v google.golang.org/grpc</span><br></pre></td></tr></table></figure></li>\n<li><p>编写.proto文件</p>\n<p>  <code>pb/hello_grpc.proto</code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf版本号</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;hello_grpc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloReply</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<ul>\n<li>安装go语言插件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li>\n<li>编译.proto文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I pb/ pb/*.proto --go_out=plugins=grpc:service</span><br><span class=\"line\">* -I 后面指定proto文件存放目录，和proto文件</span><br><span class=\"line\">* --go_out=plugins=grpc:后面指定生成go代码存放的目录</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>编写服务端代码<br>  <code>server/server.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;hello_grpc/service&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给对象绑定方法，实现接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> SayHello(ctx context.Context, in *service.HelloRequest) (*service.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;service.HelloReply&#123;Message: <span class=\"string\">&quot;hello &quot;</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 监听本地端口</span></span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;监听端口失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建gRPC服务器</span></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册服务</span></span><br><span class=\"line\">\tservice.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开启服务</span></span><br><span class=\"line\">\terr = s.Serve(lis)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开启服务失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写客户端代码<br>  <code>client/client.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;hello_grpc/service&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(<span class=\"string\">&quot;:8080&quot;</span>, grpc.WithInsecure())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;连接服务端失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个客户端</span></span><br><span class=\"line\">\tc := service.NewGreeterClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用服务端函数</span></span><br><span class=\"line\">\tr, err := c.SayHello(context.Background(), &amp;service.HelloRequest&#123;Name: <span class=\"string\">&quot;horika&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;调用服务端代码失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;调用成功: %s&quot;</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"RPC封装\"><a href=\"#RPC封装\" class=\"headerlink\" title=\"RPC封装\"></a>RPC封装</h2><ul>\n<li><p>服务端使用步骤</p>\n<ul>\n<li><p>注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br></pre></td></tr></table></figure></li>\n<li><p>创建监听器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li><p>建立连接</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li><p>给连接绑定Rpc服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端使用步骤</p>\n<ul>\n<li><p>使用Rpc连接服务器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li><p>调用远程函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端和服务端封装</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> design</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInterface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHelloWorld(<span class=\"type\">string</span>, *<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterService</span><span class=\"params\">(i MyInterface)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rpc.RegisterName(<span class=\"string\">&quot;hello&quot;</span>, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装连接远程服务器和调用远程函数过程</span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc *rpc.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitClient</span><span class=\"params\">(addr <span class=\"type\">string</span>)</span></span> *MyClient &#123;</span><br><span class=\"line\">\tconn, _ := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyClient&#123;c:conn&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyClient)</span></span>HelloWorld(a <span class=\"type\">string</span>, b *<span class=\"type\">string</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m.c.Call(<span class=\"string\">&quot;hello.HelloWorld&quot;</span>, a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Golang性能调优","_content":"# go测试\n\n## go test\n\n## go benchmark\n\n## go 性能调优\n* [go pprof实战](https://blog.wolfogre.com/posts/go-ppof-practice/)\n* [go pprof理论](https://cizixs.com/2017/09/11/profiling-golang-program/)\n\n\n\n\n","source":"_posts/go/go_test.md","raw":"---\ntitle: Golang性能调优 \ncategories: \n- GolangStudy\n---\n# go测试\n\n## go test\n\n## go benchmark\n\n## go 性能调优\n* [go pprof实战](https://blog.wolfogre.com/posts/go-ppof-practice/)\n* [go pprof理论](https://cizixs.com/2017/09/11/profiling-golang-program/)\n\n\n\n\n","slug":"go/go_test","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6d0000af8wz30luhxsw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"go测试\"><a href=\"#go测试\" class=\"headerlink\" title=\"go测试\"></a>go测试</h1><h2 id=\"go-test\"><a href=\"#go-test\" class=\"headerlink\" title=\"go test\"></a>go test</h2><h2 id=\"go-benchmark\"><a href=\"#go-benchmark\" class=\"headerlink\" title=\"go benchmark\"></a>go benchmark</h2><h2 id=\"go-性能调优\"><a href=\"#go-性能调优\" class=\"headerlink\" title=\"go 性能调优\"></a>go 性能调优</h2><ul>\n<li><a href=\"https://blog.wolfogre.com/posts/go-ppof-practice/\">go pprof实战</a></li>\n<li><a href=\"https://cizixs.com/2017/09/11/profiling-golang-program/\">go pprof理论</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go测试\"><a href=\"#go测试\" class=\"headerlink\" title=\"go测试\"></a>go测试</h1><h2 id=\"go-test\"><a href=\"#go-test\" class=\"headerlink\" title=\"go test\"></a>go test</h2><h2 id=\"go-benchmark\"><a href=\"#go-benchmark\" class=\"headerlink\" title=\"go benchmark\"></a>go benchmark</h2><h2 id=\"go-性能调优\"><a href=\"#go-性能调优\" class=\"headerlink\" title=\"go 性能调优\"></a>go 性能调优</h2><ul>\n<li><a href=\"https://blog.wolfogre.com/posts/go-ppof-practice/\">go pprof实战</a></li>\n<li><a href=\"https://cizixs.com/2017/09/11/profiling-golang-program/\">go pprof理论</a></li>\n</ul>\n"},{"title":"Redis集群","_content":"# Redis集群\n\n## redis主从复制\n\n* 为了避免单点redis服务器故障，准备多台服务器，将数据复制到多个副本保存在不同的服务器上，连接在一起，并且保证数据同步, 实现高可用, 并且实现数据冗余备份\n\n* 多台服务器连接方案\n\t- master(主服务器) 收集数据，负责写数据，并将数据同步到slave结点\n\t- slave(从服务器)  从master接收数据并提供给用户(用户读数据从slave结点读)\n\t- 注意: 需要解决数据同步的问题，及将master的数据复制到slave中\n\n* 主从复制就是将master中的数据即时、有效地复制到slave中(一个master拥有多个slave， 一个slave只能对应一个master)\n\n* 职责分配\n\t- master\n\t\t* 写数据\n\t\t* 执行写操作时，将出现变化的数据自动同步到slave中\n\t\t* 读数据(可忽略)\n\t- slave\n\t\t* 读数据\n\t\t* 禁止写数据\n\n* 主从复制的作用\n\t- 读写分离: master写、slave读、提高服务器的读写负载能力\n\t- 负载均衡: 基于主从结构，配合读写分离，由slave分担master负载，并根据需求变化，改变slave的数量\n\t\t，通过从多个结点分担数据读取负载，大大提高redis服务器并发量和数据吞吐量\n\t- 故障恢复: mater出问题时， 由slave提供服务，实现快速故障恢复\n\t- 数据冗余: 实现数据热备份，是持久化之外的一种数据冗余方式\n\t- 高可用基石: 基于主从复制，构建哨兵模式和集群，实现redis的高可用方案\n\n* 主从复制工作流程\n\t- 建立连接阶段(slave连接master)\n\t\t* 建立slave到master的连接，使得master能够识别slave，并保存slave的端口号\n\t\t* 连接建立工作流程\n\t\t\t1、slave发送指令 : slaveof ip port   (将一台服务器变成另一台服务器的从服务器)\n\t\t\t2、master收到指令后，响应对方\n\t\t\t3、保存master的IP和端口:   masterhost  masterport\n\t\t\t4、根据保存的信息创建连接master的socket\n\t\t\t5、slave周期性的发送ping\n\t\t\t6、master回复pong\n\t\t\t7、slave发送身份校验指令: auth password\n\t\t\t8、master验证授权\n\t\t\t9、slave发送指令: replconflistening-port <port-number>\n\t\t\t10、master保存slave的端口号\n\n\t\t* 建立连接的方式\n\t\t\t1、客户端发送命令\n\t\t\t\tslaveof <masterip> <masterport>\n\t\t\t2、启动服务器参数\n\t\t\t\tredis-server --slaveof <masterip> <masterport>\n\t\t\t3、服务器配置(写在配置文件中)\n\t\t\t\tslaveof <masterip> <masterport>\n\t\t* 断开连接的方式\n\t\t\tslaveof no one\n\t- 数据同步阶段\n\t\t1. slave发送指令 `psync2 ? -1` (? 代表runid -1 代表offset)\n\t\t2. master执行bgsave生成RDB文件，并记录offset\n\t\t3. 发送 +FULLRESYNC runid offset\n\t\t   并将RDB文件通过socket发送给slave\n\t\t4. slave 保存runid和offset，并接收RDB，清空数据，执行RDB文件恢复过程(全量复制)\n\t\t5. 发送命令 psync2 runid offset\n\t\t6. 接收命令，判断runid是否匹配，并且offset是否在复制缓冲区中\n\t\t7. 如果runid不匹配或者offset不在复制缓冲区中，再次执行全量复制\n\t\t8. 如果runid匹配offset也在复制缓冲区中，检查两者保存的offset是否匹配，如果匹配说明是同步的\n\t\t9. 如果不匹配则引发增量复制，发送 +CONTINUE offset\n\t\t9. 保存offset, 并执行rewriteaof恢复数据\n\n\t\t* 请求同步数据 \n\t\t* 创建RDB同步数据\n\t\t* 恢复RDB同步数据\n\t\t* 请求部分同步数据\n\t\t* 恢复部分同步数据\n\n\t\t* 注意: master端复制缓冲区大小设置不合理可能会导致数据溢出，可以更改: repl-backlog-size \n\n\t- 命令传播阶段\n\t\t* 命令传播阶段需要部分复制\n\t\t* 部分复制的三个核心要素\n\t\t\t- 服务器的运行id(run id)\n\t\t\t\t* 服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行ID\n\t\t\t\t* 运行ID是40位16进制字符\n\t\t\t\t* 运行ID被用于在服务器直接识别身份\n\t\t\t\t* 运行ID在每台服务器启动时自动生成，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID\n\t\t\t\n\t\t\t- 主服务器的复制积压缓冲区\n\t\t\t\t* 复制缓冲区用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令个记录下来，并存储在复制缓冲区\n\t\t\t\t* 复制缓冲区组成\n\t\t\t\t\t* 偏移量\n\t\t\t\t\t* 字节值\n\t\t\t\t\t* 通过offset区分不同的slave当前数据传输的差异\n\t\t\t\t\t* master记录已发送的信息对应的offset\n\t\t\t\t\t* slave记录已接受的信息对应的offset\n\t\t\t- 主从服务器的复制偏移量\n\n\t\t* 心跳机制\n\t\t\t- 命令传播阶段，master和slave需要进行信息交换，使用心跳机制进行维护，需要双方连接保持在线\n\t\t\t- master心跳:\n\t\t\t\t* 指令: PING\n\t\t\t\t* 周期: repl-ping-slave-period(默认10秒)\n\t\t\t\t* 作用: 判断slave是否在线\n\t\t\t\t* 查询: INFO replication\n\t\t\t- slave心跳:\n\t\t\t\t* 指令: REPLICONF ACK offset\n\t\t\t\t* 周期: 1s\n\t\t\t\t* 作用:\n\t\t\t\t\t* 判断master是否在线\n\t\t\t\t\t* 汇报slave自身的复制偏移量，获取最新的数据变更指令\n\n## 哨兵模式\n\n* 哨兵是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有的slave连接到master\n* 哨兵的作用\n\t- 监控master和slave是否正常运行\n\t\t* 用于同步各个节点的状态信息: 包括sentinel、master和slave的状态\n\t\t* 几个sentinel内部发布订阅一个sentinel得到的master和slave的状态信息\n\t- 通知(提醒) : 当被监控的服务器出现问题时，向其他(哨兵、客户端)发送通知\n\t- 自动故障转移 : 断开master和slave连接，选取一个slave作为master，将其他slave连接到新的master上，并通知客户端新的服务器地址\n\t\t* master的状态: S_DOWN(主观下线) O_DOWN(客观下线)\n\n\t\t* 服务器列表中选择备选的master的原则\n\t\t\t* 在线\n\t\t\t* 响应速度快\n\t\t\t* 优先原则(offset runid)\n* 哨兵的配置\n\t* 配置一拖二的主从结构\n\t* 配置三个哨兵(配置相同,端口号不同) sentinel.conf\n\t* 启动哨兵:   redis-sentinel sentinel-端口号.conf\n\n\n## 集群\n\n* redis提供的服务QPS可以达到10万/秒，当处理速度不够用或者内存不够用的时候考虑集群方案\n\n* 集群的作用\n\t* 分散单机服务器的访问压力，实现负载均衡\n\t* 分散单台服务器的存储压力，实现可扩展性\n\t* 降低单台服务器宕机带来的业务灾难\n\n* Redis集群结构设计\n\t* 数据存储设计\n\t\t* 通过算法设计，计算出key应该保存的位置\n\t\t* 将所有的存储空间分为16384份，每台主机保存一部分存储空间\n\t\t* 槽用于区分数据的存储空间\n\t\t* 增强可扩展性\n\t* 集群内部的通讯设计\n\t\t* 各个数据库相互通信，保存每个库中槽的编号数据\n\t\t* 一次命中直接返回\n\t\t* 一次未命中，告知具体位置\n\n* cluster配置\n\t* cluster-enabled yes   成为cluster结点\n\t* cluster-config-file  nodes-6379.conf\n\t* cluster-node-timeout 10000\n\t* cluster-migration-barrier <count>  master连接的slave的数量\n* cluster结点操作指令\n\t* cluster nodes     \t\t\t  查看集群结点信息\n\t* cluster replicate <master-id>   进入一个从节点redis，切换到其主节点\n\t* cluster meet ip:port            发现一个新节点，新增主节点\n\t* cluster forget<id>              忽略一个没有slot的结点\n\t* cluster failover \t\t\t\t  手动故障转移\n\n\t* redis-trib.rb create --replicas 1(连接master的slave个数) 127.0.0.1:6379(master结点的ip:port)\n\t* redis-cli -c (客户端连接的时候需要加上-c参数)\n\n# 企业级解决方案\n\n* 缓存预热\n\t- 缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免用户请求的时候，先查询数据库，然后再将数据缓存的情况，用户直接查询事先预热的缓存数据\n\t- 解决方案\n\t\t* 前期准备工作\n\t\t\t* 日常例行统计数据访问记录，统计访问频度较高的热点数据\n\t\t\t* 利用LRU数据删除策略，构建数据留存队列\n\t\t* 准备工作\n\t\t\t* 将统计结果中的数据分类，根据级别，redis优先加载级别高的热点数据\n\t\t\t* 利用分布式多服务器同时进行数据读取，加速数据加载过程\n\t\t* 实施\n\t\t\t* 使用脚本固定出发数据预热过程\n\t\t\t* 使用CDN(内容分发网络)\n* 缓存雪崩\n\t- 缓存雪崩是由于短时间范围内大量的key集中过期导致的\n\t- 解决方案(道)\n\t\t* 更多的页面静态处理\n\t\t* 构建多级缓存架构\n\t\t\tNginx缓存 + redis缓存 + ehcache缓存\n\t\t* 检查Mysql严重耗时业务进行优化\n\t\t* 灾难预警机制\n\t\t\t* 监控redis服务器性能指标\n\t\t\t\t* CPU占用和CPU使用率\n\t\t\t\t* 内存容量\n\t\t\t\t* 查询平均响应时间\n\t\t\t\t* 线程数\n\t\t* 限流、降级\n\t- 解决方案(术)\n\t\t* LRU和LFU切换(切换删除策略)\n\t\t* 数据有效期策略调整\n\t\t\t* 分类到期\n\t\t\t* 同类别下采用固定时间+随机值的形式，稀释集中到期的key的数量\n\t\t* 超热数据使用永久key\n\t\t* 定期维护\n\t\t* 加锁(慎用)\n* 缓存击穿\n\t- 缓存击穿是由单个高热的key过期导致的\n\t- 解决方案\n\t\t* 预先设定\n\t\t* 监控访问量，对自然流量激增的数据延长过期时间或设置为永久key\n\t\t* 后台刷新数据\n\t\t* 二级缓存, 设置不同的失效时间，保证数据不被同时淘汰\n\t\t* 加分布式锁，防止被击穿(慎用)\n\n* 缓存穿透\n\t- 缓存穿透是访问了不存在的数据，跳过了合法数据的redis缓存阶段，每次访问数据库，导致对数据库服务器造成压力\n\t- 解决方案\n\t\t* 白名单策略(使用布隆过滤器）\n\t- 实施监控\n\t- key加密\n\n* 性能指标监控\n\t- 性能指标\n\t\t* latency     \t\t\t\tRedis响应一个请求时间\n\t\t* instantaneous_os_per_sec  平均每秒处理请求总数\n\t\t* hit rate \t\t\t\t\t缓存命中率\n\t- 内存指标\n\t\t* used_memory \t\t\t\t已使用内存\n\t\t* mem_fragmentation_ratio \t内存碎片率\n\t\t* evicted_keys \t\t\t\t由于最大内存限制而被移除的key的数量\n\t\t* blocked_clients          \t\n\t- 基本活动指标\n\t- 持久化指标\n\t- 错误指标\n\t\t* rejected_connenctions   \t\t\t由于达到maxclient限制而被拒绝的连接数 \n\t\t* keyspace_misses \t\t\t\t\tkey值查找失败的次数\n\t\t* master_link_down_since_seconds  \t主从断开的持续时间\n* 压测工具(benchmark)\n\t- redis-benchmark [-h] [-p] [-c] [-n <requests>] [-k]\n\teg:\n\t\t* redis-benchmark    （默认开50个连接,10000次请求对应的性能）\n\t\t* redis-benchmark  -c 100 -n 5000       （-c 请求连接数 -n 请求次数） \n* 性能指标监控工具\n\t- monitor    打印服务器调试信息\n\t- slowlog    慢查询日志\n\t  * 命令\n\t\tslowlog [operator]\n\t\t\t* get:      获取慢查询日志\n\t\t\t* len：     获取慢查询日志条目数\n\t\t\t* reset: \t重置慢查询日志\n\t  * 配置\n\t\t* slowlog-log-slower-than 1000    设置慢查询的时间上限(单位: 微妙)\n\t\t* slow-max-len  100 \t\t\t  设置慢查询命令对应的日志显示长度\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\n\n","source":"_posts/go/redis_cluster.md","raw":"---\ntitle: Redis集群 \ncategories: \n- GolangStudy\n---\n# Redis集群\n\n## redis主从复制\n\n* 为了避免单点redis服务器故障，准备多台服务器，将数据复制到多个副本保存在不同的服务器上，连接在一起，并且保证数据同步, 实现高可用, 并且实现数据冗余备份\n\n* 多台服务器连接方案\n\t- master(主服务器) 收集数据，负责写数据，并将数据同步到slave结点\n\t- slave(从服务器)  从master接收数据并提供给用户(用户读数据从slave结点读)\n\t- 注意: 需要解决数据同步的问题，及将master的数据复制到slave中\n\n* 主从复制就是将master中的数据即时、有效地复制到slave中(一个master拥有多个slave， 一个slave只能对应一个master)\n\n* 职责分配\n\t- master\n\t\t* 写数据\n\t\t* 执行写操作时，将出现变化的数据自动同步到slave中\n\t\t* 读数据(可忽略)\n\t- slave\n\t\t* 读数据\n\t\t* 禁止写数据\n\n* 主从复制的作用\n\t- 读写分离: master写、slave读、提高服务器的读写负载能力\n\t- 负载均衡: 基于主从结构，配合读写分离，由slave分担master负载，并根据需求变化，改变slave的数量\n\t\t，通过从多个结点分担数据读取负载，大大提高redis服务器并发量和数据吞吐量\n\t- 故障恢复: mater出问题时， 由slave提供服务，实现快速故障恢复\n\t- 数据冗余: 实现数据热备份，是持久化之外的一种数据冗余方式\n\t- 高可用基石: 基于主从复制，构建哨兵模式和集群，实现redis的高可用方案\n\n* 主从复制工作流程\n\t- 建立连接阶段(slave连接master)\n\t\t* 建立slave到master的连接，使得master能够识别slave，并保存slave的端口号\n\t\t* 连接建立工作流程\n\t\t\t1、slave发送指令 : slaveof ip port   (将一台服务器变成另一台服务器的从服务器)\n\t\t\t2、master收到指令后，响应对方\n\t\t\t3、保存master的IP和端口:   masterhost  masterport\n\t\t\t4、根据保存的信息创建连接master的socket\n\t\t\t5、slave周期性的发送ping\n\t\t\t6、master回复pong\n\t\t\t7、slave发送身份校验指令: auth password\n\t\t\t8、master验证授权\n\t\t\t9、slave发送指令: replconflistening-port <port-number>\n\t\t\t10、master保存slave的端口号\n\n\t\t* 建立连接的方式\n\t\t\t1、客户端发送命令\n\t\t\t\tslaveof <masterip> <masterport>\n\t\t\t2、启动服务器参数\n\t\t\t\tredis-server --slaveof <masterip> <masterport>\n\t\t\t3、服务器配置(写在配置文件中)\n\t\t\t\tslaveof <masterip> <masterport>\n\t\t* 断开连接的方式\n\t\t\tslaveof no one\n\t- 数据同步阶段\n\t\t1. slave发送指令 `psync2 ? -1` (? 代表runid -1 代表offset)\n\t\t2. master执行bgsave生成RDB文件，并记录offset\n\t\t3. 发送 +FULLRESYNC runid offset\n\t\t   并将RDB文件通过socket发送给slave\n\t\t4. slave 保存runid和offset，并接收RDB，清空数据，执行RDB文件恢复过程(全量复制)\n\t\t5. 发送命令 psync2 runid offset\n\t\t6. 接收命令，判断runid是否匹配，并且offset是否在复制缓冲区中\n\t\t7. 如果runid不匹配或者offset不在复制缓冲区中，再次执行全量复制\n\t\t8. 如果runid匹配offset也在复制缓冲区中，检查两者保存的offset是否匹配，如果匹配说明是同步的\n\t\t9. 如果不匹配则引发增量复制，发送 +CONTINUE offset\n\t\t9. 保存offset, 并执行rewriteaof恢复数据\n\n\t\t* 请求同步数据 \n\t\t* 创建RDB同步数据\n\t\t* 恢复RDB同步数据\n\t\t* 请求部分同步数据\n\t\t* 恢复部分同步数据\n\n\t\t* 注意: master端复制缓冲区大小设置不合理可能会导致数据溢出，可以更改: repl-backlog-size \n\n\t- 命令传播阶段\n\t\t* 命令传播阶段需要部分复制\n\t\t* 部分复制的三个核心要素\n\t\t\t- 服务器的运行id(run id)\n\t\t\t\t* 服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行ID\n\t\t\t\t* 运行ID是40位16进制字符\n\t\t\t\t* 运行ID被用于在服务器直接识别身份\n\t\t\t\t* 运行ID在每台服务器启动时自动生成，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID\n\t\t\t\n\t\t\t- 主服务器的复制积压缓冲区\n\t\t\t\t* 复制缓冲区用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令个记录下来，并存储在复制缓冲区\n\t\t\t\t* 复制缓冲区组成\n\t\t\t\t\t* 偏移量\n\t\t\t\t\t* 字节值\n\t\t\t\t\t* 通过offset区分不同的slave当前数据传输的差异\n\t\t\t\t\t* master记录已发送的信息对应的offset\n\t\t\t\t\t* slave记录已接受的信息对应的offset\n\t\t\t- 主从服务器的复制偏移量\n\n\t\t* 心跳机制\n\t\t\t- 命令传播阶段，master和slave需要进行信息交换，使用心跳机制进行维护，需要双方连接保持在线\n\t\t\t- master心跳:\n\t\t\t\t* 指令: PING\n\t\t\t\t* 周期: repl-ping-slave-period(默认10秒)\n\t\t\t\t* 作用: 判断slave是否在线\n\t\t\t\t* 查询: INFO replication\n\t\t\t- slave心跳:\n\t\t\t\t* 指令: REPLICONF ACK offset\n\t\t\t\t* 周期: 1s\n\t\t\t\t* 作用:\n\t\t\t\t\t* 判断master是否在线\n\t\t\t\t\t* 汇报slave自身的复制偏移量，获取最新的数据变更指令\n\n## 哨兵模式\n\n* 哨兵是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有的slave连接到master\n* 哨兵的作用\n\t- 监控master和slave是否正常运行\n\t\t* 用于同步各个节点的状态信息: 包括sentinel、master和slave的状态\n\t\t* 几个sentinel内部发布订阅一个sentinel得到的master和slave的状态信息\n\t- 通知(提醒) : 当被监控的服务器出现问题时，向其他(哨兵、客户端)发送通知\n\t- 自动故障转移 : 断开master和slave连接，选取一个slave作为master，将其他slave连接到新的master上，并通知客户端新的服务器地址\n\t\t* master的状态: S_DOWN(主观下线) O_DOWN(客观下线)\n\n\t\t* 服务器列表中选择备选的master的原则\n\t\t\t* 在线\n\t\t\t* 响应速度快\n\t\t\t* 优先原则(offset runid)\n* 哨兵的配置\n\t* 配置一拖二的主从结构\n\t* 配置三个哨兵(配置相同,端口号不同) sentinel.conf\n\t* 启动哨兵:   redis-sentinel sentinel-端口号.conf\n\n\n## 集群\n\n* redis提供的服务QPS可以达到10万/秒，当处理速度不够用或者内存不够用的时候考虑集群方案\n\n* 集群的作用\n\t* 分散单机服务器的访问压力，实现负载均衡\n\t* 分散单台服务器的存储压力，实现可扩展性\n\t* 降低单台服务器宕机带来的业务灾难\n\n* Redis集群结构设计\n\t* 数据存储设计\n\t\t* 通过算法设计，计算出key应该保存的位置\n\t\t* 将所有的存储空间分为16384份，每台主机保存一部分存储空间\n\t\t* 槽用于区分数据的存储空间\n\t\t* 增强可扩展性\n\t* 集群内部的通讯设计\n\t\t* 各个数据库相互通信，保存每个库中槽的编号数据\n\t\t* 一次命中直接返回\n\t\t* 一次未命中，告知具体位置\n\n* cluster配置\n\t* cluster-enabled yes   成为cluster结点\n\t* cluster-config-file  nodes-6379.conf\n\t* cluster-node-timeout 10000\n\t* cluster-migration-barrier <count>  master连接的slave的数量\n* cluster结点操作指令\n\t* cluster nodes     \t\t\t  查看集群结点信息\n\t* cluster replicate <master-id>   进入一个从节点redis，切换到其主节点\n\t* cluster meet ip:port            发现一个新节点，新增主节点\n\t* cluster forget<id>              忽略一个没有slot的结点\n\t* cluster failover \t\t\t\t  手动故障转移\n\n\t* redis-trib.rb create --replicas 1(连接master的slave个数) 127.0.0.1:6379(master结点的ip:port)\n\t* redis-cli -c (客户端连接的时候需要加上-c参数)\n\n# 企业级解决方案\n\n* 缓存预热\n\t- 缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免用户请求的时候，先查询数据库，然后再将数据缓存的情况，用户直接查询事先预热的缓存数据\n\t- 解决方案\n\t\t* 前期准备工作\n\t\t\t* 日常例行统计数据访问记录，统计访问频度较高的热点数据\n\t\t\t* 利用LRU数据删除策略，构建数据留存队列\n\t\t* 准备工作\n\t\t\t* 将统计结果中的数据分类，根据级别，redis优先加载级别高的热点数据\n\t\t\t* 利用分布式多服务器同时进行数据读取，加速数据加载过程\n\t\t* 实施\n\t\t\t* 使用脚本固定出发数据预热过程\n\t\t\t* 使用CDN(内容分发网络)\n* 缓存雪崩\n\t- 缓存雪崩是由于短时间范围内大量的key集中过期导致的\n\t- 解决方案(道)\n\t\t* 更多的页面静态处理\n\t\t* 构建多级缓存架构\n\t\t\tNginx缓存 + redis缓存 + ehcache缓存\n\t\t* 检查Mysql严重耗时业务进行优化\n\t\t* 灾难预警机制\n\t\t\t* 监控redis服务器性能指标\n\t\t\t\t* CPU占用和CPU使用率\n\t\t\t\t* 内存容量\n\t\t\t\t* 查询平均响应时间\n\t\t\t\t* 线程数\n\t\t* 限流、降级\n\t- 解决方案(术)\n\t\t* LRU和LFU切换(切换删除策略)\n\t\t* 数据有效期策略调整\n\t\t\t* 分类到期\n\t\t\t* 同类别下采用固定时间+随机值的形式，稀释集中到期的key的数量\n\t\t* 超热数据使用永久key\n\t\t* 定期维护\n\t\t* 加锁(慎用)\n* 缓存击穿\n\t- 缓存击穿是由单个高热的key过期导致的\n\t- 解决方案\n\t\t* 预先设定\n\t\t* 监控访问量，对自然流量激增的数据延长过期时间或设置为永久key\n\t\t* 后台刷新数据\n\t\t* 二级缓存, 设置不同的失效时间，保证数据不被同时淘汰\n\t\t* 加分布式锁，防止被击穿(慎用)\n\n* 缓存穿透\n\t- 缓存穿透是访问了不存在的数据，跳过了合法数据的redis缓存阶段，每次访问数据库，导致对数据库服务器造成压力\n\t- 解决方案\n\t\t* 白名单策略(使用布隆过滤器）\n\t- 实施监控\n\t- key加密\n\n* 性能指标监控\n\t- 性能指标\n\t\t* latency     \t\t\t\tRedis响应一个请求时间\n\t\t* instantaneous_os_per_sec  平均每秒处理请求总数\n\t\t* hit rate \t\t\t\t\t缓存命中率\n\t- 内存指标\n\t\t* used_memory \t\t\t\t已使用内存\n\t\t* mem_fragmentation_ratio \t内存碎片率\n\t\t* evicted_keys \t\t\t\t由于最大内存限制而被移除的key的数量\n\t\t* blocked_clients          \t\n\t- 基本活动指标\n\t- 持久化指标\n\t- 错误指标\n\t\t* rejected_connenctions   \t\t\t由于达到maxclient限制而被拒绝的连接数 \n\t\t* keyspace_misses \t\t\t\t\tkey值查找失败的次数\n\t\t* master_link_down_since_seconds  \t主从断开的持续时间\n* 压测工具(benchmark)\n\t- redis-benchmark [-h] [-p] [-c] [-n <requests>] [-k]\n\teg:\n\t\t* redis-benchmark    （默认开50个连接,10000次请求对应的性能）\n\t\t* redis-benchmark  -c 100 -n 5000       （-c 请求连接数 -n 请求次数） \n* 性能指标监控工具\n\t- monitor    打印服务器调试信息\n\t- slowlog    慢查询日志\n\t  * 命令\n\t\tslowlog [operator]\n\t\t\t* get:      获取慢查询日志\n\t\t\t* len：     获取慢查询日志条目数\n\t\t\t* reset: \t重置慢查询日志\n\t  * 配置\n\t\t* slowlog-log-slower-than 1000    设置慢查询的时间上限(单位: 微妙)\n\t\t* slow-max-len  100 \t\t\t  设置慢查询命令对应的日志显示长度\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\n\n","slug":"go/redis_cluster","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6d1000bf8wz7g729joi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h1><h2 id=\"redis主从复制\"><a href=\"#redis主从复制\" class=\"headerlink\" title=\"redis主从复制\"></a>redis主从复制</h2><ul>\n<li><p>为了避免单点redis服务器故障，准备多台服务器，将数据复制到多个副本保存在不同的服务器上，连接在一起，并且保证数据同步, 实现高可用, 并且实现数据冗余备份</p>\n</li>\n<li><p>多台服务器连接方案</p>\n<ul>\n<li>master(主服务器) 收集数据，负责写数据，并将数据同步到slave结点</li>\n<li>slave(从服务器)  从master接收数据并提供给用户(用户读数据从slave结点读)</li>\n<li>注意: 需要解决数据同步的问题，及将master的数据复制到slave中</li>\n</ul>\n</li>\n<li><p>主从复制就是将master中的数据即时、有效地复制到slave中(一个master拥有多个slave， 一个slave只能对应一个master)</p>\n</li>\n<li><p>职责分配</p>\n<ul>\n<li>master<ul>\n<li>写数据</li>\n<li>执行写操作时，将出现变化的数据自动同步到slave中</li>\n<li>读数据(可忽略)</li>\n</ul>\n</li>\n<li>slave<ul>\n<li>读数据</li>\n<li>禁止写数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主从复制的作用</p>\n<ul>\n<li>读写分离: master写、slave读、提高服务器的读写负载能力</li>\n<li>负载均衡: 基于主从结构，配合读写分离，由slave分担master负载，并根据需求变化，改变slave的数量<br>  ，通过从多个结点分担数据读取负载，大大提高redis服务器并发量和数据吞吐量</li>\n<li>故障恢复: mater出问题时， 由slave提供服务，实现快速故障恢复</li>\n<li>数据冗余: 实现数据热备份，是持久化之外的一种数据冗余方式</li>\n<li>高可用基石: 基于主从复制，构建哨兵模式和集群，实现redis的高可用方案</li>\n</ul>\n</li>\n<li><p>主从复制工作流程</p>\n<ul>\n<li><p>建立连接阶段(slave连接master)</p>\n<ul>\n<li><p>建立slave到master的连接，使得master能够识别slave，并保存slave的端口号</p>\n</li>\n<li><p>连接建立工作流程<br>  1、slave发送指令 : slaveof ip port   (将一台服务器变成另一台服务器的从服务器)<br>  2、master收到指令后，响应对方<br>  3、保存master的IP和端口:   masterhost  masterport<br>  4、根据保存的信息创建连接master的socket<br>  5、slave周期性的发送ping<br>  6、master回复pong<br>  7、slave发送身份校验指令: auth password<br>  8、master验证授权<br>  9、slave发送指令: replconflistening-port <port-number><br>  10、master保存slave的端口号</p>\n</li>\n<li><p>建立连接的方式<br>  1、客户端发送命令</p>\n<pre><code>  slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n<p>  2、启动服务器参数</p>\n<pre><code>  redis-server --slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n<p>  3、服务器配置(写在配置文件中)</p>\n<pre><code>  slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n</li>\n<li><p>断开连接的方式<br>  slaveof no one</p>\n</li>\n</ul>\n</li>\n<li><p>数据同步阶段</p>\n<ol>\n<li>slave发送指令 <code>psync2 ? -1</code> (? 代表runid -1 代表offset)</li>\n<li>master执行bgsave生成RDB文件，并记录offset</li>\n<li>发送 +FULLRESYNC runid offset<br>并将RDB文件通过socket发送给slave</li>\n<li>slave 保存runid和offset，并接收RDB，清空数据，执行RDB文件恢复过程(全量复制)</li>\n<li>发送命令 psync2 runid offset</li>\n<li>接收命令，判断runid是否匹配，并且offset是否在复制缓冲区中</li>\n<li>如果runid不匹配或者offset不在复制缓冲区中，再次执行全量复制</li>\n<li>如果runid匹配offset也在复制缓冲区中，检查两者保存的offset是否匹配，如果匹配说明是同步的</li>\n<li>如果不匹配则引发增量复制，发送 +CONTINUE offset</li>\n<li>保存offset, 并执行rewriteaof恢复数据</li>\n</ol>\n<ul>\n<li><p>请求同步数据 </p>\n</li>\n<li><p>创建RDB同步数据</p>\n</li>\n<li><p>恢复RDB同步数据</p>\n</li>\n<li><p>请求部分同步数据</p>\n</li>\n<li><p>恢复部分同步数据</p>\n</li>\n<li><p>注意: master端复制缓冲区大小设置不合理可能会导致数据溢出，可以更改: repl-backlog-size </p>\n</li>\n</ul>\n</li>\n<li><p>命令传播阶段</p>\n<ul>\n<li><p>命令传播阶段需要部分复制</p>\n</li>\n<li><p>部分复制的三个核心要素</p>\n<ul>\n<li>服务器的运行id(run id)<ul>\n<li>服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行ID</li>\n<li>运行ID是40位16进制字符</li>\n<li>运行ID被用于在服务器直接识别身份</li>\n<li>运行ID在每台服务器启动时自动生成，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID</li>\n</ul>\n</li>\n<li>主服务器的复制积压缓冲区<ul>\n<li>复制缓冲区用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令个记录下来，并存储在复制缓冲区</li>\n<li>复制缓冲区组成<ul>\n<li>偏移量</li>\n<li>字节值</li>\n<li>通过offset区分不同的slave当前数据传输的差异</li>\n<li>master记录已发送的信息对应的offset</li>\n<li>slave记录已接受的信息对应的offset</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>主从服务器的复制偏移量</li>\n</ul>\n</li>\n<li><p>心跳机制</p>\n<ul>\n<li>命令传播阶段，master和slave需要进行信息交换，使用心跳机制进行维护，需要双方连接保持在线</li>\n<li>master心跳:<ul>\n<li>指令: PING</li>\n<li>周期: repl-ping-slave-period(默认10秒)</li>\n<li>作用: 判断slave是否在线</li>\n<li>查询: INFO replication</li>\n</ul>\n</li>\n<li>slave心跳:<ul>\n<li>指令: REPLICONF ACK offset</li>\n<li>周期: 1s</li>\n<li>作用:<ul>\n<li>判断master是否在线</li>\n<li>汇报slave自身的复制偏移量，获取最新的数据变更指令</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><ul>\n<li><p>哨兵是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有的slave连接到master</p>\n</li>\n<li><p>哨兵的作用</p>\n<ul>\n<li><p>监控master和slave是否正常运行</p>\n<ul>\n<li>用于同步各个节点的状态信息: 包括sentinel、master和slave的状态</li>\n<li>几个sentinel内部发布订阅一个sentinel得到的master和slave的状态信息</li>\n</ul>\n</li>\n<li><p>通知(提醒) : 当被监控的服务器出现问题时，向其他(哨兵、客户端)发送通知</p>\n</li>\n<li><p>自动故障转移 : 断开master和slave连接，选取一个slave作为master，将其他slave连接到新的master上，并通知客户端新的服务器地址</p>\n<ul>\n<li><p>master的状态: S_DOWN(主观下线) O_DOWN(客观下线)</p>\n</li>\n<li><p>服务器列表中选择备选的master的原则</p>\n<ul>\n<li>在线</li>\n<li>响应速度快</li>\n<li>优先原则(offset runid)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>哨兵的配置</p>\n<ul>\n<li>配置一拖二的主从结构</li>\n<li>配置三个哨兵(配置相同,端口号不同) sentinel.conf</li>\n<li>启动哨兵:   redis-sentinel sentinel-端口号.conf</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><ul>\n<li><p>redis提供的服务QPS可以达到10万/秒，当处理速度不够用或者内存不够用的时候考虑集群方案</p>\n</li>\n<li><p>集群的作用</p>\n<ul>\n<li>分散单机服务器的访问压力，实现负载均衡</li>\n<li>分散单台服务器的存储压力，实现可扩展性</li>\n<li>降低单台服务器宕机带来的业务灾难</li>\n</ul>\n</li>\n<li><p>Redis集群结构设计</p>\n<ul>\n<li>数据存储设计<ul>\n<li>通过算法设计，计算出key应该保存的位置</li>\n<li>将所有的存储空间分为16384份，每台主机保存一部分存储空间</li>\n<li>槽用于区分数据的存储空间</li>\n<li>增强可扩展性</li>\n</ul>\n</li>\n<li>集群内部的通讯设计<ul>\n<li>各个数据库相互通信，保存每个库中槽的编号数据</li>\n<li>一次命中直接返回</li>\n<li>一次未命中，告知具体位置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cluster配置</p>\n<ul>\n<li>cluster-enabled yes   成为cluster结点</li>\n<li>cluster-config-file  nodes-6379.conf</li>\n<li>cluster-node-timeout 10000</li>\n<li>cluster-migration-barrier <count>  master连接的slave的数量</li>\n</ul>\n</li>\n<li><p>cluster结点操作指令</p>\n<ul>\n<li><p>cluster nodes                   查看集群结点信息</p>\n</li>\n<li><p>cluster replicate <master-id>   进入一个从节点redis，切换到其主节点</p>\n</li>\n<li><p>cluster meet ip:port            发现一个新节点，新增主节点</p>\n</li>\n<li><p>cluster forget<id>              忽略一个没有slot的结点</p>\n</li>\n<li><p>cluster failover                   手动故障转移</p>\n</li>\n<li><p>redis-trib.rb create –replicas 1(连接master的slave个数) 127.0.0.1:6379(master结点的ip:port)</p>\n</li>\n<li><p>redis-cli -c (客户端连接的时候需要加上-c参数)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"企业级解决方案\"><a href=\"#企业级解决方案\" class=\"headerlink\" title=\"企业级解决方案\"></a>企业级解决方案</h1><ul>\n<li><p>缓存预热</p>\n<ul>\n<li>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免用户请求的时候，先查询数据库，然后再将数据缓存的情况，用户直接查询事先预热的缓存数据</li>\n<li>解决方案<ul>\n<li>前期准备工作<ul>\n<li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li>\n<li>利用LRU数据删除策略，构建数据留存队列</li>\n</ul>\n</li>\n<li>准备工作<ul>\n<li>将统计结果中的数据分类，根据级别，redis优先加载级别高的热点数据</li>\n<li>利用分布式多服务器同时进行数据读取，加速数据加载过程</li>\n</ul>\n</li>\n<li>实施<ul>\n<li>使用脚本固定出发数据预热过程</li>\n<li>使用CDN(内容分发网络)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存雪崩</p>\n<ul>\n<li>缓存雪崩是由于短时间范围内大量的key集中过期导致的</li>\n<li>解决方案(道)<ul>\n<li>更多的页面静态处理</li>\n<li>构建多级缓存架构<br>  Nginx缓存 + redis缓存 + ehcache缓存</li>\n<li>检查Mysql严重耗时业务进行优化</li>\n<li>灾难预警机制<ul>\n<li>监控redis服务器性能指标<ul>\n<li>CPU占用和CPU使用率</li>\n<li>内存容量</li>\n<li>查询平均响应时间</li>\n<li>线程数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>限流、降级</li>\n</ul>\n</li>\n<li>解决方案(术)<ul>\n<li>LRU和LFU切换(切换删除策略)</li>\n<li>数据有效期策略调整<ul>\n<li>分类到期</li>\n<li>同类别下采用固定时间+随机值的形式，稀释集中到期的key的数量</li>\n</ul>\n</li>\n<li>超热数据使用永久key</li>\n<li>定期维护</li>\n<li>加锁(慎用)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存击穿</p>\n<ul>\n<li>缓存击穿是由单个高热的key过期导致的</li>\n<li>解决方案<ul>\n<li>预先设定</li>\n<li>监控访问量，对自然流量激增的数据延长过期时间或设置为永久key</li>\n<li>后台刷新数据</li>\n<li>二级缓存, 设置不同的失效时间，保证数据不被同时淘汰</li>\n<li>加分布式锁，防止被击穿(慎用)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存穿透</p>\n<ul>\n<li>缓存穿透是访问了不存在的数据，跳过了合法数据的redis缓存阶段，每次访问数据库，导致对数据库服务器造成压力</li>\n<li>解决方案<ul>\n<li>白名单策略(使用布隆过滤器）</li>\n</ul>\n</li>\n<li>实施监控</li>\n<li>key加密</li>\n</ul>\n</li>\n<li><p>性能指标监控</p>\n<ul>\n<li>性能指标<ul>\n<li>latency                     Redis响应一个请求时间</li>\n<li>instantaneous_os_per_sec  平均每秒处理请求总数</li>\n<li>hit rate                     缓存命中率</li>\n</ul>\n</li>\n<li>内存指标<ul>\n<li>used_memory                 已使用内存</li>\n<li>mem_fragmentation_ratio     内存碎片率</li>\n<li>evicted_keys                 由于最大内存限制而被移除的key的数量</li>\n<li>blocked_clients              </li>\n</ul>\n</li>\n<li>基本活动指标</li>\n<li>持久化指标</li>\n<li>错误指标<ul>\n<li>rejected_connenctions               由于达到maxclient限制而被拒绝的连接数 </li>\n<li>keyspace_misses                     key值查找失败的次数</li>\n<li>master_link_down_since_seconds      主从断开的持续时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>压测工具(benchmark)</p>\n<ul>\n<li>redis-benchmark [-h] [-p] [-c] [-n <requests>] [-k]<br>eg:<ul>\n<li>redis-benchmark    （默认开50个连接,10000次请求对应的性能）</li>\n<li>redis-benchmark  -c 100 -n 5000       （-c 请求连接数 -n 请求次数） </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>性能指标监控工具</p>\n<ul>\n<li>monitor    打印服务器调试信息</li>\n<li>slowlog    慢查询日志<ul>\n<li>命令<br>slowlog [operator]<pre><code>* get:      获取慢查询日志\n* len：     获取慢查询日志条目数\n* reset:     重置慢查询日志\n</code></pre>\n</li>\n<li>配置<ul>\n<li>slowlog-log-slower-than 1000    设置慢查询的时间上限(单位: 微妙)</li>\n<li>slow-max-len  100               设置慢查询命令对应的日志显示长度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h1><h2 id=\"redis主从复制\"><a href=\"#redis主从复制\" class=\"headerlink\" title=\"redis主从复制\"></a>redis主从复制</h2><ul>\n<li><p>为了避免单点redis服务器故障，准备多台服务器，将数据复制到多个副本保存在不同的服务器上，连接在一起，并且保证数据同步, 实现高可用, 并且实现数据冗余备份</p>\n</li>\n<li><p>多台服务器连接方案</p>\n<ul>\n<li>master(主服务器) 收集数据，负责写数据，并将数据同步到slave结点</li>\n<li>slave(从服务器)  从master接收数据并提供给用户(用户读数据从slave结点读)</li>\n<li>注意: 需要解决数据同步的问题，及将master的数据复制到slave中</li>\n</ul>\n</li>\n<li><p>主从复制就是将master中的数据即时、有效地复制到slave中(一个master拥有多个slave， 一个slave只能对应一个master)</p>\n</li>\n<li><p>职责分配</p>\n<ul>\n<li>master<ul>\n<li>写数据</li>\n<li>执行写操作时，将出现变化的数据自动同步到slave中</li>\n<li>读数据(可忽略)</li>\n</ul>\n</li>\n<li>slave<ul>\n<li>读数据</li>\n<li>禁止写数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主从复制的作用</p>\n<ul>\n<li>读写分离: master写、slave读、提高服务器的读写负载能力</li>\n<li>负载均衡: 基于主从结构，配合读写分离，由slave分担master负载，并根据需求变化，改变slave的数量<br>  ，通过从多个结点分担数据读取负载，大大提高redis服务器并发量和数据吞吐量</li>\n<li>故障恢复: mater出问题时， 由slave提供服务，实现快速故障恢复</li>\n<li>数据冗余: 实现数据热备份，是持久化之外的一种数据冗余方式</li>\n<li>高可用基石: 基于主从复制，构建哨兵模式和集群，实现redis的高可用方案</li>\n</ul>\n</li>\n<li><p>主从复制工作流程</p>\n<ul>\n<li><p>建立连接阶段(slave连接master)</p>\n<ul>\n<li><p>建立slave到master的连接，使得master能够识别slave，并保存slave的端口号</p>\n</li>\n<li><p>连接建立工作流程<br>  1、slave发送指令 : slaveof ip port   (将一台服务器变成另一台服务器的从服务器)<br>  2、master收到指令后，响应对方<br>  3、保存master的IP和端口:   masterhost  masterport<br>  4、根据保存的信息创建连接master的socket<br>  5、slave周期性的发送ping<br>  6、master回复pong<br>  7、slave发送身份校验指令: auth password<br>  8、master验证授权<br>  9、slave发送指令: replconflistening-port <port-number><br>  10、master保存slave的端口号</p>\n</li>\n<li><p>建立连接的方式<br>  1、客户端发送命令</p>\n<pre><code>  slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n<p>  2、启动服务器参数</p>\n<pre><code>  redis-server --slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n<p>  3、服务器配置(写在配置文件中)</p>\n<pre><code>  slaveof &lt;masterip&gt; &lt;masterport&gt;\n</code></pre>\n</li>\n<li><p>断开连接的方式<br>  slaveof no one</p>\n</li>\n</ul>\n</li>\n<li><p>数据同步阶段</p>\n<ol>\n<li>slave发送指令 <code>psync2 ? -1</code> (? 代表runid -1 代表offset)</li>\n<li>master执行bgsave生成RDB文件，并记录offset</li>\n<li>发送 +FULLRESYNC runid offset<br>并将RDB文件通过socket发送给slave</li>\n<li>slave 保存runid和offset，并接收RDB，清空数据，执行RDB文件恢复过程(全量复制)</li>\n<li>发送命令 psync2 runid offset</li>\n<li>接收命令，判断runid是否匹配，并且offset是否在复制缓冲区中</li>\n<li>如果runid不匹配或者offset不在复制缓冲区中，再次执行全量复制</li>\n<li>如果runid匹配offset也在复制缓冲区中，检查两者保存的offset是否匹配，如果匹配说明是同步的</li>\n<li>如果不匹配则引发增量复制，发送 +CONTINUE offset</li>\n<li>保存offset, 并执行rewriteaof恢复数据</li>\n</ol>\n<ul>\n<li><p>请求同步数据 </p>\n</li>\n<li><p>创建RDB同步数据</p>\n</li>\n<li><p>恢复RDB同步数据</p>\n</li>\n<li><p>请求部分同步数据</p>\n</li>\n<li><p>恢复部分同步数据</p>\n</li>\n<li><p>注意: master端复制缓冲区大小设置不合理可能会导致数据溢出，可以更改: repl-backlog-size </p>\n</li>\n</ul>\n</li>\n<li><p>命令传播阶段</p>\n<ul>\n<li><p>命令传播阶段需要部分复制</p>\n</li>\n<li><p>部分复制的三个核心要素</p>\n<ul>\n<li>服务器的运行id(run id)<ul>\n<li>服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行ID</li>\n<li>运行ID是40位16进制字符</li>\n<li>运行ID被用于在服务器直接识别身份</li>\n<li>运行ID在每台服务器启动时自动生成，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID</li>\n</ul>\n</li>\n<li>主服务器的复制积压缓冲区<ul>\n<li>复制缓冲区用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令个记录下来，并存储在复制缓冲区</li>\n<li>复制缓冲区组成<ul>\n<li>偏移量</li>\n<li>字节值</li>\n<li>通过offset区分不同的slave当前数据传输的差异</li>\n<li>master记录已发送的信息对应的offset</li>\n<li>slave记录已接受的信息对应的offset</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>主从服务器的复制偏移量</li>\n</ul>\n</li>\n<li><p>心跳机制</p>\n<ul>\n<li>命令传播阶段，master和slave需要进行信息交换，使用心跳机制进行维护，需要双方连接保持在线</li>\n<li>master心跳:<ul>\n<li>指令: PING</li>\n<li>周期: repl-ping-slave-period(默认10秒)</li>\n<li>作用: 判断slave是否在线</li>\n<li>查询: INFO replication</li>\n</ul>\n</li>\n<li>slave心跳:<ul>\n<li>指令: REPLICONF ACK offset</li>\n<li>周期: 1s</li>\n<li>作用:<ul>\n<li>判断master是否在线</li>\n<li>汇报slave自身的复制偏移量，获取最新的数据变更指令</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><ul>\n<li><p>哨兵是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有的slave连接到master</p>\n</li>\n<li><p>哨兵的作用</p>\n<ul>\n<li><p>监控master和slave是否正常运行</p>\n<ul>\n<li>用于同步各个节点的状态信息: 包括sentinel、master和slave的状态</li>\n<li>几个sentinel内部发布订阅一个sentinel得到的master和slave的状态信息</li>\n</ul>\n</li>\n<li><p>通知(提醒) : 当被监控的服务器出现问题时，向其他(哨兵、客户端)发送通知</p>\n</li>\n<li><p>自动故障转移 : 断开master和slave连接，选取一个slave作为master，将其他slave连接到新的master上，并通知客户端新的服务器地址</p>\n<ul>\n<li><p>master的状态: S_DOWN(主观下线) O_DOWN(客观下线)</p>\n</li>\n<li><p>服务器列表中选择备选的master的原则</p>\n<ul>\n<li>在线</li>\n<li>响应速度快</li>\n<li>优先原则(offset runid)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>哨兵的配置</p>\n<ul>\n<li>配置一拖二的主从结构</li>\n<li>配置三个哨兵(配置相同,端口号不同) sentinel.conf</li>\n<li>启动哨兵:   redis-sentinel sentinel-端口号.conf</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><ul>\n<li><p>redis提供的服务QPS可以达到10万/秒，当处理速度不够用或者内存不够用的时候考虑集群方案</p>\n</li>\n<li><p>集群的作用</p>\n<ul>\n<li>分散单机服务器的访问压力，实现负载均衡</li>\n<li>分散单台服务器的存储压力，实现可扩展性</li>\n<li>降低单台服务器宕机带来的业务灾难</li>\n</ul>\n</li>\n<li><p>Redis集群结构设计</p>\n<ul>\n<li>数据存储设计<ul>\n<li>通过算法设计，计算出key应该保存的位置</li>\n<li>将所有的存储空间分为16384份，每台主机保存一部分存储空间</li>\n<li>槽用于区分数据的存储空间</li>\n<li>增强可扩展性</li>\n</ul>\n</li>\n<li>集群内部的通讯设计<ul>\n<li>各个数据库相互通信，保存每个库中槽的编号数据</li>\n<li>一次命中直接返回</li>\n<li>一次未命中，告知具体位置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>cluster配置</p>\n<ul>\n<li>cluster-enabled yes   成为cluster结点</li>\n<li>cluster-config-file  nodes-6379.conf</li>\n<li>cluster-node-timeout 10000</li>\n<li>cluster-migration-barrier <count>  master连接的slave的数量</li>\n</ul>\n</li>\n<li><p>cluster结点操作指令</p>\n<ul>\n<li><p>cluster nodes                   查看集群结点信息</p>\n</li>\n<li><p>cluster replicate <master-id>   进入一个从节点redis，切换到其主节点</p>\n</li>\n<li><p>cluster meet ip:port            发现一个新节点，新增主节点</p>\n</li>\n<li><p>cluster forget<id>              忽略一个没有slot的结点</p>\n</li>\n<li><p>cluster failover                   手动故障转移</p>\n</li>\n<li><p>redis-trib.rb create –replicas 1(连接master的slave个数) 127.0.0.1:6379(master结点的ip:port)</p>\n</li>\n<li><p>redis-cli -c (客户端连接的时候需要加上-c参数)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"企业级解决方案\"><a href=\"#企业级解决方案\" class=\"headerlink\" title=\"企业级解决方案\"></a>企业级解决方案</h1><ul>\n<li><p>缓存预热</p>\n<ul>\n<li>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免用户请求的时候，先查询数据库，然后再将数据缓存的情况，用户直接查询事先预热的缓存数据</li>\n<li>解决方案<ul>\n<li>前期准备工作<ul>\n<li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li>\n<li>利用LRU数据删除策略，构建数据留存队列</li>\n</ul>\n</li>\n<li>准备工作<ul>\n<li>将统计结果中的数据分类，根据级别，redis优先加载级别高的热点数据</li>\n<li>利用分布式多服务器同时进行数据读取，加速数据加载过程</li>\n</ul>\n</li>\n<li>实施<ul>\n<li>使用脚本固定出发数据预热过程</li>\n<li>使用CDN(内容分发网络)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存雪崩</p>\n<ul>\n<li>缓存雪崩是由于短时间范围内大量的key集中过期导致的</li>\n<li>解决方案(道)<ul>\n<li>更多的页面静态处理</li>\n<li>构建多级缓存架构<br>  Nginx缓存 + redis缓存 + ehcache缓存</li>\n<li>检查Mysql严重耗时业务进行优化</li>\n<li>灾难预警机制<ul>\n<li>监控redis服务器性能指标<ul>\n<li>CPU占用和CPU使用率</li>\n<li>内存容量</li>\n<li>查询平均响应时间</li>\n<li>线程数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>限流、降级</li>\n</ul>\n</li>\n<li>解决方案(术)<ul>\n<li>LRU和LFU切换(切换删除策略)</li>\n<li>数据有效期策略调整<ul>\n<li>分类到期</li>\n<li>同类别下采用固定时间+随机值的形式，稀释集中到期的key的数量</li>\n</ul>\n</li>\n<li>超热数据使用永久key</li>\n<li>定期维护</li>\n<li>加锁(慎用)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存击穿</p>\n<ul>\n<li>缓存击穿是由单个高热的key过期导致的</li>\n<li>解决方案<ul>\n<li>预先设定</li>\n<li>监控访问量，对自然流量激增的数据延长过期时间或设置为永久key</li>\n<li>后台刷新数据</li>\n<li>二级缓存, 设置不同的失效时间，保证数据不被同时淘汰</li>\n<li>加分布式锁，防止被击穿(慎用)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存穿透</p>\n<ul>\n<li>缓存穿透是访问了不存在的数据，跳过了合法数据的redis缓存阶段，每次访问数据库，导致对数据库服务器造成压力</li>\n<li>解决方案<ul>\n<li>白名单策略(使用布隆过滤器）</li>\n</ul>\n</li>\n<li>实施监控</li>\n<li>key加密</li>\n</ul>\n</li>\n<li><p>性能指标监控</p>\n<ul>\n<li>性能指标<ul>\n<li>latency                     Redis响应一个请求时间</li>\n<li>instantaneous_os_per_sec  平均每秒处理请求总数</li>\n<li>hit rate                     缓存命中率</li>\n</ul>\n</li>\n<li>内存指标<ul>\n<li>used_memory                 已使用内存</li>\n<li>mem_fragmentation_ratio     内存碎片率</li>\n<li>evicted_keys                 由于最大内存限制而被移除的key的数量</li>\n<li>blocked_clients              </li>\n</ul>\n</li>\n<li>基本活动指标</li>\n<li>持久化指标</li>\n<li>错误指标<ul>\n<li>rejected_connenctions               由于达到maxclient限制而被拒绝的连接数 </li>\n<li>keyspace_misses                     key值查找失败的次数</li>\n<li>master_link_down_since_seconds      主从断开的持续时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>压测工具(benchmark)</p>\n<ul>\n<li>redis-benchmark [-h] [-p] [-c] [-n <requests>] [-k]<br>eg:<ul>\n<li>redis-benchmark    （默认开50个连接,10000次请求对应的性能）</li>\n<li>redis-benchmark  -c 100 -n 5000       （-c 请求连接数 -n 请求次数） </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>性能指标监控工具</p>\n<ul>\n<li>monitor    打印服务器调试信息</li>\n<li>slowlog    慢查询日志<ul>\n<li>命令<br>slowlog [operator]<pre><code>* get:      获取慢查询日志\n* len：     获取慢查询日志条目数\n* reset:     重置慢查询日志\n</code></pre>\n</li>\n<li>配置<ul>\n<li>slowlog-log-slower-than 1000    设置慢查询的时间上限(单位: 微妙)</li>\n<li>slow-max-len  100               设置慢查询命令对应的日志显示长度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Golang ORM工具","_content":"# gorm基本使用\n\nORM: object relational mapping 对象关系映射 (程序中的对象与关系型数据库之间的映射)\n\n数据表  <--->  结构体 <br/>\n数据行  <--->  结构体对象 <br/>\n字段    <--->  结构体字段 <br/>\n\n## gorm安装\n\n``` bash\ngo get -u \"github.com/jinzhu/gorm\"\n```\n\n## gorm连接数据库\n\n连接不同的数据库都需要导入对应数据的驱动程序，`GORM`已经贴心的为我们包装了一些驱动程序，只需要按如下方式导入需要的数据库驱动即可:\n\n``` go \nimport _ \"github.com/jinzhu/gorm/dialects/mysql\"\n// import _ \"github.com/jinzhu/gorm/dialects/postgres\"\n// import _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n// import _ \"github.com/jinzhu/gorm/dialects/mssql\"\n```\n\n* 连接mysql\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"mysql\", \"user:password@(localhost)/dbname?charset=utf8mb4&parseTime=True&loc=Local\")\n  defer db.Close()\n}\n```\n\n* 连接postgreSql\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/postgres\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"postgres\", \"host=myhost port=myport user=gorm dbname=gorm password=mypassword\")\n  defer db.Close()\n}\n```\n\n* 连接Sqlite3\n\n`Sqlite3`是一个文件数据库，需要指定文件路径\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"sqlite3\", \"/tmp/gorm.db\")\n  defer db.Close()\n}\n```\n\n* 连接SQL server\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/mssql\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"mssql\", \"sqlserver://username:password@localhost:1433?database=dbname\")\n  defer db.Close()\n}\n```\n\n## Docker快速创建mysql实例\n\n1. 首选拉取mysql镜像:\n``` bash\nsudo docker pull mysql\n```\n2. 在本地的`13306`端口运行一个名为`mysql8019`，`root`用户名， 密码为`root1234`的MySQL容器环境:\n``` bash\ndocker run --name mysql8019 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=cv11010216 -d mysql:8.0.19\n```\n3. 另外启动一个`MySQL Client`环境:\n``` bash\ndocker run -it --network host --rm mysql mysql -h127.0.0.1 -P3306 --default-character-set=utf8mb4 -uroot -p\n```\n\n## gorm操作mysql\n\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jinzhu/gorm\"\n)\nimport _ \"github.com/jinzhu/gorm/dialects/mysql\"\n\ntype UserInfo struct {\n\tID int\n\tName string\n\tGender string\n\tHobby string\n}\n\nfunc main() {\n\t//连接数据库\n\tdb, err := gorm.Open(\"mysql\", \"root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&parseTime=True\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\n\t//创建表 自动迁移(把结构体和数据表进行对应)\n\tdb.AutoMigrate(&UserInfo{})\n\n\t//创建数据行\n\tu1 := UserInfo{1, \"lijiahao\", \"male\", \"zhaozijin\"}\n\tdb.Create(&u1)\n\n\t//查询表中第一条数据\n\tvar u UserInfo\n\tvar uu UserInfo\n\tdb.First(&u)\n\tfmt.Printf(\"%#v\\n\", u)\n\tdb.Find(&uu, \"hoddy=?\", \"足球\")\n\tfmt.printf(\"%v\", uu)\n\n\t//更新\n\tdb.Model(&u).Update(\"bobby\", \"双色球\")\n\n\t//删除\n\tdb.Delete(&u)\n}\n```\n\n* gorm Model\n\n``` go \ntype User struct {\n\tgorm.Model\n\tName string\n\tAge sql.NullInt64 //零值类型\n\tBirthday *time.Time\n\tEmail string `gorm:\"type:varchar(120);unique_index\"`\n\tRole string `gorm:\"size:255\"`  //设置字段大小为255\n\tMemberNumber *string `gorm:\"unique;not null\"` //设置会员号唯一并不为空\n\tNum int `gorm:\"AUTO_INCREMENT\"` //设置num为自增类型\n\tAddress string \t`gorm:\"index:addr\"` //给address字段创建名为addr的索引\n\tIgnoreMe int `gorm:\"-\"` //忽略本字段\n\n}\n```\n\n* gorm.Model\n\n为了方便模型定义，GORM内置了一个`gorm.Model`结构体。`gorm.Model`是一个包含了`ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`四个字段的Golang结构体。\n\n``` go \n// gorm.Model 定义\ntype Model struct {\n  ID        uint `gorm:\"primary_key\"`\n  CreatedAt time.Time\n  UpdatedAt time.Time\n  DeletedAt *time.Time\n}\n```\n* 主键\n\nGORM 默认会使用名为ID的字段作为表的主键\n``` go \ntype User struct {\n  ID   string // 名为`ID`的字段会默认作为表的主键\n  Name string\n}\n\n// 使用`AnimalID`作为主键\ntype Animal struct {\n  AnimalID int64 `gorm:\"primary_key\"`\n  Name     string\n  Age      int64\n}\n```\n\n* 表名\n\n表名默认就是结构体名称的复数，例如:\n``` go \ntype User struct {} // 默认表名是 `users`\n\n// 将 User 的表名设置为 `profiles`\nfunc (User) TableName() string {\n  return \"profiles\"\n}\n\nfunc (u User) TableName() string {\n  if u.Role == \"admin\" {\n    return \"admin_users\"\n  } else {\n    return \"users\"\n  }\n}\n\n// 禁用默认表名的复数形式，如果置为 true，则 `User` 的默认表名是 `user`\ndb.SingularTable(true)\n```\n\n也可以通过`Table()`指定表名：\n\n``` go \n// 使用User结构体创建名为`deleted_users`的表\ndb.Table(\"deleted_users\").CreateTable(&User{})\n\nvar deleted_users []User\ndb.Table(\"deleted_users\").Find(&deleted_users)\n//// SELECT * FROM deleted_users;\n\ndb.Table(\"deleted_users\").Where(\"name = ?\", \"jinzhu\").Delete()\n//// DELETE FROM deleted_users WHERE name = 'jinzhu';\n```\n\nGORM还支持更改默认表名称规则：\n\n``` go\ngorm.DefaultTableNameHandler = func (db *gorm.DB, defaultTableName string) string  {\n  return \"sms_\" + defaultTableName;\n}\n```\n\n* 列名\n\n``` go \ntype User struct {\n  ID        uint      // column name is `id`\n  Name      string    // column name is `name`\n  Birthday  time.Time // column name is `birthday`\n  CreatedAt time.Time // column name is `created_at`\n}\n```\n\n可以使用结构体tag指定列名：\n\n``` go\ntype Animal struct {\n  AnimalId    int64     `gorm:\"column:beast_id\"`        \n  Birthday    time.Time `gorm:\"column:day_of_the_beast\"` \n  Age         int64     `gorm:\"column:age_of_the_beast\"`\n}\n```\n\n## gorm CRUD \n\n### <b>创建</b>\n\n``` go\npackage main\n\nimport \"github.com/jinzhu/gorm\"\nimport _\"github.com/jinzhu/gorm/dialects/mysql\"\n\n// 1. 定义模型\ntype Person struct {\n\tID int64\n\tName string `gorm:\"default:'小王子'\"` //通过tag字段定义默认值\n\tAge int64\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"mysql\", \"root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&parseTime=True\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\n\t//2. 把模型和数据库中的表对应起来\n\tdb.AutoMigrate(&Person{})\n\n\t//3. 创建记录\n\tu := Person{\n\t\tID: 1,\n\t\tAge: 17,\n\t}\n\t//使用NewRecord()判断主键是否存在，主键为空使用Create()创建主键\n\tprintln(db.NewRecord(&u))\n\tdb.Create(&u)\n\tprintln(db.NewRecord(&u))\n}\n```\n\n<font color=red>注意:</font>通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段。 在将记录插入到数据库后，Gorm会从数据库加载那些字段的默认值\n\n`eg:`\n\n``` go \nvar user = User{Name: \"\", Age: 99}\ndb.Create(&user)\n```\n\n<font color=red>注意:</font>上面代码实际执行的SQL语句是`INSERT INTO users(\"age\") values('99');`，排除了零值字段Name，而在数据库中这一条数据会使用设置的默认值小王子作为Name字段的值\n\n<font color=red>注意:</font>所有字段的零值, 比如0, \"\",false或者其它零值，都不会保存到数据库内，但会使用他们的默认值。 如果你想避免这种情况，可以考虑使用指针或实现 Scanner/Valuer接口，比如：\n\n(1). 使用指针方式实现零值存入:\n\n``` go \n// 使用指针\ntype User struct {\n  ID   int64\n  Name *string `gorm:\"default:'小王子'\"`\n  Age  int64\n}\nuser := User{Name: new(string), Age: 18))}\ndb.Create(&user)  // 此时数据库中该条记录name字段的值就是''\n```\n\n(2). 使用Scanner/Valuer接口方式实现零值存入数据库\n\n``` go \n// 使用 Scanner/Valuer\ntype User struct {\n\tID int64\n\tName sql.NullString `gorm:\"default:'小王子'\"` // sql.NullString 实现了Scanner/Valuer接口\n\tAge  int64\n}\nuser := User{Name: sql.NullString{\"\", true}, Age:18}\ndb.Create(&user)  // 此时数据库中该条记录name字段的值就是''\n```\n\n### <b>查询</b>\n\n* <b>一般查询</b>\n\n``` go \n// 根据主键查询第一条记录\ndb.First(&user)\n//// SELECT * FROM users ORDER BY id LIMIT 1;\n\n// 随机获取一条记录\ndb.Take(&user)\n//// SELECT * FROM users LIMIT 1;\n\n// 根据主键查询最后一条记录\ndb.Last(&user)\n//// SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\n// 查询所有的记录\ndb.Find(&users)\n//// SELECT * FROM users;\n\n// 查询指定的某条记录(仅当主键为整型时可用)\ndb.First(&user, 10)\n//// SELECT * FROM users WHERE id = 10;\n```\n\n* <b>where查询</b>\n\n``` go \n// Get first matched record\ndb.Where(\"name = ?\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu' limit 1;\n\n// Get all matched records\ndb.Where(\"name = ?\", \"jinzhu\").Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n\n// <>\ndb.Where(\"name <> ?\", \"jinzhu\").Find(&users)\n//// SELECT * FROM users WHERE name <> 'jinzhu';\n\n// IN\ndb.Where(\"name IN (?)\", []string{\"jinzhu\", \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name in ('jinzhu','jinzhu 2');\n\n// LIKE\ndb.Where(\"name LIKE ?\", \"%jin%\").Find(&users)\n//// SELECT * FROM users WHERE name LIKE '%jin%';\n\n// AND\ndb.Where(\"name = ? AND age >= ?\", \"jinzhu\", \"22\").Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' AND age >= 22;\n\n// Time\ndb.Where(\"updated_at > ?\", lastWeek).Find(&users)\n//// SELECT * FROM users WHERE updated_at > '2000-01-01 00:00:00';\n\n// BETWEEN\ndb.Where(\"created_at BETWEEN ? AND ?\", lastWeek, today).Find(&users)\n//// SELECT * FROM users WHERE created_at BETWEEN '2000-01-01 00:00:00' AND '2000-01-08 00:00:00';\n```\n\n* <b>Struct & Map查询</b>\n\n``` go \n// Struct\ndb.Where(&User{Name: \"jinzhu\", Age: 20}).First(&user)\n//// SELECT * FROM users WHERE name = \"jinzhu\" AND age = 20 LIMIT 1;\n\n// Map\ndb.Where(map[string]interface{}{\"name\": \"jinzhu\", \"age\": 20}).Find(&users)\n//// SELECT * FROM users WHERE name = \"jinzhu\" AND age = 20;\n\n// 主键的切片\ndb.Where([]int64{20, 21, 22}).Find(&users)\n//// SELECT * FROM users WHERE id IN (20, 21, 22);\n```\n\n<font color=red><b>提示:</b></font>当通过结构体进行查询时，GORM将会只通过非零值字段查询，这意味着如果你的字段值为0，''，false或者其他零值时，将不会被用于构建查询条件，例如：\n\n``` go\ndb.Where(&User{Name: \"jinzhu\", Age: 0}).Find(&users)\n//// SELECT * FROM users WHERE name = \"jinzhu\";\n```\n可以使用指针或实现 Scanner/Valuer 接口来避免这个问题:\n``` go \n// 使用指针\ntype User struct {\n  gorm.Model\n  Name string\n  Age  *int\n}\n\n// 使用 Scanner/Valuer\ntype User struct {\n  gorm.Model\n  Name string\n  Age  sql.NullInt64  // sql.NullInt64 实现了 Scanner/Valuer 接口\n}\n```\n\n* <b>Not条件<b/>\n\n``` go \ndb.Not(\"name\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE name <> \"jinzhu\" LIMIT 1;\n\n// Not In\ndb.Not(\"name\", []string{\"jinzhu\", \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name NOT IN (\"jinzhu\", \"jinzhu 2\");\n\n// Not In slice of primary keys\ndb.Not([]int64{1,2,3}).First(&user)\n//// SELECT * FROM users WHERE id NOT IN (1,2,3);\n\ndb.Not([]int64{}).First(&user)\n//// SELECT * FROM users;\n\n// Plain SQL\ndb.Not(\"name = ?\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE NOT(name = \"jinzhu\");\n\n// Struct\ndb.Not(User{Name: \"jinzhu\"}).First(&user)\n//// SELECT * FROM users WHERE name <> \"jinzhu\";\n```\n\n* <b>Or条件<b/>\n\n``` go \ndb.Where(\"role = ?\", \"admin\").Or(\"role = ?\", \"super_admin\").Find(&users)\n//// SELECT * FROM users WHERE role = 'admin' OR role = 'super_admin';\n\n// Struct\ndb.Where(\"name = 'jinzhu'\").Or(User{Name: \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';\n\n// Map\ndb.Where(\"name = 'jinzhu'\").Or(map[string]interface{}{\"name\": \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';\n```\n\n* <b>内联条件</b>\n\n当内联条件与多个立即执行方法一起使用时, 内联条件不会传递给后面的立即执行方法。\n\n``` go \n// 根据主键获取记录 (只适用于整形主键)\ndb.First(&user, 23)\n//// SELECT * FROM users WHERE id = 23 LIMIT 1;\n// 根据主键获取记录, 如果它是一个非整形主键\ndb.First(&user, \"id = ?\", \"string_primary_key\")\n//// SELECT * FROM users WHERE id = 'string_primary_key' LIMIT 1;\n\n// Plain SQL\ndb.Find(&user, \"name = ?\", \"jinzhu\")\n//// SELECT * FROM users WHERE name = \"jinzhu\";\n\ndb.Find(&users, \"name <> ? AND age > ?\", \"jinzhu\", 20)\n//// SELECT * FROM users WHERE name <> \"jinzhu\" AND age > 20;\n\n// Struct\ndb.Find(&users, User{Age: 20})\n//// SELECT * FROM users WHERE age = 20;\n\n// Map\ndb.Find(&users, map[string]interface{}{\"age\": 20})\n//// SELECT * FROM users WHERE age = 20;\n```\n\n* <b>额外查询选项</b>\n\n``` go \n// 为查询 SQL 添加额外的 SQL 操作\ndb.Set(\"gorm:query_option\", \"FOR UPDATE\").First(&user, 10)\n//// SELECT * FROM users WHERE id = 10 FOR UPDATE;\n```\n\n* <b>FirstOrCreate</b>\n\n获取匹配的第一条记录, 否则根据给定的条件创建一个新的记录 (仅支持 struct 和 map 条件)\n\n``` go \n// 未找到\ndb.FirstOrCreate(&user, User{Name: \"non_existing\"})\n//// INSERT INTO \"users\" (name) VALUES (\"non_existing\");\n//// user -> User{Id: 112, Name: \"non_existing\"}\n\n// 找到\ndb.Where(User{Name: \"Jinzhu\"}).FirstOrCreate(&user)\n//// user -> User{Id: 111, Name: \"Jinzhu\"}\n```\n\n* <b>Attrs</b>\n\n如果记录未找到，将使用参数创建 struct 和记录\n``` go\n // 未找到\ndb.Where(User{Name: \"non_existing\"}).Attrs(User{Age: 20}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'non_existing';\n//// INSERT INTO \"users\" (name, age) VALUES (\"non_existing\", 20);\n//// user -> User{Id: 112, Name: \"non_existing\", Age: 20}\n\n// 找到\ndb.Where(User{Name: \"jinzhu\"}).Attrs(User{Age: 30}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n//// user -> User{Id: 111, Name: \"jinzhu\", Age: 20}\n```\n\n* <b>Assign</b>\n\n不管记录是否找到，都将参数赋值给 struct 并保存至数据库\n``` go \n// 未找到\ndb.Where(User{Name: \"non_existing\"}).Assign(User{Age: 20}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'non_existing';\n//// INSERT INTO \"users\" (name, age) VALUES (\"non_existing\", 20);\n//// user -> User{Id: 112, Name: \"non_existing\", Age: 20}\n\n// 找到\ndb.Where(User{Name: \"jinzhu\"}).Assign(User{Age: 30}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n//// UPDATE users SET age=30 WHERE id = 111;\n//// user -> User{Id: 111, Name: \"jinzhu\", Age: 30}\n```\n\n* <b>子查询</b>\n\n基于 `*gorm.expr` 的子查询\n\n``` go\ndb.Where(\"amount > ?\", db.Table(\"orders\").Select(\"AVG(amount)\").Where(\"state = ?\", \"paid\").SubQuery()).Find(&orders)\n\n// SELECT * FROM \"orders\"  WHERE \"orders\".\"deleted_at\" IS NULL AND (amount > (SELECT AVG(amount) FROM \"orders\"  WHERE (state = 'paid')));\n```\n\n* <b>选择字段</b>\n\n`Select`指定你想从数据库中检索出的字段，默认会选择全部字段\n\n``` go \ndb.Select(\"name, age\").Find(&users)\n//// SELECT name, age FROM users;\n\ndb.Select([]string{\"name\", \"age\"}).Find(&users)\n//// SELECT name, age FROM users;\n\ndb.Table(\"users\").Select(\"COALESCE(age,?)\", 42).Rows()\n//// SELECT COALESCE(age,'42') FROM users;\n```\n\n* <b>排序</b>\n\nOrder，指定从数据库中检索出记录的顺序。设置第二个参数 reorder 为 true ，可以覆盖前面定义的排序条件\n\n``` go \ndb.Order(\"age desc, name\").Find(&users)\n//// SELECT * FROM users ORDER BY age desc, name;\n\n// 多字段排序\ndb.Order(\"age desc\").Order(\"name\").Find(&users)\n//// SELECT * FROM users ORDER BY age desc, name;\n\n// 覆盖排序\ndb.Order(\"age desc\").Find(&users1).Order(\"age\", true).Find(&users2)\n//// SELECT * FROM users ORDER BY age desc; (users1)\n//// SELECT * FROM users ORDER BY age; (users2)\n```\n\n* <b>数量</b>\n\nLimit，指定从数据库检索出的最大记录数\n\n``` go \ndb.Limit(3).Find(&users)\n//// SELECT * FROM users LIMIT 3;\n\n// -1 取消 Limit 条件\ndb.Limit(10).Find(&users1).Limit(-1).Find(&users2)\n//// SELECT * FROM users LIMIT 10; (users1)\n//// SELECT * FROM users; (users2)\n```\n\n* <b>偏移</b>\n\nOffset，指定开始返回记录前要跳过的记录数\n\n``` go \ndb.Offset(3).Find(&users)\n//// SELECT * FROM users OFFSET 3;\n\n// -1 取消 Offset 条件\ndb.Offset(10).Find(&users1).Offset(-1).Find(&users2)\n//// SELECT * FROM users OFFSET 10; (users1)\n//// SELECT * FROM users; (users2)\n```\n\n* <b>总数</b>\n\n``` go\ndb.Where(\"name = ?\", \"jinzhu\").Or(\"name = ?\", \"jinzhu 2\").Find(&users).Count(&count)\n//// SELECT * from USERS WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (users)\n//// SELECT count(*) FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (count)\n\ndb.Model(&User{}).Where(\"name = ?\", \"jinzhu\").Count(&count)\n//// SELECT count(*) FROM users WHERE name = 'jinzhu'; (count)\n\ndb.Table(\"deleted_users\").Count(&count)\n//// SELECT count(*) FROM deleted_users;\n\ndb.Table(\"deleted_users\").Select(\"count(distinct(name))\").Count(&count)\n//// SELECT count( distinct(name) ) FROM deleted_users; (count)\n```\n\n<font color=red><b>注意:</b></font>Count 必须是链式查询的最后一个操作 ，因为它会覆盖前面的 SELECT，但如果里面使用了 count 时不会覆盖\n\n* <b>Group & Having</b>\n\n``` go \nrows, err := db.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Rows()\nfor rows.Next() {\n  ...\n}\n\n// 使用Scan将多条结果扫描进事先准备好的结构体切片中\ntype Result struct {\n\tDate time.Time\n\tTotal int\n}\nvar rets []Result\ndb.Table(\"users\").Select(\"date(created_at) as date, sum(age) as total\").Group(\"date(created_at)\").Scan(&rets)\n\nrows, err := db.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Having(\"sum(amount) > ?\", 100).Rows()\nfor rows.Next() {\n  ...\n}\n\ntype Result struct {\n  Date  time.Time\n  Total int64\n}\ndb.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Having(\"sum(amount) > ?\", 100).Scan(&results)\n```\n\n* <b>连接</b>\n\n``` go \nrows, err := db.Table(\"users\").Select(\"users.name, emails.email\").Joins(\"left join emails on emails.user_id = users.id\").Rows()\nfor rows.Next() {\n  ...\n}\n\ndb.Table(\"users\").Select(\"users.name, emails.email\").Joins(\"left join emails on emails.user_id = users.id\").Scan(&results)\n\n// 多连接及参数\ndb.Joins(\"JOIN emails ON emails.user_id = users.id AND emails.email = ?\", \"jinzhu@example.org\").Joins(\"JOIN credit_cards ON credit_cards.user_id = users.id\").Where(\"credit_cards.number = ?\", \"411111111111\").Find(&user)\n```\n\n* <b>Pluck</b>\n\nPluck，查询`model`中的一个列作为切片，如果您想要查询多个列，您应该使用`Scan`\n``` go \nvar ages []int64\ndb.Find(&users).Pluck(\"age\", &ages)\n\nvar names []string\ndb.Model(&User{}).Pluck(\"name\", &names)\n\ndb.Table(\"deleted_users\").Pluck(\"name\", &names)\n\n// 想查询多个字段？ 这样做：\ndb.Select(\"name, age\").Find(&users)\n```\n\n* <b>Scan<b/>\n\n``` go \ntype Result struct {\n  Name string\n  Age  int\n}\n\nvar result Result\ndb.Table(\"users\").Select(\"name, age\").Where(\"name = ?\", \"Antonio\").Scan(&result)\n\nvar results []Result\ndb.Table(\"users\").Select(\"name, age\").Where(\"id > ?\", 0).Scan(&results)\n\n// 原生 SQL\ndb.Raw(\"SELECT name, age FROM users WHERE name = ?\", \"Antonio\").Scan(&result)\n```\n\n* <b>链式操作<b/>\n\n``` go \n// 创建一个查询\ntx := db.Where(\"name = ?\", \"jinzhu\")\n\n// 添加更多条件\nif someCondition {\n  tx = tx.Where(\"age = ?\", 20)\n} else {\n  tx = tx.Where(\"age = ?\", 30)\n}\n\nif yetAnotherCondition {\n  tx = tx.Where(\"active = ?\", 1)\n}\n```\n\n<font color=red><b>注意:<b/></font>在调用立即执行方法前不会生成Query语句，借助这个特性你可以创建一个函数来处理一些通用逻辑\n\n* <b>立即执行方法<b/>\n\n立即执行方法是指那些会立即生成SQL语句并发送到数据库的方法, 他们一般是CRUD方法，比如：\n`Create`, `First`, `Find`, `Take`, `Save`, `UpdateXXX`, `Delete`, `Scan`, `Row`, `Rows`…\n\n* <b>范围</b>\n\nScopes，Scope是建立在链式操作的基础之上的\n\n``` go\nfunc AmountGreaterThan1000(db *gorm.DB) *gorm.DB {\n  return db.Where(\"amount > ?\", 1000)\n}\n\nfunc PaidWithCreditCard(db *gorm.DB) *gorm.DB {\n  return db.Where(\"pay_mode_sign = ?\", \"C\")\n}\n\nfunc PaidWithCod(db *gorm.DB) *gorm.DB {\n  return db.Where(\"pay_mode_sign = ?\", \"C\")\n}\n\nfunc OrderStatus(status []string) func (db *gorm.DB) *gorm.DB {\n  return func (db *gorm.DB) *gorm.DB {\n    return db.Scopes(AmountGreaterThan1000).Where(\"status IN (?)\", status)\n  }\n}\n\ndb.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&orders)\n// 查找所有金额大于 1000 的信用卡订单\n\ndb.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&orders)\n// 查找所有金额大于 1000 的 COD 订单\n\ndb.Scopes(AmountGreaterThan1000, OrderStatus([]string{\"paid\", \"shipped\"})).Find(&orders)\n// 查找所有金额大于 1000 且已付款或者已发货的订单\n```\n\n* <b>多个立即执行方法</b>\n\n在GORM中使用多个立即执行方法时，后一个立即执行方法会复用前一个立即执行方法的条件 (不包括内联条件)\n\n``` go \ndb.Where(\"name LIKE ?\", \"jinzhu%\").Find(&users, \"id IN (?)\", []int{1, 2, 3}).Count(&count)\n```\n对应的sql语句:\n``` sql\nSELECT * FROM users WHERE name LIKE 'jinzhu%' AND id IN (1, 2, 3)\n\nSELECT count(*) FROM users WHERE name LIKE 'jinzhu%'\n```\n\n### <b>更新</b>\n\n* <b>更新所有字段</b>\n\n`Save()`默认会更新该对象的所有字段，即使你没有赋值\n``` go \ndb.First(&user)\n\nuser.Name = \"七米\"\nuser.Age = 99\ndb.Save(&user)\n\n////  UPDATE `users` SET `created_at` = '2020-02-16 12:52:20', `updated_at` = '2020-02-16 12:54:55', `deleted_at` = NULL, `name` = '七米', `age` = 99, `active` = true  WHERE `users`.`deleted_at` IS NULL AND `users`.`id` = 1\n```\n\n* <b>更新修改字段</b>\n\n如果你只希望更新指定字段，可以使用`Update`或者`Updates`\n\n``` go \n// 更新单个属性，如果它有变化\ndb.Model(&user).Update(\"name\", \"hello\")\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;\n\n// 根据给定的条件更新单个属性\ndb.Model(&user).Where(\"active = ?\", true).Update(\"name\", \"hello\")\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111 AND active=true;\n\n// 使用 map 更新多个属性，只会更新其中有变化的属性\ndb.Model(&user).Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET name='hello', age=18, active=false, updated_at='2013-11-17 21:34:10' WHERE id=111;\n\n// 使用 struct 更新多个属性，只会更新其中有变化且为非零值的字段\ndb.Model(&user).Updates(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18, updated_at = '2013-11-17 21:34:10' WHERE id = 111;\n\n// 警告：当使用 struct 更新时，GORM只会更新那些非零值的字段\n// 对于下面的操作，不会发生任何更新，\"\", 0, false 都是其类型的零值\ndb.Model(&user).Updates(User{Name: \"\", Age: 0, Active: false})\n```\n\n* <b>更新选定字段</b>\n\n如果你想更新或忽略某些字段，你可以使用`Select`，`Omit`\n\n``` go \ndb.Model(&user).Select(\"name\").Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;\n\ndb.Model(&user).Omit(\"name\").Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET age=18, active=false, updated_at='2013-11-17 21:34:10' WHERE id=111;\n```\n\n* <b>无Hooks更新</b>\n\n上面的更新操作会自动运行`model`的`BeforeUpdate`, `AfterUpdate`方法，更新`UpdatedAt`时间戳, 在更新时保存其`Associations`, 如果你不想调用这些方法，你可以使用`UpdateColumn`， `UpdateColumns`\n\n``` go \n// 更新单个属性，类似于 `Update`\ndb.Model(&user).UpdateColumn(\"name\", \"hello\")\n//// UPDATE users SET name='hello' WHERE id = 111;\n\n// 更新多个属性，类似于 `Updates`\ndb.Model(&user).UpdateColumns(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18 WHERE id = 111;\n```\n\n* <b>批量更新</b>\n\n批量更新时`Hooks(钩子函数)`不会运行\n\n``` go \ndb.Table(\"users\").Where(\"id IN (?)\", []int{10, 11}).Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18})\n//// UPDATE users SET name='hello', age=18 WHERE id IN (10, 11);\n\n// 使用 struct 更新时，只会更新非零值字段，若想更新所有字段，请使用map[string]interface{}\ndb.Model(User{}).Updates(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18;\n\n// 使用 `RowsAffected` 获取更新记录总数\ndb.Model(User{}).Updates(User{Name: \"hello\", Age: 18}).RowsAffected\n```\n\n* <b>使用sql表达式更新</b>\n\n先查询表中的第一条数据保存至user变量\n\n``` go \nvar user User\ndb.First(&user)\n```\n``` go \ndb.Model(&user).Update(\"age\", gorm.Expr(\"age * ? + ?\", 2, 100))\n//// UPDATE `users` SET `age` = age * 2 + 100, `updated_at` = '2020-02-16 13:10:20'  WHERE `users`.`id` = 1;\n\ndb.Model(&user).Updates(map[string]interface{}{\"age\": gorm.Expr(\"age * ? + ?\", 2, 100)})\n//// UPDATE \"users\" SET \"age\" = age * '2' + '100', \"updated_at\" = '2020-02-16 13:05:51' WHERE `users`.`id` = 1;\n\ndb.Model(&user).UpdateColumn(\"age\", gorm.Expr(\"age - ?\", 1))\n//// UPDATE \"users\" SET \"age\" = age - 1 WHERE \"id\" = '1';\n\ndb.Model(&user).Where(\"age > 10\").UpdateColumn(\"age\", gorm.Expr(\"age - ?\", 1))\n//// UPDATE \"users\" SET \"age\" = age - 1 WHERE \"id\" = '1' AND quantity > 10;\n```\n\n* <b>修改Hooks中的值</b>\n\n如果你想修改`BeforeUpdate`, `BeforeSave`等`Hooks`中更新的值，你可以使用 `scope.SetColumn`, 例如：\n\n``` go \nfunc (user *User) BeforeSave(scope *gorm.Scope) (err error) {\n  if pw, err := bcrypt.GenerateFromPassword(user.Password, 0); err == nil {\n    scope.SetColumn(\"EncryptedPassword\", pw)\n  }\n}\n```\n\n### <b>删除</b>\n\n* <b>删除记录</b>\n\n<font color=red><b>警告:</b></font> 删除记录时，请确保主键字段有值，GORM 会通过主键去删除记录，如果主键为空，GORM 会删除该 model 的所有记录。\n\n``` go \n// 删除现有记录\ndb.Delete(&email)\n//// DELETE from emails where id=10;\n\n// 为删除 SQL 添加额外的 SQL 操作\ndb.Set(\"gorm:delete_option\", \"OPTION (OPTIMIZE FOR UNKNOWN)\").Delete(&email)\n//// DELETE from emails where id=10 OPTION (OPTIMIZE FOR UNKNOWN);\n```\n\n* <b>批量删除</b>\n\n``` go \ndb.Where(\"email LIKE ?\", \"%jinzhu%\").Delete(Email{})\n//// DELETE from emails where email LIKE \"%jinzhu%\";\n\ndb.Delete(Email{}, \"email LIKE ?\", \"%jinzhu%\")\n//// DELETE from emails where email LIKE \"%jinzhu%\";\n```\n\n* <b>软删除</b>\n\n如果一个model有`DeletedAt`字段，他将自动获得软删除的功能！ 当调用`Delete`方法时， 记录不会真正的从数据库中被删除， 只会将`DeletedAt`字段的值会被设置为当前时间\n\n``` go \ndb.Delete(&user)\n//// UPDATE users SET deleted_at=\"2013-10-29 10:23\" WHERE id = 111;\n\n// 批量删除\ndb.Where(\"age = ?\", 20).Delete(&User{})\n//// UPDATE users SET deleted_at=\"2013-10-29 10:23\" WHERE age = 20;\n\n// 查询记录时会忽略被软删除的记录\ndb.Where(\"age = 20\").Find(&user)\n//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;\n\n// Unscoped 方法可以查询被软删除的记录\ndb.Unscoped().Where(\"age = 20\").Find(&users)\n//// SELECT * FROM users WHERE age = 20;\n```\n\n* <b>物理删除</b>\n\n``` go \n// Unscoped 方法可以物理删除记录\ndb.Unscoped().Delete(&order)\n//// DELETE FROM orders WHERE id=10;\n```\n","source":"_posts/go/go_gorm.md","raw":"---\ntitle: Golang ORM工具 \ncategories: \n- GolangStudy\n---\n# gorm基本使用\n\nORM: object relational mapping 对象关系映射 (程序中的对象与关系型数据库之间的映射)\n\n数据表  <--->  结构体 <br/>\n数据行  <--->  结构体对象 <br/>\n字段    <--->  结构体字段 <br/>\n\n## gorm安装\n\n``` bash\ngo get -u \"github.com/jinzhu/gorm\"\n```\n\n## gorm连接数据库\n\n连接不同的数据库都需要导入对应数据的驱动程序，`GORM`已经贴心的为我们包装了一些驱动程序，只需要按如下方式导入需要的数据库驱动即可:\n\n``` go \nimport _ \"github.com/jinzhu/gorm/dialects/mysql\"\n// import _ \"github.com/jinzhu/gorm/dialects/postgres\"\n// import _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n// import _ \"github.com/jinzhu/gorm/dialects/mssql\"\n```\n\n* 连接mysql\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"mysql\", \"user:password@(localhost)/dbname?charset=utf8mb4&parseTime=True&loc=Local\")\n  defer db.Close()\n}\n```\n\n* 连接postgreSql\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/postgres\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"postgres\", \"host=myhost port=myport user=gorm dbname=gorm password=mypassword\")\n  defer db.Close()\n}\n```\n\n* 连接Sqlite3\n\n`Sqlite3`是一个文件数据库，需要指定文件路径\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"sqlite3\", \"/tmp/gorm.db\")\n  defer db.Close()\n}\n```\n\n* 连接SQL server\n\n``` go\nimport (\n  \"github.com/jinzhu/gorm\"\n  _ \"github.com/jinzhu/gorm/dialects/mssql\"\n)\n\nfunc main() {\n  db, err := gorm.Open(\"mssql\", \"sqlserver://username:password@localhost:1433?database=dbname\")\n  defer db.Close()\n}\n```\n\n## Docker快速创建mysql实例\n\n1. 首选拉取mysql镜像:\n``` bash\nsudo docker pull mysql\n```\n2. 在本地的`13306`端口运行一个名为`mysql8019`，`root`用户名， 密码为`root1234`的MySQL容器环境:\n``` bash\ndocker run --name mysql8019 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=cv11010216 -d mysql:8.0.19\n```\n3. 另外启动一个`MySQL Client`环境:\n``` bash\ndocker run -it --network host --rm mysql mysql -h127.0.0.1 -P3306 --default-character-set=utf8mb4 -uroot -p\n```\n\n## gorm操作mysql\n\n``` go \npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jinzhu/gorm\"\n)\nimport _ \"github.com/jinzhu/gorm/dialects/mysql\"\n\ntype UserInfo struct {\n\tID int\n\tName string\n\tGender string\n\tHobby string\n}\n\nfunc main() {\n\t//连接数据库\n\tdb, err := gorm.Open(\"mysql\", \"root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&parseTime=True\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\n\t//创建表 自动迁移(把结构体和数据表进行对应)\n\tdb.AutoMigrate(&UserInfo{})\n\n\t//创建数据行\n\tu1 := UserInfo{1, \"lijiahao\", \"male\", \"zhaozijin\"}\n\tdb.Create(&u1)\n\n\t//查询表中第一条数据\n\tvar u UserInfo\n\tvar uu UserInfo\n\tdb.First(&u)\n\tfmt.Printf(\"%#v\\n\", u)\n\tdb.Find(&uu, \"hoddy=?\", \"足球\")\n\tfmt.printf(\"%v\", uu)\n\n\t//更新\n\tdb.Model(&u).Update(\"bobby\", \"双色球\")\n\n\t//删除\n\tdb.Delete(&u)\n}\n```\n\n* gorm Model\n\n``` go \ntype User struct {\n\tgorm.Model\n\tName string\n\tAge sql.NullInt64 //零值类型\n\tBirthday *time.Time\n\tEmail string `gorm:\"type:varchar(120);unique_index\"`\n\tRole string `gorm:\"size:255\"`  //设置字段大小为255\n\tMemberNumber *string `gorm:\"unique;not null\"` //设置会员号唯一并不为空\n\tNum int `gorm:\"AUTO_INCREMENT\"` //设置num为自增类型\n\tAddress string \t`gorm:\"index:addr\"` //给address字段创建名为addr的索引\n\tIgnoreMe int `gorm:\"-\"` //忽略本字段\n\n}\n```\n\n* gorm.Model\n\n为了方便模型定义，GORM内置了一个`gorm.Model`结构体。`gorm.Model`是一个包含了`ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`四个字段的Golang结构体。\n\n``` go \n// gorm.Model 定义\ntype Model struct {\n  ID        uint `gorm:\"primary_key\"`\n  CreatedAt time.Time\n  UpdatedAt time.Time\n  DeletedAt *time.Time\n}\n```\n* 主键\n\nGORM 默认会使用名为ID的字段作为表的主键\n``` go \ntype User struct {\n  ID   string // 名为`ID`的字段会默认作为表的主键\n  Name string\n}\n\n// 使用`AnimalID`作为主键\ntype Animal struct {\n  AnimalID int64 `gorm:\"primary_key\"`\n  Name     string\n  Age      int64\n}\n```\n\n* 表名\n\n表名默认就是结构体名称的复数，例如:\n``` go \ntype User struct {} // 默认表名是 `users`\n\n// 将 User 的表名设置为 `profiles`\nfunc (User) TableName() string {\n  return \"profiles\"\n}\n\nfunc (u User) TableName() string {\n  if u.Role == \"admin\" {\n    return \"admin_users\"\n  } else {\n    return \"users\"\n  }\n}\n\n// 禁用默认表名的复数形式，如果置为 true，则 `User` 的默认表名是 `user`\ndb.SingularTable(true)\n```\n\n也可以通过`Table()`指定表名：\n\n``` go \n// 使用User结构体创建名为`deleted_users`的表\ndb.Table(\"deleted_users\").CreateTable(&User{})\n\nvar deleted_users []User\ndb.Table(\"deleted_users\").Find(&deleted_users)\n//// SELECT * FROM deleted_users;\n\ndb.Table(\"deleted_users\").Where(\"name = ?\", \"jinzhu\").Delete()\n//// DELETE FROM deleted_users WHERE name = 'jinzhu';\n```\n\nGORM还支持更改默认表名称规则：\n\n``` go\ngorm.DefaultTableNameHandler = func (db *gorm.DB, defaultTableName string) string  {\n  return \"sms_\" + defaultTableName;\n}\n```\n\n* 列名\n\n``` go \ntype User struct {\n  ID        uint      // column name is `id`\n  Name      string    // column name is `name`\n  Birthday  time.Time // column name is `birthday`\n  CreatedAt time.Time // column name is `created_at`\n}\n```\n\n可以使用结构体tag指定列名：\n\n``` go\ntype Animal struct {\n  AnimalId    int64     `gorm:\"column:beast_id\"`        \n  Birthday    time.Time `gorm:\"column:day_of_the_beast\"` \n  Age         int64     `gorm:\"column:age_of_the_beast\"`\n}\n```\n\n## gorm CRUD \n\n### <b>创建</b>\n\n``` go\npackage main\n\nimport \"github.com/jinzhu/gorm\"\nimport _\"github.com/jinzhu/gorm/dialects/mysql\"\n\n// 1. 定义模型\ntype Person struct {\n\tID int64\n\tName string `gorm:\"default:'小王子'\"` //通过tag字段定义默认值\n\tAge int64\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"mysql\", \"root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&parseTime=True\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\n\t//2. 把模型和数据库中的表对应起来\n\tdb.AutoMigrate(&Person{})\n\n\t//3. 创建记录\n\tu := Person{\n\t\tID: 1,\n\t\tAge: 17,\n\t}\n\t//使用NewRecord()判断主键是否存在，主键为空使用Create()创建主键\n\tprintln(db.NewRecord(&u))\n\tdb.Create(&u)\n\tprintln(db.NewRecord(&u))\n}\n```\n\n<font color=red>注意:</font>通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段。 在将记录插入到数据库后，Gorm会从数据库加载那些字段的默认值\n\n`eg:`\n\n``` go \nvar user = User{Name: \"\", Age: 99}\ndb.Create(&user)\n```\n\n<font color=red>注意:</font>上面代码实际执行的SQL语句是`INSERT INTO users(\"age\") values('99');`，排除了零值字段Name，而在数据库中这一条数据会使用设置的默认值小王子作为Name字段的值\n\n<font color=red>注意:</font>所有字段的零值, 比如0, \"\",false或者其它零值，都不会保存到数据库内，但会使用他们的默认值。 如果你想避免这种情况，可以考虑使用指针或实现 Scanner/Valuer接口，比如：\n\n(1). 使用指针方式实现零值存入:\n\n``` go \n// 使用指针\ntype User struct {\n  ID   int64\n  Name *string `gorm:\"default:'小王子'\"`\n  Age  int64\n}\nuser := User{Name: new(string), Age: 18))}\ndb.Create(&user)  // 此时数据库中该条记录name字段的值就是''\n```\n\n(2). 使用Scanner/Valuer接口方式实现零值存入数据库\n\n``` go \n// 使用 Scanner/Valuer\ntype User struct {\n\tID int64\n\tName sql.NullString `gorm:\"default:'小王子'\"` // sql.NullString 实现了Scanner/Valuer接口\n\tAge  int64\n}\nuser := User{Name: sql.NullString{\"\", true}, Age:18}\ndb.Create(&user)  // 此时数据库中该条记录name字段的值就是''\n```\n\n### <b>查询</b>\n\n* <b>一般查询</b>\n\n``` go \n// 根据主键查询第一条记录\ndb.First(&user)\n//// SELECT * FROM users ORDER BY id LIMIT 1;\n\n// 随机获取一条记录\ndb.Take(&user)\n//// SELECT * FROM users LIMIT 1;\n\n// 根据主键查询最后一条记录\ndb.Last(&user)\n//// SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\n// 查询所有的记录\ndb.Find(&users)\n//// SELECT * FROM users;\n\n// 查询指定的某条记录(仅当主键为整型时可用)\ndb.First(&user, 10)\n//// SELECT * FROM users WHERE id = 10;\n```\n\n* <b>where查询</b>\n\n``` go \n// Get first matched record\ndb.Where(\"name = ?\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu' limit 1;\n\n// Get all matched records\ndb.Where(\"name = ?\", \"jinzhu\").Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n\n// <>\ndb.Where(\"name <> ?\", \"jinzhu\").Find(&users)\n//// SELECT * FROM users WHERE name <> 'jinzhu';\n\n// IN\ndb.Where(\"name IN (?)\", []string{\"jinzhu\", \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name in ('jinzhu','jinzhu 2');\n\n// LIKE\ndb.Where(\"name LIKE ?\", \"%jin%\").Find(&users)\n//// SELECT * FROM users WHERE name LIKE '%jin%';\n\n// AND\ndb.Where(\"name = ? AND age >= ?\", \"jinzhu\", \"22\").Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' AND age >= 22;\n\n// Time\ndb.Where(\"updated_at > ?\", lastWeek).Find(&users)\n//// SELECT * FROM users WHERE updated_at > '2000-01-01 00:00:00';\n\n// BETWEEN\ndb.Where(\"created_at BETWEEN ? AND ?\", lastWeek, today).Find(&users)\n//// SELECT * FROM users WHERE created_at BETWEEN '2000-01-01 00:00:00' AND '2000-01-08 00:00:00';\n```\n\n* <b>Struct & Map查询</b>\n\n``` go \n// Struct\ndb.Where(&User{Name: \"jinzhu\", Age: 20}).First(&user)\n//// SELECT * FROM users WHERE name = \"jinzhu\" AND age = 20 LIMIT 1;\n\n// Map\ndb.Where(map[string]interface{}{\"name\": \"jinzhu\", \"age\": 20}).Find(&users)\n//// SELECT * FROM users WHERE name = \"jinzhu\" AND age = 20;\n\n// 主键的切片\ndb.Where([]int64{20, 21, 22}).Find(&users)\n//// SELECT * FROM users WHERE id IN (20, 21, 22);\n```\n\n<font color=red><b>提示:</b></font>当通过结构体进行查询时，GORM将会只通过非零值字段查询，这意味着如果你的字段值为0，''，false或者其他零值时，将不会被用于构建查询条件，例如：\n\n``` go\ndb.Where(&User{Name: \"jinzhu\", Age: 0}).Find(&users)\n//// SELECT * FROM users WHERE name = \"jinzhu\";\n```\n可以使用指针或实现 Scanner/Valuer 接口来避免这个问题:\n``` go \n// 使用指针\ntype User struct {\n  gorm.Model\n  Name string\n  Age  *int\n}\n\n// 使用 Scanner/Valuer\ntype User struct {\n  gorm.Model\n  Name string\n  Age  sql.NullInt64  // sql.NullInt64 实现了 Scanner/Valuer 接口\n}\n```\n\n* <b>Not条件<b/>\n\n``` go \ndb.Not(\"name\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE name <> \"jinzhu\" LIMIT 1;\n\n// Not In\ndb.Not(\"name\", []string{\"jinzhu\", \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name NOT IN (\"jinzhu\", \"jinzhu 2\");\n\n// Not In slice of primary keys\ndb.Not([]int64{1,2,3}).First(&user)\n//// SELECT * FROM users WHERE id NOT IN (1,2,3);\n\ndb.Not([]int64{}).First(&user)\n//// SELECT * FROM users;\n\n// Plain SQL\ndb.Not(\"name = ?\", \"jinzhu\").First(&user)\n//// SELECT * FROM users WHERE NOT(name = \"jinzhu\");\n\n// Struct\ndb.Not(User{Name: \"jinzhu\"}).First(&user)\n//// SELECT * FROM users WHERE name <> \"jinzhu\";\n```\n\n* <b>Or条件<b/>\n\n``` go \ndb.Where(\"role = ?\", \"admin\").Or(\"role = ?\", \"super_admin\").Find(&users)\n//// SELECT * FROM users WHERE role = 'admin' OR role = 'super_admin';\n\n// Struct\ndb.Where(\"name = 'jinzhu'\").Or(User{Name: \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';\n\n// Map\ndb.Where(\"name = 'jinzhu'\").Or(map[string]interface{}{\"name\": \"jinzhu 2\"}).Find(&users)\n//// SELECT * FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2';\n```\n\n* <b>内联条件</b>\n\n当内联条件与多个立即执行方法一起使用时, 内联条件不会传递给后面的立即执行方法。\n\n``` go \n// 根据主键获取记录 (只适用于整形主键)\ndb.First(&user, 23)\n//// SELECT * FROM users WHERE id = 23 LIMIT 1;\n// 根据主键获取记录, 如果它是一个非整形主键\ndb.First(&user, \"id = ?\", \"string_primary_key\")\n//// SELECT * FROM users WHERE id = 'string_primary_key' LIMIT 1;\n\n// Plain SQL\ndb.Find(&user, \"name = ?\", \"jinzhu\")\n//// SELECT * FROM users WHERE name = \"jinzhu\";\n\ndb.Find(&users, \"name <> ? AND age > ?\", \"jinzhu\", 20)\n//// SELECT * FROM users WHERE name <> \"jinzhu\" AND age > 20;\n\n// Struct\ndb.Find(&users, User{Age: 20})\n//// SELECT * FROM users WHERE age = 20;\n\n// Map\ndb.Find(&users, map[string]interface{}{\"age\": 20})\n//// SELECT * FROM users WHERE age = 20;\n```\n\n* <b>额外查询选项</b>\n\n``` go \n// 为查询 SQL 添加额外的 SQL 操作\ndb.Set(\"gorm:query_option\", \"FOR UPDATE\").First(&user, 10)\n//// SELECT * FROM users WHERE id = 10 FOR UPDATE;\n```\n\n* <b>FirstOrCreate</b>\n\n获取匹配的第一条记录, 否则根据给定的条件创建一个新的记录 (仅支持 struct 和 map 条件)\n\n``` go \n// 未找到\ndb.FirstOrCreate(&user, User{Name: \"non_existing\"})\n//// INSERT INTO \"users\" (name) VALUES (\"non_existing\");\n//// user -> User{Id: 112, Name: \"non_existing\"}\n\n// 找到\ndb.Where(User{Name: \"Jinzhu\"}).FirstOrCreate(&user)\n//// user -> User{Id: 111, Name: \"Jinzhu\"}\n```\n\n* <b>Attrs</b>\n\n如果记录未找到，将使用参数创建 struct 和记录\n``` go\n // 未找到\ndb.Where(User{Name: \"non_existing\"}).Attrs(User{Age: 20}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'non_existing';\n//// INSERT INTO \"users\" (name, age) VALUES (\"non_existing\", 20);\n//// user -> User{Id: 112, Name: \"non_existing\", Age: 20}\n\n// 找到\ndb.Where(User{Name: \"jinzhu\"}).Attrs(User{Age: 30}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n//// user -> User{Id: 111, Name: \"jinzhu\", Age: 20}\n```\n\n* <b>Assign</b>\n\n不管记录是否找到，都将参数赋值给 struct 并保存至数据库\n``` go \n// 未找到\ndb.Where(User{Name: \"non_existing\"}).Assign(User{Age: 20}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'non_existing';\n//// INSERT INTO \"users\" (name, age) VALUES (\"non_existing\", 20);\n//// user -> User{Id: 112, Name: \"non_existing\", Age: 20}\n\n// 找到\ndb.Where(User{Name: \"jinzhu\"}).Assign(User{Age: 30}).FirstOrCreate(&user)\n//// SELECT * FROM users WHERE name = 'jinzhu';\n//// UPDATE users SET age=30 WHERE id = 111;\n//// user -> User{Id: 111, Name: \"jinzhu\", Age: 30}\n```\n\n* <b>子查询</b>\n\n基于 `*gorm.expr` 的子查询\n\n``` go\ndb.Where(\"amount > ?\", db.Table(\"orders\").Select(\"AVG(amount)\").Where(\"state = ?\", \"paid\").SubQuery()).Find(&orders)\n\n// SELECT * FROM \"orders\"  WHERE \"orders\".\"deleted_at\" IS NULL AND (amount > (SELECT AVG(amount) FROM \"orders\"  WHERE (state = 'paid')));\n```\n\n* <b>选择字段</b>\n\n`Select`指定你想从数据库中检索出的字段，默认会选择全部字段\n\n``` go \ndb.Select(\"name, age\").Find(&users)\n//// SELECT name, age FROM users;\n\ndb.Select([]string{\"name\", \"age\"}).Find(&users)\n//// SELECT name, age FROM users;\n\ndb.Table(\"users\").Select(\"COALESCE(age,?)\", 42).Rows()\n//// SELECT COALESCE(age,'42') FROM users;\n```\n\n* <b>排序</b>\n\nOrder，指定从数据库中检索出记录的顺序。设置第二个参数 reorder 为 true ，可以覆盖前面定义的排序条件\n\n``` go \ndb.Order(\"age desc, name\").Find(&users)\n//// SELECT * FROM users ORDER BY age desc, name;\n\n// 多字段排序\ndb.Order(\"age desc\").Order(\"name\").Find(&users)\n//// SELECT * FROM users ORDER BY age desc, name;\n\n// 覆盖排序\ndb.Order(\"age desc\").Find(&users1).Order(\"age\", true).Find(&users2)\n//// SELECT * FROM users ORDER BY age desc; (users1)\n//// SELECT * FROM users ORDER BY age; (users2)\n```\n\n* <b>数量</b>\n\nLimit，指定从数据库检索出的最大记录数\n\n``` go \ndb.Limit(3).Find(&users)\n//// SELECT * FROM users LIMIT 3;\n\n// -1 取消 Limit 条件\ndb.Limit(10).Find(&users1).Limit(-1).Find(&users2)\n//// SELECT * FROM users LIMIT 10; (users1)\n//// SELECT * FROM users; (users2)\n```\n\n* <b>偏移</b>\n\nOffset，指定开始返回记录前要跳过的记录数\n\n``` go \ndb.Offset(3).Find(&users)\n//// SELECT * FROM users OFFSET 3;\n\n// -1 取消 Offset 条件\ndb.Offset(10).Find(&users1).Offset(-1).Find(&users2)\n//// SELECT * FROM users OFFSET 10; (users1)\n//// SELECT * FROM users; (users2)\n```\n\n* <b>总数</b>\n\n``` go\ndb.Where(\"name = ?\", \"jinzhu\").Or(\"name = ?\", \"jinzhu 2\").Find(&users).Count(&count)\n//// SELECT * from USERS WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (users)\n//// SELECT count(*) FROM users WHERE name = 'jinzhu' OR name = 'jinzhu 2'; (count)\n\ndb.Model(&User{}).Where(\"name = ?\", \"jinzhu\").Count(&count)\n//// SELECT count(*) FROM users WHERE name = 'jinzhu'; (count)\n\ndb.Table(\"deleted_users\").Count(&count)\n//// SELECT count(*) FROM deleted_users;\n\ndb.Table(\"deleted_users\").Select(\"count(distinct(name))\").Count(&count)\n//// SELECT count( distinct(name) ) FROM deleted_users; (count)\n```\n\n<font color=red><b>注意:</b></font>Count 必须是链式查询的最后一个操作 ，因为它会覆盖前面的 SELECT，但如果里面使用了 count 时不会覆盖\n\n* <b>Group & Having</b>\n\n``` go \nrows, err := db.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Rows()\nfor rows.Next() {\n  ...\n}\n\n// 使用Scan将多条结果扫描进事先准备好的结构体切片中\ntype Result struct {\n\tDate time.Time\n\tTotal int\n}\nvar rets []Result\ndb.Table(\"users\").Select(\"date(created_at) as date, sum(age) as total\").Group(\"date(created_at)\").Scan(&rets)\n\nrows, err := db.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Having(\"sum(amount) > ?\", 100).Rows()\nfor rows.Next() {\n  ...\n}\n\ntype Result struct {\n  Date  time.Time\n  Total int64\n}\ndb.Table(\"orders\").Select(\"date(created_at) as date, sum(amount) as total\").Group(\"date(created_at)\").Having(\"sum(amount) > ?\", 100).Scan(&results)\n```\n\n* <b>连接</b>\n\n``` go \nrows, err := db.Table(\"users\").Select(\"users.name, emails.email\").Joins(\"left join emails on emails.user_id = users.id\").Rows()\nfor rows.Next() {\n  ...\n}\n\ndb.Table(\"users\").Select(\"users.name, emails.email\").Joins(\"left join emails on emails.user_id = users.id\").Scan(&results)\n\n// 多连接及参数\ndb.Joins(\"JOIN emails ON emails.user_id = users.id AND emails.email = ?\", \"jinzhu@example.org\").Joins(\"JOIN credit_cards ON credit_cards.user_id = users.id\").Where(\"credit_cards.number = ?\", \"411111111111\").Find(&user)\n```\n\n* <b>Pluck</b>\n\nPluck，查询`model`中的一个列作为切片，如果您想要查询多个列，您应该使用`Scan`\n``` go \nvar ages []int64\ndb.Find(&users).Pluck(\"age\", &ages)\n\nvar names []string\ndb.Model(&User{}).Pluck(\"name\", &names)\n\ndb.Table(\"deleted_users\").Pluck(\"name\", &names)\n\n// 想查询多个字段？ 这样做：\ndb.Select(\"name, age\").Find(&users)\n```\n\n* <b>Scan<b/>\n\n``` go \ntype Result struct {\n  Name string\n  Age  int\n}\n\nvar result Result\ndb.Table(\"users\").Select(\"name, age\").Where(\"name = ?\", \"Antonio\").Scan(&result)\n\nvar results []Result\ndb.Table(\"users\").Select(\"name, age\").Where(\"id > ?\", 0).Scan(&results)\n\n// 原生 SQL\ndb.Raw(\"SELECT name, age FROM users WHERE name = ?\", \"Antonio\").Scan(&result)\n```\n\n* <b>链式操作<b/>\n\n``` go \n// 创建一个查询\ntx := db.Where(\"name = ?\", \"jinzhu\")\n\n// 添加更多条件\nif someCondition {\n  tx = tx.Where(\"age = ?\", 20)\n} else {\n  tx = tx.Where(\"age = ?\", 30)\n}\n\nif yetAnotherCondition {\n  tx = tx.Where(\"active = ?\", 1)\n}\n```\n\n<font color=red><b>注意:<b/></font>在调用立即执行方法前不会生成Query语句，借助这个特性你可以创建一个函数来处理一些通用逻辑\n\n* <b>立即执行方法<b/>\n\n立即执行方法是指那些会立即生成SQL语句并发送到数据库的方法, 他们一般是CRUD方法，比如：\n`Create`, `First`, `Find`, `Take`, `Save`, `UpdateXXX`, `Delete`, `Scan`, `Row`, `Rows`…\n\n* <b>范围</b>\n\nScopes，Scope是建立在链式操作的基础之上的\n\n``` go\nfunc AmountGreaterThan1000(db *gorm.DB) *gorm.DB {\n  return db.Where(\"amount > ?\", 1000)\n}\n\nfunc PaidWithCreditCard(db *gorm.DB) *gorm.DB {\n  return db.Where(\"pay_mode_sign = ?\", \"C\")\n}\n\nfunc PaidWithCod(db *gorm.DB) *gorm.DB {\n  return db.Where(\"pay_mode_sign = ?\", \"C\")\n}\n\nfunc OrderStatus(status []string) func (db *gorm.DB) *gorm.DB {\n  return func (db *gorm.DB) *gorm.DB {\n    return db.Scopes(AmountGreaterThan1000).Where(\"status IN (?)\", status)\n  }\n}\n\ndb.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&orders)\n// 查找所有金额大于 1000 的信用卡订单\n\ndb.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&orders)\n// 查找所有金额大于 1000 的 COD 订单\n\ndb.Scopes(AmountGreaterThan1000, OrderStatus([]string{\"paid\", \"shipped\"})).Find(&orders)\n// 查找所有金额大于 1000 且已付款或者已发货的订单\n```\n\n* <b>多个立即执行方法</b>\n\n在GORM中使用多个立即执行方法时，后一个立即执行方法会复用前一个立即执行方法的条件 (不包括内联条件)\n\n``` go \ndb.Where(\"name LIKE ?\", \"jinzhu%\").Find(&users, \"id IN (?)\", []int{1, 2, 3}).Count(&count)\n```\n对应的sql语句:\n``` sql\nSELECT * FROM users WHERE name LIKE 'jinzhu%' AND id IN (1, 2, 3)\n\nSELECT count(*) FROM users WHERE name LIKE 'jinzhu%'\n```\n\n### <b>更新</b>\n\n* <b>更新所有字段</b>\n\n`Save()`默认会更新该对象的所有字段，即使你没有赋值\n``` go \ndb.First(&user)\n\nuser.Name = \"七米\"\nuser.Age = 99\ndb.Save(&user)\n\n////  UPDATE `users` SET `created_at` = '2020-02-16 12:52:20', `updated_at` = '2020-02-16 12:54:55', `deleted_at` = NULL, `name` = '七米', `age` = 99, `active` = true  WHERE `users`.`deleted_at` IS NULL AND `users`.`id` = 1\n```\n\n* <b>更新修改字段</b>\n\n如果你只希望更新指定字段，可以使用`Update`或者`Updates`\n\n``` go \n// 更新单个属性，如果它有变化\ndb.Model(&user).Update(\"name\", \"hello\")\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;\n\n// 根据给定的条件更新单个属性\ndb.Model(&user).Where(\"active = ?\", true).Update(\"name\", \"hello\")\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111 AND active=true;\n\n// 使用 map 更新多个属性，只会更新其中有变化的属性\ndb.Model(&user).Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET name='hello', age=18, active=false, updated_at='2013-11-17 21:34:10' WHERE id=111;\n\n// 使用 struct 更新多个属性，只会更新其中有变化且为非零值的字段\ndb.Model(&user).Updates(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18, updated_at = '2013-11-17 21:34:10' WHERE id = 111;\n\n// 警告：当使用 struct 更新时，GORM只会更新那些非零值的字段\n// 对于下面的操作，不会发生任何更新，\"\", 0, false 都是其类型的零值\ndb.Model(&user).Updates(User{Name: \"\", Age: 0, Active: false})\n```\n\n* <b>更新选定字段</b>\n\n如果你想更新或忽略某些字段，你可以使用`Select`，`Omit`\n\n``` go \ndb.Model(&user).Select(\"name\").Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=111;\n\ndb.Model(&user).Omit(\"name\").Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18, \"active\": false})\n//// UPDATE users SET age=18, active=false, updated_at='2013-11-17 21:34:10' WHERE id=111;\n```\n\n* <b>无Hooks更新</b>\n\n上面的更新操作会自动运行`model`的`BeforeUpdate`, `AfterUpdate`方法，更新`UpdatedAt`时间戳, 在更新时保存其`Associations`, 如果你不想调用这些方法，你可以使用`UpdateColumn`， `UpdateColumns`\n\n``` go \n// 更新单个属性，类似于 `Update`\ndb.Model(&user).UpdateColumn(\"name\", \"hello\")\n//// UPDATE users SET name='hello' WHERE id = 111;\n\n// 更新多个属性，类似于 `Updates`\ndb.Model(&user).UpdateColumns(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18 WHERE id = 111;\n```\n\n* <b>批量更新</b>\n\n批量更新时`Hooks(钩子函数)`不会运行\n\n``` go \ndb.Table(\"users\").Where(\"id IN (?)\", []int{10, 11}).Updates(map[string]interface{}{\"name\": \"hello\", \"age\": 18})\n//// UPDATE users SET name='hello', age=18 WHERE id IN (10, 11);\n\n// 使用 struct 更新时，只会更新非零值字段，若想更新所有字段，请使用map[string]interface{}\ndb.Model(User{}).Updates(User{Name: \"hello\", Age: 18})\n//// UPDATE users SET name='hello', age=18;\n\n// 使用 `RowsAffected` 获取更新记录总数\ndb.Model(User{}).Updates(User{Name: \"hello\", Age: 18}).RowsAffected\n```\n\n* <b>使用sql表达式更新</b>\n\n先查询表中的第一条数据保存至user变量\n\n``` go \nvar user User\ndb.First(&user)\n```\n``` go \ndb.Model(&user).Update(\"age\", gorm.Expr(\"age * ? + ?\", 2, 100))\n//// UPDATE `users` SET `age` = age * 2 + 100, `updated_at` = '2020-02-16 13:10:20'  WHERE `users`.`id` = 1;\n\ndb.Model(&user).Updates(map[string]interface{}{\"age\": gorm.Expr(\"age * ? + ?\", 2, 100)})\n//// UPDATE \"users\" SET \"age\" = age * '2' + '100', \"updated_at\" = '2020-02-16 13:05:51' WHERE `users`.`id` = 1;\n\ndb.Model(&user).UpdateColumn(\"age\", gorm.Expr(\"age - ?\", 1))\n//// UPDATE \"users\" SET \"age\" = age - 1 WHERE \"id\" = '1';\n\ndb.Model(&user).Where(\"age > 10\").UpdateColumn(\"age\", gorm.Expr(\"age - ?\", 1))\n//// UPDATE \"users\" SET \"age\" = age - 1 WHERE \"id\" = '1' AND quantity > 10;\n```\n\n* <b>修改Hooks中的值</b>\n\n如果你想修改`BeforeUpdate`, `BeforeSave`等`Hooks`中更新的值，你可以使用 `scope.SetColumn`, 例如：\n\n``` go \nfunc (user *User) BeforeSave(scope *gorm.Scope) (err error) {\n  if pw, err := bcrypt.GenerateFromPassword(user.Password, 0); err == nil {\n    scope.SetColumn(\"EncryptedPassword\", pw)\n  }\n}\n```\n\n### <b>删除</b>\n\n* <b>删除记录</b>\n\n<font color=red><b>警告:</b></font> 删除记录时，请确保主键字段有值，GORM 会通过主键去删除记录，如果主键为空，GORM 会删除该 model 的所有记录。\n\n``` go \n// 删除现有记录\ndb.Delete(&email)\n//// DELETE from emails where id=10;\n\n// 为删除 SQL 添加额外的 SQL 操作\ndb.Set(\"gorm:delete_option\", \"OPTION (OPTIMIZE FOR UNKNOWN)\").Delete(&email)\n//// DELETE from emails where id=10 OPTION (OPTIMIZE FOR UNKNOWN);\n```\n\n* <b>批量删除</b>\n\n``` go \ndb.Where(\"email LIKE ?\", \"%jinzhu%\").Delete(Email{})\n//// DELETE from emails where email LIKE \"%jinzhu%\";\n\ndb.Delete(Email{}, \"email LIKE ?\", \"%jinzhu%\")\n//// DELETE from emails where email LIKE \"%jinzhu%\";\n```\n\n* <b>软删除</b>\n\n如果一个model有`DeletedAt`字段，他将自动获得软删除的功能！ 当调用`Delete`方法时， 记录不会真正的从数据库中被删除， 只会将`DeletedAt`字段的值会被设置为当前时间\n\n``` go \ndb.Delete(&user)\n//// UPDATE users SET deleted_at=\"2013-10-29 10:23\" WHERE id = 111;\n\n// 批量删除\ndb.Where(\"age = ?\", 20).Delete(&User{})\n//// UPDATE users SET deleted_at=\"2013-10-29 10:23\" WHERE age = 20;\n\n// 查询记录时会忽略被软删除的记录\ndb.Where(\"age = 20\").Find(&user)\n//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;\n\n// Unscoped 方法可以查询被软删除的记录\ndb.Unscoped().Where(\"age = 20\").Find(&users)\n//// SELECT * FROM users WHERE age = 20;\n```\n\n* <b>物理删除</b>\n\n``` go \n// Unscoped 方法可以物理删除记录\ndb.Unscoped().Delete(&order)\n//// DELETE FROM orders WHERE id=10;\n```\n","slug":"go/go_gorm","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6e4000cf8wzhrmw9i2t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"gorm基本使用\"><a href=\"#gorm基本使用\" class=\"headerlink\" title=\"gorm基本使用\"></a>gorm基本使用</h1><p>ORM: object relational mapping 对象关系映射 (程序中的对象与关系型数据库之间的映射)</p>\n<p>数据表  &lt;—&gt;  结构体 <br/><br>数据行  &lt;—&gt;  结构体对象 <br/><br>字段    &lt;—&gt;  结构体字段 <br/></p>\n<h2 id=\"gorm安装\"><a href=\"#gorm安装\" class=\"headerlink\" title=\"gorm安装\"></a>gorm安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gorm连接数据库\"><a href=\"#gorm连接数据库\" class=\"headerlink\" title=\"gorm连接数据库\"></a>gorm连接数据库</h2><p>连接不同的数据库都需要导入对应数据的驱动程序，<code>GORM</code>已经贴心的为我们包装了一些驱动程序，只需要按如下方式导入需要的数据库驱动即可:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接mysql</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;user:password@(localhost)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接postgreSql</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;postgres&quot;</span>, <span class=\"string\">&quot;host=myhost port=myport user=gorm dbname=gorm password=mypassword&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接Sqlite3</li>\n</ul>\n<p><code>Sqlite3</code>是一个文件数据库，需要指定文件路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;sqlite3&quot;</span>, <span class=\"string\">&quot;/tmp/gorm.db&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接SQL server</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;mssql&quot;</span>, <span class=\"string\">&quot;sqlserver://username:password@localhost:1433?database=dbname&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker快速创建mysql实例\"><a href=\"#Docker快速创建mysql实例\" class=\"headerlink\" title=\"Docker快速创建mysql实例\"></a>Docker快速创建mysql实例</h2><ol>\n<li>首选拉取mysql镜像:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql</span><br></pre></td></tr></table></figure></li>\n<li>在本地的<code>13306</code>端口运行一个名为<code>mysql8019</code>，<code>root</code>用户名， 密码为<code>root1234</code>的MySQL容器环境:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql8019 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=cv11010216 -d mysql:8.0.19</span><br></pre></td></tr></table></figure></li>\n<li>另外启动一个<code>MySQL Client</code>环境:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --network host --<span class=\"built_in\">rm</span> mysql mysql -h127.0.0.1 -P3306 --default-character-set=utf8mb4 -uroot -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"gorm操作mysql\"><a href=\"#gorm操作mysql\" class=\"headerlink\" title=\"gorm操作mysql\"></a>gorm操作mysql</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tGender <span class=\"type\">string</span></span><br><span class=\"line\">\tHobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&amp;parseTime=True&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建表 自动迁移(把结构体和数据表进行对应)</span></span><br><span class=\"line\">\tdb.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据行</span></span><br><span class=\"line\">\tu1 := UserInfo&#123;<span class=\"number\">1</span>, <span class=\"string\">&quot;lijiahao&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;zhaozijin&quot;</span>&#125;</span><br><span class=\"line\">\tdb.Create(&amp;u1)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询表中第一条数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> uu UserInfo</span><br><span class=\"line\">\tdb.First(&amp;u)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, u)</span><br><span class=\"line\">\tdb.Find(&amp;uu, <span class=\"string\">&quot;hoddy=?&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>)</span><br><span class=\"line\">\tfmt.printf(<span class=\"string\">&quot;%v&quot;</span>, uu)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//更新</span></span><br><span class=\"line\">\tdb.Model(&amp;u).Update(<span class=\"string\">&quot;bobby&quot;</span>, <span class=\"string\">&quot;双色球&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\tdb.Delete(&amp;u)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>gorm Model</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge sql.NullInt64 <span class=\"comment\">//零值类型</span></span><br><span class=\"line\">\tBirthday *time.Time</span><br><span class=\"line\">\tEmail <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(120);unique_index&quot;`</span></span><br><span class=\"line\">\tRole <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;size:255&quot;`</span>  <span class=\"comment\">//设置字段大小为255</span></span><br><span class=\"line\">\tMemberNumber *<span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;unique;not null&quot;`</span> <span class=\"comment\">//设置会员号唯一并不为空</span></span><br><span class=\"line\">\tNum <span class=\"type\">int</span> <span class=\"string\">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class=\"comment\">//设置num为自增类型</span></span><br><span class=\"line\">\tAddress <span class=\"type\">string</span> \t<span class=\"string\">`gorm:&quot;index:addr&quot;`</span> <span class=\"comment\">//给address字段创建名为addr的索引</span></span><br><span class=\"line\">\tIgnoreMe <span class=\"type\">int</span> <span class=\"string\">`gorm:&quot;-&quot;`</span> <span class=\"comment\">//忽略本字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>gorm.Model</li>\n</ul>\n<p>为了方便模型定义，GORM内置了一个<code>gorm.Model</code>结构体。<code>gorm.Model</code>是一个包含了<code>ID</code>, <code>CreatedAt</code>, <code>UpdatedAt</code>, <code>DeletedAt</code>四个字段的Golang结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gorm.Model 定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"type\">uint</span> <span class=\"string\">`gorm:&quot;primary_key&quot;`</span></span><br><span class=\"line\">  CreatedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">  DeletedAt *time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>主键</li>\n</ul>\n<p>GORM 默认会使用名为ID的字段作为表的主键</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"type\">string</span> <span class=\"comment\">// 名为`ID`的字段会默认作为表的主键</span></span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用`AnimalID`作为主键</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  AnimalID <span class=\"type\">int64</span> <span class=\"string\">`gorm:&quot;primary_key&quot;`</span></span><br><span class=\"line\">  Name     <span class=\"type\">string</span></span><br><span class=\"line\">  Age      <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表名</li>\n</ul>\n<p>表名默认就是结构体名称的复数，例如:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;&#125; <span class=\"comment\">// 默认表名是 `users`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 User 的表名设置为 `profiles`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;profiles&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> u.Role == <span class=\"string\">&quot;admin&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;admin_users&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用默认表名的复数形式，如果置为 true，则 `User` 的默认表名是 `user`</span></span><br><span class=\"line\">db.SingularTable(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>Table()</code>指定表名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用User结构体创建名为`deleted_users`的表</span></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleted_users []User</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Find(&amp;deleted_users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM deleted_users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Delete()</span><br><span class=\"line\"><span class=\"comment\">//// DELETE FROM deleted_users WHERE name = &#x27;jinzhu&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>GORM还支持更改默认表名称规则：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gorm.DefaultTableNameHandler = <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB, defaultTableName <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span>  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;sms_&quot;</span> + defaultTableName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列名</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"type\">uint</span>      <span class=\"comment\">// column name is `id`</span></span><br><span class=\"line\">  Name      <span class=\"type\">string</span>    <span class=\"comment\">// column name is `name`</span></span><br><span class=\"line\">  Birthday  time.Time <span class=\"comment\">// column name is `birthday`</span></span><br><span class=\"line\">  CreatedAt time.Time <span class=\"comment\">// column name is `created_at`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用结构体tag指定列名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  AnimalId    <span class=\"type\">int64</span>     <span class=\"string\">`gorm:&quot;column:beast_id&quot;`</span>        </span><br><span class=\"line\">  Birthday    time.Time <span class=\"string\">`gorm:&quot;column:day_of_the_beast&quot;`</span> </span><br><span class=\"line\">  Age         <span class=\"type\">int64</span>     <span class=\"string\">`gorm:&quot;column:age_of_the_beast&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gorm-CRUD\"><a href=\"#gorm-CRUD\" class=\"headerlink\" title=\"gorm CRUD\"></a>gorm CRUD</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a><b>创建</b></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _<span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义模型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int64</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span> <span class=\"comment\">//通过tag字段定义默认值</span></span><br><span class=\"line\">\tAge <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&amp;parseTime=True&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2. 把模型和数据库中的表对应起来</span></span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Person&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3. 创建记录</span></span><br><span class=\"line\">\tu := Person&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tAge: <span class=\"number\">17</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//使用NewRecord()判断主键是否存在，主键为空使用Create()创建主键</span></span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(db.NewRecord(&amp;u))</span><br><span class=\"line\">\tdb.Create(&amp;u)</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(db.NewRecord(&amp;u))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意:</font>通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段。 在将记录插入到数据库后，Gorm会从数据库加载那些字段的默认值</p>\n<p><code>eg:</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = User&#123;Name: <span class=\"string\">&quot;&quot;</span>, Age: <span class=\"number\">99</span>&#125;</span><br><span class=\"line\">db.Create(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意:</font>上面代码实际执行的SQL语句是<code>INSERT INTO users(&quot;age&quot;) values(&#39;99&#39;);</code>，排除了零值字段Name，而在数据库中这一条数据会使用设置的默认值小王子作为Name字段的值</p>\n<p><font color=red>注意:</font>所有字段的零值, 比如0, “”,false或者其它零值，都不会保存到数据库内，但会使用他们的默认值。 如果你想避免这种情况，可以考虑使用指针或实现 Scanner/Valuer接口，比如：</p>\n<p>(1). 使用指针方式实现零值存入:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"type\">int64</span></span><br><span class=\"line\">  Name *<span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span></span><br><span class=\"line\">  Age  <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user := User&#123;Name: <span class=\"built_in\">new</span>(<span class=\"type\">string</span>), Age: <span class=\"number\">18</span>))&#125;</span><br><span class=\"line\">db.Create(&amp;user)  <span class=\"comment\">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2). 使用Scanner/Valuer接口方式实现零值存入数据库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Scanner/Valuer</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int64</span></span><br><span class=\"line\">\tName sql.NullString <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span> <span class=\"comment\">// sql.NullString 实现了Scanner/Valuer接口</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user := User&#123;Name: sql.NullString&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">true</span>&#125;, Age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">db.Create(&amp;user)  <span class=\"comment\">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a><b>查询</b></h3><ul>\n<li><b>一般查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据主键查询第一条记录</span></span><br><span class=\"line\">db.First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机获取一条记录</span></span><br><span class=\"line\">db.Take(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据主键查询最后一条记录</span></span><br><span class=\"line\">db.Last(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有的记录</span></span><br><span class=\"line\">db.Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询指定的某条记录(仅当主键为整型时可用)</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 10;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>where查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get first matched record</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; limit 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all matched records</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;&gt;</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name &lt;&gt; ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IN</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name IN (?)&quot;</span>, []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name in (&#x27;jinzhu&#x27;,&#x27;jinzhu 2&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LIKE</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name LIKE ?&quot;</span>, <span class=\"string\">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name LIKE &#x27;%jin%&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AND</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age &gt;= 22;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Time</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE updated_at &gt; &#x27;2000-01-01 00:00:00&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BETWEEN</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE created_at BETWEEN &#x27;2000-01-01 00:00:00&#x27; AND &#x27;2000-01-08 00:00:00&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Struct &amp; Map查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Where(&amp;User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>, Age: <span class=\"number\">20</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Where(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主键的切片</span></span><br><span class=\"line\">db.Where([]<span class=\"type\">int64</span>&#123;<span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>提示:</b></font>当通过结构体进行查询时，GORM将会只通过非零值字段查询，这意味着如果你的字段值为0，’’，false或者其他零值时，将不会被用于构建查询条件，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(&amp;User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>, Age: <span class=\"number\">0</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>\n<p>可以使用指针或实现 Scanner/Valuer 接口来避免这个问题:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  gorm.Model</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  *<span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Scanner/Valuer</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  gorm.Model</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  sql.NullInt64  <span class=\"comment\">// sql.NullInt64 实现了 Scanner/Valuer 接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Not条件<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Not(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not In</span></span><br><span class=\"line\">db.Not(<span class=\"string\">&quot;name&quot;</span>, []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not In slice of primary keys</span></span><br><span class=\"line\">db.Not([]<span class=\"type\">int64</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id NOT IN (1,2,3);</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Not([]<span class=\"type\">int64</span>&#123;&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Plain SQL</span></span><br><span class=\"line\">db.Not(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE NOT(name = &quot;jinzhu&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Not(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Or条件<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;role = ?&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>).Or(<span class=\"string\">&quot;role = ?&quot;</span>, <span class=\"string\">&quot;super_admin&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE role = &#x27;admin&#x27; OR role = &#x27;super_admin&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(User&#123;Name: <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>内联条件</b></li>\n</ul>\n<p>当内联条件与多个立即执行方法一起使用时, 内联条件不会传递给后面的立即执行方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据主键获取记录 (只适用于整形主键)</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 23 LIMIT 1;</span></span><br><span class=\"line\"><span class=\"comment\">// 根据主键获取记录, 如果它是一个非整形主键</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"string\">&quot;id = ?&quot;</span>, <span class=\"string\">&quot;string_primary_key&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = &#x27;string_primary_key&#x27; LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Plain SQL</span></span><br><span class=\"line\">db.Find(&amp;user, <span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Find(&amp;users, <span class=\"string\">&quot;name &lt;&gt; ? AND age &gt; ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Find(&amp;users, User&#123;Age: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Find(&amp;users, <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>额外查询选项</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为查询 SQL 添加额外的 SQL 操作</span></span><br><span class=\"line\">db.Set(<span class=\"string\">&quot;gorm:query_option&quot;</span>, <span class=\"string\">&quot;FOR UPDATE&quot;</span>).First(&amp;user, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 10 FOR UPDATE;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>FirstOrCreate</b></li>\n</ul>\n<p>获取匹配的第一条记录, 否则根据给定的条件创建一个新的记录 (仅支持 struct 和 map 条件)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.FirstOrCreate(&amp;user, User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name) VALUES (&quot;non_existing&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;Jinzhu&quot;</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Attrs</b></li>\n</ul>\n<p>如果记录未找到，将使用参数创建 struct 和记录</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class=\"number\">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class=\"number\">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Assign</b></li>\n</ul>\n<p>不管记录是否找到，都将参数赋值给 struct 并保存至数据库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class=\"number\">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class=\"number\">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET age=30 WHERE id = 111;</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 30&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>子查询</b></li>\n</ul>\n<p>基于 <code>*gorm.expr</code> 的子查询</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;amount &gt; ?&quot;</span>, db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;AVG(amount)&quot;</span>).Where(<span class=\"string\">&quot;state = ?&quot;</span>, <span class=\"string\">&quot;paid&quot;</span>).SubQuery()).Find(&amp;orders)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SELECT * FROM &quot;orders&quot;  WHERE &quot;orders&quot;.&quot;deleted_at&quot; IS NULL AND (amount &gt; (SELECT AVG(amount) FROM &quot;orders&quot;  WHERE (state = &#x27;paid&#x27;)));</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>选择字段</b></li>\n</ul>\n<p><code>Select</code>指定你想从数据库中检索出的字段，默认会选择全部字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Select(<span class=\"string\">&quot;name, age&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT name, age FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Select([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT name, age FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;COALESCE(age,?)&quot;</span>, <span class=\"number\">42</span>).Rows()</span><br><span class=\"line\"><span class=\"comment\">//// SELECT COALESCE(age,&#x27;42&#x27;) FROM users;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>排序</b></li>\n</ul>\n<p>Order，指定从数据库中检索出记录的顺序。设置第二个参数 reorder 为 true ，可以覆盖前面定义的排序条件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc, name&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多字段排序</span></span><br><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc&quot;</span>).Order(<span class=\"string\">&quot;name&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆盖排序</span></span><br><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc&quot;</span>).Find(&amp;users1).Order(<span class=\"string\">&quot;age&quot;</span>, <span class=\"literal\">true</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>数量</b></li>\n</ul>\n<p>Limit，指定从数据库检索出的最大记录数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Limit(<span class=\"number\">3</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 3;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -1 取消 Limit 条件</span></span><br><span class=\"line\">db.Limit(<span class=\"number\">10</span>).Find(&amp;users1).Limit(<span class=\"number\">-1</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>偏移</b></li>\n</ul>\n<p>Offset，指定开始返回记录前要跳过的记录数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Offset(<span class=\"number\">3</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users OFFSET 3;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -1 取消 Offset 条件</span></span><br><span class=\"line\">db.Offset(<span class=\"number\">10</span>).Find(&amp;users1).Offset(<span class=\"number\">-1</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>总数</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Or(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>).Find(&amp;users).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * from USERS WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (users)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;User&#123;&#125;).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM deleted_users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Select(<span class=\"string\">&quot;count(distinct(name))&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count( distinct(name) ) FROM deleted_users; (count)</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>注意:</b></font>Count 必须是链式查询的最后一个操作 ，因为它会覆盖前面的 SELECT，但如果里面使用了 count 时不会覆盖</p>\n<ul>\n<li><b>Group &amp; Having</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Scan将多条结果扫描进事先准备好的结构体切片中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDate time.Time</span><br><span class=\"line\">\tTotal <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rets []Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(age) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Scan(&amp;rets)</span><br><span class=\"line\"></span><br><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Having(<span class=\"string\">&quot;sum(amount) &gt; ?&quot;</span>, <span class=\"number\">100</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Date  time.Time</span><br><span class=\"line\">  Total <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Having(<span class=\"string\">&quot;sum(amount) &gt; ?&quot;</span>, <span class=\"number\">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>连接</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;users.name, emails.email&quot;</span>).Joins(<span class=\"string\">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;users.name, emails.email&quot;</span>).Joins(<span class=\"string\">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多连接及参数</span></span><br><span class=\"line\">db.Joins(<span class=\"string\">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class=\"string\">&quot;jinzhu@example.org&quot;</span>).Joins(<span class=\"string\">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class=\"string\">&quot;credit_cards.number = ?&quot;</span>, <span class=\"string\">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Pluck</b></li>\n</ul>\n<p>Pluck，查询<code>model</code>中的一个列作为切片，如果您想要查询多个列，您应该使用<code>Scan</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages []<span class=\"type\">int64</span></span><br><span class=\"line\">db.Find(&amp;users).Pluck(<span class=\"string\">&quot;age&quot;</span>, &amp;ages)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"type\">string</span></span><br><span class=\"line\">db.Model(&amp;User&#123;&#125;).Pluck(<span class=\"string\">&quot;name&quot;</span>, &amp;names)</span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Pluck(<span class=\"string\">&quot;name&quot;</span>, &amp;names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想查询多个字段？ 这样做：</span></span><br><span class=\"line\">db.Select(<span class=\"string\">&quot;name, age&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Scan<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;name, age&quot;</span>).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> results []Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;name, age&quot;</span>).Where(<span class=\"string\">&quot;id &gt; ?&quot;</span>, <span class=\"number\">0</span>).Scan(&amp;results)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原生 SQL</span></span><br><span class=\"line\">db.Raw(<span class=\"string\">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class=\"string\">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>链式操作<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个查询</span></span><br><span class=\"line\">tx := db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加更多条件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> someCondition &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> yetAnotherCondition &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;active = ?&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>注意:<b/></font>在调用立即执行方法前不会生成Query语句，借助这个特性你可以创建一个函数来处理一些通用逻辑</p>\n<ul>\n<li><b>立即执行方法<b/></li>\n</ul>\n<p>立即执行方法是指那些会立即生成SQL语句并发送到数据库的方法, 他们一般是CRUD方法，比如：<br><code>Create</code>, <code>First</code>, <code>Find</code>, <code>Take</code>, <code>Save</code>, <code>UpdateXXX</code>, <code>Delete</code>, <code>Scan</code>, <code>Row</code>, <code>Rows</code>…</p>\n<ul>\n<li><b>范围</b></li>\n</ul>\n<p>Scopes，Scope是建立在链式操作的基础之上的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AmountGreaterThan1000</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;amount &gt; ?&quot;</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PaidWithCreditCard</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;pay_mode_sign = ?&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PaidWithCod</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;pay_mode_sign = ?&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OrderStatus</span><span class=\"params\">(status []<span class=\"type\">string</span>)</span></span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.Scopes(AmountGreaterThan1000).Where(<span class=\"string\">&quot;status IN (?)&quot;</span>, status)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 的信用卡订单</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 的 COD 订单</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, OrderStatus([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;paid&quot;</span>, <span class=\"string\">&quot;shipped&quot;</span>&#125;)).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 且已付款或者已发货的订单</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>多个立即执行方法</b></li>\n</ul>\n<p>在GORM中使用多个立即执行方法时，后一个立即执行方法会复用前一个立即执行方法的条件 (不包括内联条件)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;name LIKE ?&quot;</span>, <span class=\"string\">&quot;jinzhu%&quot;</span>).Find(&amp;users, <span class=\"string\">&quot;id IN (?)&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;).Count(&amp;count)</span><br></pre></td></tr></table></figure>\n<p>对应的sql语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;jinzhu%&#x27;</span> <span class=\"keyword\">AND</span> id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;jinzhu%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a><b>更新</b></h3><ul>\n<li><b>更新所有字段</b></li>\n</ul>\n<p><code>Save()</code>默认会更新该对象的所有字段，即使你没有赋值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.First(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\">user.Name = <span class=\"string\">&quot;七米&quot;</span></span><br><span class=\"line\">user.Age = <span class=\"number\">99</span></span><br><span class=\"line\">db.Save(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////  UPDATE `users` SET `created_at` = &#x27;2020-02-16 12:52:20&#x27;, `updated_at` = &#x27;2020-02-16 12:54:55&#x27;, `deleted_at` = NULL, `name` = &#x27;七米&#x27;, `age` = 99, `active` = true  WHERE `users`.`deleted_at` IS NULL AND `users`.`id` = 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>更新修改字段</b></li>\n</ul>\n<p>如果你只希望更新指定字段，可以使用<code>Update</code>或者<code>Updates</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新单个属性，如果它有变化</span></span><br><span class=\"line\">db.Model(&amp;user).Update(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定的条件更新单个属性</span></span><br><span class=\"line\">db.Model(&amp;user).Where(<span class=\"string\">&quot;active = ?&quot;</span>, <span class=\"literal\">true</span>).Update(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111 AND active=true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 map 更新多个属性，只会更新其中有变化的属性</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 struct 更新多个属性，只会更新其中有变化且为非零值的字段</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 警告：当使用 struct 更新时，GORM只会更新那些非零值的字段</span></span><br><span class=\"line\"><span class=\"comment\">// 对于下面的操作，不会发生任何更新，&quot;&quot;, 0, false 都是其类型的零值</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(User&#123;Name: <span class=\"string\">&quot;&quot;</span>, Age: <span class=\"number\">0</span>, Active: <span class=\"literal\">false</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>更新选定字段</b></li>\n</ul>\n<p>如果你想更新或忽略某些字段，你可以使用<code>Select</code>，<code>Omit</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Model(&amp;user).Select(<span class=\"string\">&quot;name&quot;</span>).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Omit(<span class=\"string\">&quot;name&quot;</span>).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>无Hooks更新</b></li>\n</ul>\n<p>上面的更新操作会自动运行<code>model</code>的<code>BeforeUpdate</code>, <code>AfterUpdate</code>方法，更新<code>UpdatedAt</code>时间戳, 在更新时保存其<code>Associations</code>, 如果你不想调用这些方法，你可以使用<code>UpdateColumn</code>， <code>UpdateColumns</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新单个属性，类似于 `Update`</span></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumn(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新多个属性，类似于 `Updates`</span></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumns(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>批量更新</b></li>\n</ul>\n<p>批量更新时<code>Hooks(钩子函数)</code>不会运行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Where(<span class=\"string\">&quot;id IN (?)&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 struct 更新时，只会更新非零值字段，若想更新所有字段，请使用map[string]interface&#123;&#125;</span></span><br><span class=\"line\">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 `RowsAffected` 获取更新记录总数</span></span><br><span class=\"line\">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;).RowsAffected</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>使用sql表达式更新</b></li>\n</ul>\n<p>先查询表中的第一条数据保存至user变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">db.First(&amp;user)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Model(&amp;user).Update(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age * ? + ?&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE `users` SET `age` = age * 2 + 100, `updated_at` = &#x27;2020-02-16 13:10:20&#x27;  WHERE `users`.`id` = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;age&quot;</span>: gorm.Expr(<span class=\"string\">&quot;age * ? + ?&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>)&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age * &#x27;2&#x27; + &#x27;100&#x27;, &quot;updated_at&quot; = &#x27;2020-02-16 13:05:51&#x27; WHERE `users`.`id` = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumn(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age - ?&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age - 1 WHERE &quot;id&quot; = &#x27;1&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Where(<span class=\"string\">&quot;age &gt; 10&quot;</span>).UpdateColumn(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age - ?&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age - 1 WHERE &quot;id&quot; = &#x27;1&#x27; AND quantity &gt; 10;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>修改Hooks中的值</b></li>\n</ul>\n<p>如果你想修改<code>BeforeUpdate</code>, <code>BeforeSave</code>等<code>Hooks</code>中更新的值，你可以使用 <code>scope.SetColumn</code>, 例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(user *User)</span></span> BeforeSave(scope *gorm.Scope) (err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class=\"number\">0</span>); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    scope.SetColumn(<span class=\"string\">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a><b>删除</b></h3><ul>\n<li><b>删除记录</b></li>\n</ul>\n<p><font color=red><b>警告:</b></font> 删除记录时，请确保主键字段有值，GORM 会通过主键去删除记录，如果主键为空，GORM 会删除该 model 的所有记录。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除现有记录</span></span><br><span class=\"line\">db.Delete(&amp;email)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where id=10;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为删除 SQL 添加额外的 SQL 操作</span></span><br><span class=\"line\">db.Set(<span class=\"string\">&quot;gorm:delete_option&quot;</span>, <span class=\"string\">&quot;OPTION (OPTIMIZE FOR UNKNOWN)&quot;</span>).Delete(&amp;email)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where id=10 OPTION (OPTIMIZE FOR UNKNOWN);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>批量删除</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;email LIKE ?&quot;</span>, <span class=\"string\">&quot;%jinzhu%&quot;</span>).Delete(Email&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Delete(Email&#123;&#125;, <span class=\"string\">&quot;email LIKE ?&quot;</span>, <span class=\"string\">&quot;%jinzhu%&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>软删除</b></li>\n</ul>\n<p>如果一个model有<code>DeletedAt</code>字段，他将自动获得软删除的功能！ 当调用<code>Delete</code>方法时， 记录不会真正的从数据库中被删除， 只会将<code>DeletedAt</code>字段的值会被设置为当前时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Delete(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 批量删除</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">20</span>).Delete(&amp;User&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询记录时会忽略被软删除的记录</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Unscoped 方法可以查询被软删除的记录</span></span><br><span class=\"line\">db.Unscoped().Where(<span class=\"string\">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>物理删除</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Unscoped 方法可以物理删除记录</span></span><br><span class=\"line\">db.Unscoped().Delete(&amp;order)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"gorm基本使用\"><a href=\"#gorm基本使用\" class=\"headerlink\" title=\"gorm基本使用\"></a>gorm基本使用</h1><p>ORM: object relational mapping 对象关系映射 (程序中的对象与关系型数据库之间的映射)</p>\n<p>数据表  &lt;—&gt;  结构体 <br/><br>数据行  &lt;—&gt;  结构体对象 <br/><br>字段    &lt;—&gt;  结构体字段 <br/></p>\n<h2 id=\"gorm安装\"><a href=\"#gorm安装\" class=\"headerlink\" title=\"gorm安装\"></a>gorm安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gorm连接数据库\"><a href=\"#gorm连接数据库\" class=\"headerlink\" title=\"gorm连接数据库\"></a>gorm连接数据库</h2><p>连接不同的数据库都需要导入对应数据的驱动程序，<code>GORM</code>已经贴心的为我们包装了一些驱动程序，只需要按如下方式导入需要的数据库驱动即可:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// import _ &quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接mysql</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;user:password@(localhost)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接postgreSql</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;postgres&quot;</span>, <span class=\"string\">&quot;host=myhost port=myport user=gorm dbname=gorm password=mypassword&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接Sqlite3</li>\n</ul>\n<p><code>Sqlite3</code>是一个文件数据库，需要指定文件路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;sqlite3&quot;</span>, <span class=\"string\">&quot;/tmp/gorm.db&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接SQL server</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  db, err := gorm.Open(<span class=\"string\">&quot;mssql&quot;</span>, <span class=\"string\">&quot;sqlserver://username:password@localhost:1433?database=dbname&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker快速创建mysql实例\"><a href=\"#Docker快速创建mysql实例\" class=\"headerlink\" title=\"Docker快速创建mysql实例\"></a>Docker快速创建mysql实例</h2><ol>\n<li>首选拉取mysql镜像:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql</span><br></pre></td></tr></table></figure></li>\n<li>在本地的<code>13306</code>端口运行一个名为<code>mysql8019</code>，<code>root</code>用户名， 密码为<code>root1234</code>的MySQL容器环境:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql8019 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=cv11010216 -d mysql:8.0.19</span><br></pre></td></tr></table></figure></li>\n<li>另外启动一个<code>MySQL Client</code>环境:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --network host --<span class=\"built_in\">rm</span> mysql mysql -h127.0.0.1 -P3306 --default-character-set=utf8mb4 -uroot -p</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"gorm操作mysql\"><a href=\"#gorm操作mysql\" class=\"headerlink\" title=\"gorm操作mysql\"></a>gorm操作mysql</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tGender <span class=\"type\">string</span></span><br><span class=\"line\">\tHobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&amp;parseTime=True&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建表 自动迁移(把结构体和数据表进行对应)</span></span><br><span class=\"line\">\tdb.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据行</span></span><br><span class=\"line\">\tu1 := UserInfo&#123;<span class=\"number\">1</span>, <span class=\"string\">&quot;lijiahao&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;zhaozijin&quot;</span>&#125;</span><br><span class=\"line\">\tdb.Create(&amp;u1)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询表中第一条数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u UserInfo</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> uu UserInfo</span><br><span class=\"line\">\tdb.First(&amp;u)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, u)</span><br><span class=\"line\">\tdb.Find(&amp;uu, <span class=\"string\">&quot;hoddy=?&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>)</span><br><span class=\"line\">\tfmt.printf(<span class=\"string\">&quot;%v&quot;</span>, uu)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//更新</span></span><br><span class=\"line\">\tdb.Model(&amp;u).Update(<span class=\"string\">&quot;bobby&quot;</span>, <span class=\"string\">&quot;双色球&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\tdb.Delete(&amp;u)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>gorm Model</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge sql.NullInt64 <span class=\"comment\">//零值类型</span></span><br><span class=\"line\">\tBirthday *time.Time</span><br><span class=\"line\">\tEmail <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(120);unique_index&quot;`</span></span><br><span class=\"line\">\tRole <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;size:255&quot;`</span>  <span class=\"comment\">//设置字段大小为255</span></span><br><span class=\"line\">\tMemberNumber *<span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;unique;not null&quot;`</span> <span class=\"comment\">//设置会员号唯一并不为空</span></span><br><span class=\"line\">\tNum <span class=\"type\">int</span> <span class=\"string\">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class=\"comment\">//设置num为自增类型</span></span><br><span class=\"line\">\tAddress <span class=\"type\">string</span> \t<span class=\"string\">`gorm:&quot;index:addr&quot;`</span> <span class=\"comment\">//给address字段创建名为addr的索引</span></span><br><span class=\"line\">\tIgnoreMe <span class=\"type\">int</span> <span class=\"string\">`gorm:&quot;-&quot;`</span> <span class=\"comment\">//忽略本字段</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>gorm.Model</li>\n</ul>\n<p>为了方便模型定义，GORM内置了一个<code>gorm.Model</code>结构体。<code>gorm.Model</code>是一个包含了<code>ID</code>, <code>CreatedAt</code>, <code>UpdatedAt</code>, <code>DeletedAt</code>四个字段的Golang结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gorm.Model 定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"type\">uint</span> <span class=\"string\">`gorm:&quot;primary_key&quot;`</span></span><br><span class=\"line\">  CreatedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">  DeletedAt *time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>主键</li>\n</ul>\n<p>GORM 默认会使用名为ID的字段作为表的主键</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"type\">string</span> <span class=\"comment\">// 名为`ID`的字段会默认作为表的主键</span></span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用`AnimalID`作为主键</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  AnimalID <span class=\"type\">int64</span> <span class=\"string\">`gorm:&quot;primary_key&quot;`</span></span><br><span class=\"line\">  Name     <span class=\"type\">string</span></span><br><span class=\"line\">  Age      <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表名</li>\n</ul>\n<p>表名默认就是结构体名称的复数，例如:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;&#125; <span class=\"comment\">// 默认表名是 `users`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 User 的表名设置为 `profiles`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;profiles&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> u.Role == <span class=\"string\">&quot;admin&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;admin_users&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;users&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用默认表名的复数形式，如果置为 true，则 `User` 的默认表名是 `user`</span></span><br><span class=\"line\">db.SingularTable(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>Table()</code>指定表名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用User结构体创建名为`deleted_users`的表</span></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleted_users []User</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Find(&amp;deleted_users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM deleted_users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Delete()</span><br><span class=\"line\"><span class=\"comment\">//// DELETE FROM deleted_users WHERE name = &#x27;jinzhu&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>GORM还支持更改默认表名称规则：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gorm.DefaultTableNameHandler = <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB, defaultTableName <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span>  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;sms_&quot;</span> + defaultTableName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列名</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"type\">uint</span>      <span class=\"comment\">// column name is `id`</span></span><br><span class=\"line\">  Name      <span class=\"type\">string</span>    <span class=\"comment\">// column name is `name`</span></span><br><span class=\"line\">  Birthday  time.Time <span class=\"comment\">// column name is `birthday`</span></span><br><span class=\"line\">  CreatedAt time.Time <span class=\"comment\">// column name is `created_at`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用结构体tag指定列名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  AnimalId    <span class=\"type\">int64</span>     <span class=\"string\">`gorm:&quot;column:beast_id&quot;`</span>        </span><br><span class=\"line\">  Birthday    time.Time <span class=\"string\">`gorm:&quot;column:day_of_the_beast&quot;`</span> </span><br><span class=\"line\">  Age         <span class=\"type\">int64</span>     <span class=\"string\">`gorm:&quot;column:age_of_the_beast&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gorm-CRUD\"><a href=\"#gorm-CRUD\" class=\"headerlink\" title=\"gorm CRUD\"></a>gorm CRUD</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a><b>创建</b></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _<span class=\"string\">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义模型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int64</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span> <span class=\"comment\">//通过tag字段定义默认值</span></span><br><span class=\"line\">\tAge <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&amp;parseTime=True&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2. 把模型和数据库中的表对应起来</span></span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Person&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3. 创建记录</span></span><br><span class=\"line\">\tu := Person&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tAge: <span class=\"number\">17</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//使用NewRecord()判断主键是否存在，主键为空使用Create()创建主键</span></span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(db.NewRecord(&amp;u))</span><br><span class=\"line\">\tdb.Create(&amp;u)</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(db.NewRecord(&amp;u))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意:</font>通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段。 在将记录插入到数据库后，Gorm会从数据库加载那些字段的默认值</p>\n<p><code>eg:</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = User&#123;Name: <span class=\"string\">&quot;&quot;</span>, Age: <span class=\"number\">99</span>&#125;</span><br><span class=\"line\">db.Create(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意:</font>上面代码实际执行的SQL语句是<code>INSERT INTO users(&quot;age&quot;) values(&#39;99&#39;);</code>，排除了零值字段Name，而在数据库中这一条数据会使用设置的默认值小王子作为Name字段的值</p>\n<p><font color=red>注意:</font>所有字段的零值, 比如0, “”,false或者其它零值，都不会保存到数据库内，但会使用他们的默认值。 如果你想避免这种情况，可以考虑使用指针或实现 Scanner/Valuer接口，比如：</p>\n<p>(1). 使用指针方式实现零值存入:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"type\">int64</span></span><br><span class=\"line\">  Name *<span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span></span><br><span class=\"line\">  Age  <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user := User&#123;Name: <span class=\"built_in\">new</span>(<span class=\"type\">string</span>), Age: <span class=\"number\">18</span>))&#125;</span><br><span class=\"line\">db.Create(&amp;user)  <span class=\"comment\">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>(2). 使用Scanner/Valuer接口方式实现零值存入数据库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Scanner/Valuer</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID <span class=\"type\">int64</span></span><br><span class=\"line\">\tName sql.NullString <span class=\"string\">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span> <span class=\"comment\">// sql.NullString 实现了Scanner/Valuer接口</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user := User&#123;Name: sql.NullString&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">true</span>&#125;, Age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">db.Create(&amp;user)  <span class=\"comment\">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a><b>查询</b></h3><ul>\n<li><b>一般查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据主键查询第一条记录</span></span><br><span class=\"line\">db.First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机获取一条记录</span></span><br><span class=\"line\">db.Take(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据主键查询最后一条记录</span></span><br><span class=\"line\">db.Last(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有的记录</span></span><br><span class=\"line\">db.Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询指定的某条记录(仅当主键为整型时可用)</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 10;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>where查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get first matched record</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; limit 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get all matched records</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;&gt;</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name &lt;&gt; ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IN</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name IN (?)&quot;</span>, []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name in (&#x27;jinzhu&#x27;,&#x27;jinzhu 2&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LIKE</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name LIKE ?&quot;</span>, <span class=\"string\">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name LIKE &#x27;%jin%&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AND</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age &gt;= 22;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Time</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE updated_at &gt; &#x27;2000-01-01 00:00:00&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BETWEEN</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE created_at BETWEEN &#x27;2000-01-01 00:00:00&#x27; AND &#x27;2000-01-08 00:00:00&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Struct &amp; Map查询</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Where(&amp;User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>, Age: <span class=\"number\">20</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Where(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主键的切片</span></span><br><span class=\"line\">db.Where([]<span class=\"type\">int64</span>&#123;<span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>提示:</b></font>当通过结构体进行查询时，GORM将会只通过非零值字段查询，这意味着如果你的字段值为0，’’，false或者其他零值时，将不会被用于构建查询条件，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(&amp;User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>, Age: <span class=\"number\">0</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>\n<p>可以使用指针或实现 Scanner/Valuer 接口来避免这个问题:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  gorm.Model</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  *<span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Scanner/Valuer</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  gorm.Model</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  sql.NullInt64  <span class=\"comment\">// sql.NullInt64 实现了 Scanner/Valuer 接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Not条件<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Not(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not In</span></span><br><span class=\"line\">db.Not(<span class=\"string\">&quot;name&quot;</span>, []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not In slice of primary keys</span></span><br><span class=\"line\">db.Not([]<span class=\"type\">int64</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id NOT IN (1,2,3);</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Not([]<span class=\"type\">int64</span>&#123;&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Plain SQL</span></span><br><span class=\"line\">db.Not(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE NOT(name = &quot;jinzhu&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Not(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Or条件<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;role = ?&quot;</span>, <span class=\"string\">&quot;admin&quot;</span>).Or(<span class=\"string\">&quot;role = ?&quot;</span>, <span class=\"string\">&quot;super_admin&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE role = &#x27;admin&#x27; OR role = &#x27;super_admin&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(User&#123;Name: <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>内联条件</b></li>\n</ul>\n<p>当内联条件与多个立即执行方法一起使用时, 内联条件不会传递给后面的立即执行方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据主键获取记录 (只适用于整形主键)</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 23 LIMIT 1;</span></span><br><span class=\"line\"><span class=\"comment\">// 根据主键获取记录, 如果它是一个非整形主键</span></span><br><span class=\"line\">db.First(&amp;user, <span class=\"string\">&quot;id = ?&quot;</span>, <span class=\"string\">&quot;string_primary_key&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = &#x27;string_primary_key&#x27; LIMIT 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Plain SQL</span></span><br><span class=\"line\">db.Find(&amp;user, <span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Find(&amp;users, <span class=\"string\">&quot;name &lt;&gt; ? AND age &gt; ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Struct</span></span><br><span class=\"line\">db.Find(&amp;users, User&#123;Age: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\">db.Find(&amp;users, <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>额外查询选项</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为查询 SQL 添加额外的 SQL 操作</span></span><br><span class=\"line\">db.Set(<span class=\"string\">&quot;gorm:query_option&quot;</span>, <span class=\"string\">&quot;FOR UPDATE&quot;</span>).First(&amp;user, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE id = 10 FOR UPDATE;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>FirstOrCreate</b></li>\n</ul>\n<p>获取匹配的第一条记录, 否则根据给定的条件创建一个新的记录 (仅支持 struct 和 map 条件)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.FirstOrCreate(&amp;user, User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name) VALUES (&quot;non_existing&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;Jinzhu&quot;</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Attrs</b></li>\n</ul>\n<p>如果记录未找到，将使用参数创建 struct 和记录</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class=\"number\">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class=\"number\">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Assign</b></li>\n</ul>\n<p>不管记录是否找到，都将参数赋值给 struct 并保存至数据库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class=\"number\">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找到</span></span><br><span class=\"line\">db.Where(User&#123;Name: <span class=\"string\">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class=\"number\">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET age=30 WHERE id = 111;</span></span><br><span class=\"line\"><span class=\"comment\">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 30&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>子查询</b></li>\n</ul>\n<p>基于 <code>*gorm.expr</code> 的子查询</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;amount &gt; ?&quot;</span>, db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;AVG(amount)&quot;</span>).Where(<span class=\"string\">&quot;state = ?&quot;</span>, <span class=\"string\">&quot;paid&quot;</span>).SubQuery()).Find(&amp;orders)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SELECT * FROM &quot;orders&quot;  WHERE &quot;orders&quot;.&quot;deleted_at&quot; IS NULL AND (amount &gt; (SELECT AVG(amount) FROM &quot;orders&quot;  WHERE (state = &#x27;paid&#x27;)));</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>选择字段</b></li>\n</ul>\n<p><code>Select</code>指定你想从数据库中检索出的字段，默认会选择全部字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Select(<span class=\"string\">&quot;name, age&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT name, age FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Select([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT name, age FROM users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;COALESCE(age,?)&quot;</span>, <span class=\"number\">42</span>).Rows()</span><br><span class=\"line\"><span class=\"comment\">//// SELECT COALESCE(age,&#x27;42&#x27;) FROM users;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>排序</b></li>\n</ul>\n<p>Order，指定从数据库中检索出记录的顺序。设置第二个参数 reorder 为 true ，可以覆盖前面定义的排序条件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc, name&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多字段排序</span></span><br><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc&quot;</span>).Order(<span class=\"string\">&quot;name&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆盖排序</span></span><br><span class=\"line\">db.Order(<span class=\"string\">&quot;age desc&quot;</span>).Find(&amp;users1).Order(<span class=\"string\">&quot;age&quot;</span>, <span class=\"literal\">true</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age desc; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users ORDER BY age; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>数量</b></li>\n</ul>\n<p>Limit，指定从数据库检索出的最大记录数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Limit(<span class=\"number\">3</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 3;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -1 取消 Limit 条件</span></span><br><span class=\"line\">db.Limit(<span class=\"number\">10</span>).Find(&amp;users1).Limit(<span class=\"number\">-1</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>偏移</b></li>\n</ul>\n<p>Offset，指定开始返回记录前要跳过的记录数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Offset(<span class=\"number\">3</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users OFFSET 3;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -1 取消 Offset 条件</span></span><br><span class=\"line\">db.Offset(<span class=\"number\">10</span>).Find(&amp;users1).Offset(<span class=\"number\">-1</span>).Find(&amp;users2)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>总数</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Or(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu 2&quot;</span>).Find(&amp;users).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * from USERS WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (users)</span></span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;User&#123;&#125;).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count(*) FROM deleted_users;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Select(<span class=\"string\">&quot;count(distinct(name))&quot;</span>).Count(&amp;count)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT count( distinct(name) ) FROM deleted_users; (count)</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>注意:</b></font>Count 必须是链式查询的最后一个操作 ，因为它会覆盖前面的 SELECT，但如果里面使用了 count 时不会覆盖</p>\n<ul>\n<li><b>Group &amp; Having</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Scan将多条结果扫描进事先准备好的结构体切片中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDate time.Time</span><br><span class=\"line\">\tTotal <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rets []Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(age) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Scan(&amp;rets)</span><br><span class=\"line\"></span><br><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Having(<span class=\"string\">&quot;sum(amount) &gt; ?&quot;</span>, <span class=\"number\">100</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Date  time.Time</span><br><span class=\"line\">  Total <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;orders&quot;</span>).Select(<span class=\"string\">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class=\"string\">&quot;date(created_at)&quot;</span>).Having(<span class=\"string\">&quot;sum(amount) &gt; ?&quot;</span>, <span class=\"number\">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>连接</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;users.name, emails.email&quot;</span>).Joins(<span class=\"string\">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;users.name, emails.email&quot;</span>).Joins(<span class=\"string\">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多连接及参数</span></span><br><span class=\"line\">db.Joins(<span class=\"string\">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class=\"string\">&quot;jinzhu@example.org&quot;</span>).Joins(<span class=\"string\">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class=\"string\">&quot;credit_cards.number = ?&quot;</span>, <span class=\"string\">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Pluck</b></li>\n</ul>\n<p>Pluck，查询<code>model</code>中的一个列作为切片，如果您想要查询多个列，您应该使用<code>Scan</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages []<span class=\"type\">int64</span></span><br><span class=\"line\">db.Find(&amp;users).Pluck(<span class=\"string\">&quot;age&quot;</span>, &amp;ages)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"type\">string</span></span><br><span class=\"line\">db.Model(&amp;User&#123;&#125;).Pluck(<span class=\"string\">&quot;name&quot;</span>, &amp;names)</span><br><span class=\"line\"></span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;deleted_users&quot;</span>).Pluck(<span class=\"string\">&quot;name&quot;</span>, &amp;names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想查询多个字段？ 这样做：</span></span><br><span class=\"line\">db.Select(<span class=\"string\">&quot;name, age&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>Scan<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name <span class=\"type\">string</span></span><br><span class=\"line\">  Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;name, age&quot;</span>).Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> results []Result</span><br><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Select(<span class=\"string\">&quot;name, age&quot;</span>).Where(<span class=\"string\">&quot;id &gt; ?&quot;</span>, <span class=\"number\">0</span>).Scan(&amp;results)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原生 SQL</span></span><br><span class=\"line\">db.Raw(<span class=\"string\">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class=\"string\">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>链式操作<b/></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个查询</span></span><br><span class=\"line\">tx := db.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;jinzhu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加更多条件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> someCondition &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> yetAnotherCondition &#123;</span><br><span class=\"line\">  tx = tx.Where(<span class=\"string\">&quot;active = ?&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red><b>注意:<b/></font>在调用立即执行方法前不会生成Query语句，借助这个特性你可以创建一个函数来处理一些通用逻辑</p>\n<ul>\n<li><b>立即执行方法<b/></li>\n</ul>\n<p>立即执行方法是指那些会立即生成SQL语句并发送到数据库的方法, 他们一般是CRUD方法，比如：<br><code>Create</code>, <code>First</code>, <code>Find</code>, <code>Take</code>, <code>Save</code>, <code>UpdateXXX</code>, <code>Delete</code>, <code>Scan</code>, <code>Row</code>, <code>Rows</code>…</p>\n<ul>\n<li><b>范围</b></li>\n</ul>\n<p>Scopes，Scope是建立在链式操作的基础之上的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AmountGreaterThan1000</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;amount &gt; ?&quot;</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PaidWithCreditCard</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;pay_mode_sign = ?&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PaidWithCod</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.Where(<span class=\"string\">&quot;pay_mode_sign = ?&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OrderStatus</span><span class=\"params\">(status []<span class=\"type\">string</span>)</span></span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.Scopes(AmountGreaterThan1000).Where(<span class=\"string\">&quot;status IN (?)&quot;</span>, status)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 的信用卡订单</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 的 COD 订单</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Scopes(AmountGreaterThan1000, OrderStatus([]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;paid&quot;</span>, <span class=\"string\">&quot;shipped&quot;</span>&#125;)).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// 查找所有金额大于 1000 且已付款或者已发货的订单</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>多个立即执行方法</b></li>\n</ul>\n<p>在GORM中使用多个立即执行方法时，后一个立即执行方法会复用前一个立即执行方法的条件 (不包括内联条件)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;name LIKE ?&quot;</span>, <span class=\"string\">&quot;jinzhu%&quot;</span>).Find(&amp;users, <span class=\"string\">&quot;id IN (?)&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;).Count(&amp;count)</span><br></pre></td></tr></table></figure>\n<p>对应的sql语句:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;jinzhu%&#x27;</span> <span class=\"keyword\">AND</span> id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;jinzhu%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a><b>更新</b></h3><ul>\n<li><b>更新所有字段</b></li>\n</ul>\n<p><code>Save()</code>默认会更新该对象的所有字段，即使你没有赋值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.First(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\">user.Name = <span class=\"string\">&quot;七米&quot;</span></span><br><span class=\"line\">user.Age = <span class=\"number\">99</span></span><br><span class=\"line\">db.Save(&amp;user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////  UPDATE `users` SET `created_at` = &#x27;2020-02-16 12:52:20&#x27;, `updated_at` = &#x27;2020-02-16 12:54:55&#x27;, `deleted_at` = NULL, `name` = &#x27;七米&#x27;, `age` = 99, `active` = true  WHERE `users`.`deleted_at` IS NULL AND `users`.`id` = 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>更新修改字段</b></li>\n</ul>\n<p>如果你只希望更新指定字段，可以使用<code>Update</code>或者<code>Updates</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新单个属性，如果它有变化</span></span><br><span class=\"line\">db.Model(&amp;user).Update(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定的条件更新单个属性</span></span><br><span class=\"line\">db.Model(&amp;user).Where(<span class=\"string\">&quot;active = ?&quot;</span>, <span class=\"literal\">true</span>).Update(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111 AND active=true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 map 更新多个属性，只会更新其中有变化的属性</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 struct 更新多个属性，只会更新其中有变化且为非零值的字段</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 警告：当使用 struct 更新时，GORM只会更新那些非零值的字段</span></span><br><span class=\"line\"><span class=\"comment\">// 对于下面的操作，不会发生任何更新，&quot;&quot;, 0, false 都是其类型的零值</span></span><br><span class=\"line\">db.Model(&amp;user).Updates(User&#123;Name: <span class=\"string\">&quot;&quot;</span>, Age: <span class=\"number\">0</span>, Active: <span class=\"literal\">false</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>更新选定字段</b></li>\n</ul>\n<p>如果你想更新或忽略某些字段，你可以使用<code>Select</code>，<code>Omit</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Model(&amp;user).Select(<span class=\"string\">&quot;name&quot;</span>).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Omit(<span class=\"string\">&quot;name&quot;</span>).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;active&quot;</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>无Hooks更新</b></li>\n</ul>\n<p>上面的更新操作会自动运行<code>model</code>的<code>BeforeUpdate</code>, <code>AfterUpdate</code>方法，更新<code>UpdatedAt</code>时间戳, 在更新时保存其<code>Associations</code>, 如果你不想调用这些方法，你可以使用<code>UpdateColumn</code>， <code>UpdateColumns</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新单个属性，类似于 `Update`</span></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumn(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新多个属性，类似于 `Updates`</span></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumns(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>批量更新</b></li>\n</ul>\n<p>批量更新时<code>Hooks(钩子函数)</code>不会运行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Table(<span class=\"string\">&quot;users&quot;</span>).Where(<span class=\"string\">&quot;id IN (?)&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 struct 更新时，只会更新非零值字段，若想更新所有字段，请使用map[string]interface&#123;&#125;</span></span><br><span class=\"line\">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET name=&#x27;hello&#x27;, age=18;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 `RowsAffected` 获取更新记录总数</span></span><br><span class=\"line\">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class=\"string\">&quot;hello&quot;</span>, Age: <span class=\"number\">18</span>&#125;).RowsAffected</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>使用sql表达式更新</b></li>\n</ul>\n<p>先查询表中的第一条数据保存至user变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">db.First(&amp;user)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Model(&amp;user).Update(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age * ? + ?&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE `users` SET `age` = age * 2 + 100, `updated_at` = &#x27;2020-02-16 13:10:20&#x27;  WHERE `users`.`id` = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;age&quot;</span>: gorm.Expr(<span class=\"string\">&quot;age * ? + ?&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>)&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age * &#x27;2&#x27; + &#x27;100&#x27;, &quot;updated_at&quot; = &#x27;2020-02-16 13:05:51&#x27; WHERE `users`.`id` = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).UpdateColumn(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age - ?&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age - 1 WHERE &quot;id&quot; = &#x27;1&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Model(&amp;user).Where(<span class=\"string\">&quot;age &gt; 10&quot;</span>).UpdateColumn(<span class=\"string\">&quot;age&quot;</span>, gorm.Expr(<span class=\"string\">&quot;age - ?&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE &quot;users&quot; SET &quot;age&quot; = age - 1 WHERE &quot;id&quot; = &#x27;1&#x27; AND quantity &gt; 10;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>修改Hooks中的值</b></li>\n</ul>\n<p>如果你想修改<code>BeforeUpdate</code>, <code>BeforeSave</code>等<code>Hooks</code>中更新的值，你可以使用 <code>scope.SetColumn</code>, 例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(user *User)</span></span> BeforeSave(scope *gorm.Scope) (err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class=\"number\">0</span>); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    scope.SetColumn(<span class=\"string\">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a><b>删除</b></h3><ul>\n<li><b>删除记录</b></li>\n</ul>\n<p><font color=red><b>警告:</b></font> 删除记录时，请确保主键字段有值，GORM 会通过主键去删除记录，如果主键为空，GORM 会删除该 model 的所有记录。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除现有记录</span></span><br><span class=\"line\">db.Delete(&amp;email)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where id=10;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为删除 SQL 添加额外的 SQL 操作</span></span><br><span class=\"line\">db.Set(<span class=\"string\">&quot;gorm:delete_option&quot;</span>, <span class=\"string\">&quot;OPTION (OPTIMIZE FOR UNKNOWN)&quot;</span>).Delete(&amp;email)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where id=10 OPTION (OPTIMIZE FOR UNKNOWN);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>批量删除</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">&quot;email LIKE ?&quot;</span>, <span class=\"string\">&quot;%jinzhu%&quot;</span>).Delete(Email&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.Delete(Email&#123;&#125;, <span class=\"string\">&quot;email LIKE ?&quot;</span>, <span class=\"string\">&quot;%jinzhu%&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>软删除</b></li>\n</ul>\n<p>如果一个model有<code>DeletedAt</code>字段，他将自动获得软删除的功能！ 当调用<code>Delete</code>方法时， 记录不会真正的从数据库中被删除， 只会将<code>DeletedAt</code>字段的值会被设置为当前时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Delete(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 批量删除</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;age = ?&quot;</span>, <span class=\"number\">20</span>).Delete(&amp;User&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询记录时会忽略被软删除的记录</span></span><br><span class=\"line\">db.Where(<span class=\"string\">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Unscoped 方法可以查询被软删除的记录</span></span><br><span class=\"line\">db.Unscoped().Where(<span class=\"string\">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class=\"line\"><span class=\"comment\">//// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><b>物理删除</b></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Unscoped 方法可以物理删除记录</span></span><br><span class=\"line\">db.Unscoped().Delete(&amp;order)</span><br><span class=\"line\"><span class=\"comment\">//// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Kafka基础","_content":"# Kafka基础 \n\n* Kafka是一个分布式的基于发布/订阅模式的消息队列，主要用于大数据实时处理\n\n## 消息队列\n\n* 使用消息队列的好处:\n\t- 解耦: 可以独立地扩展或者修改两边的处理过程\n\t- 可恢复性: 即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理\n\t- 缓冲: 解决生产者和消费者处理消息速度不一致的情况(生产 > 消费)\n\t- 灵活性和削峰处理能力: 不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。\n\t- 异步通信: 消息队列允许用户把消息放入队列但不立即处理它。\n\n* 消息队列的两种模式\n\t- 点对点模式(一对一[消息 对 消费者]，消费者主动拉取数据，消息收到后消息清除)\n\t\t```\n\t\t* 消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。\n\n\t\t* 消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费\n\t\t```\n\n\t\t![查看源图像](https://img-blog.csdnimg.cn/20200802210501168.png)\n\n\t- 发布订阅(一对多[消息 对 消费者], 消费者消费数据之后不会清除数据，消费者主动拉取的模式)\n\n\t\t```\n\t\t* 消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。\n\n\t\t* 和点对点方式不同，发布到topic的消息会被所有订阅者消费。\n\t\t```\n\n\t\t![查看源图像](https://pic2.zhimg.com/v2-08a36aa5e745285aebe8352d9f7fbebf_r.jpg)\n\n## Kafka基础架构\n\n![查看源图像](https://www.diguage.com/images/kafka/kafka-architecture.png)\n\n* Producer生产者进程产生的数据可以被发布到不同的Topic主题下的不同 Partition 分区\n* 在一个分区内，这些消息被索引并连同时间戳存储在一起。\n* Consumer 消费者进程可以从分区订阅消息\n\n* Kafka重要概念\n\t- Producer： 消息生产者，向 Kafka Broker 发消息的客户端。\n\t- Consumer： 消息消费者，从 Kafka Broker 取消息的客户端。\n\t- Consumer Group： 消费者组（CG），消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\n\t- Broker： 一台 Kafka 机器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。\n\t- Topic： 可以理解为一个队列，topic 将消息分类，生产者和消费者面向的是同一个 topic。\n\t- Partition： 为了实现扩展性，提高并发能力，一个非常大的 topic 可以分布到多个 broker （即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个 有序的队列。\n\t- Replica： 副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。\n\t- Leader： 每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 leader。\n\t- Follower： 每个分区多个副本的“从”副本，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 还会成为新的 leader。\n\t- offset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。\n\t- Zookeeper： Kafka 集群能够正常工作，需要依赖于 zookeeper，zookeeper 帮助 Kafka 存储和管理集群信息。\n\n## Kafka安装和基本使用\n\n* 启动Kafka\n\t- 启动zookeeper\n\t\t``` bash\n\t\tsudo bin/zookeeper-server-start.sh  config/zookeeper.properties \n\t\t# 后台启动zookeeper\n\t\tsudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties \n\t\t```\n\t- 启动kafka\n\t\t``` bash\n\t\tsudo bin/kafka-server-start.sh config/server.properties \n\t\t# 后台启动kafka\n\t\tsudo bin/kafka-server-start.sh -daemon config/server.properties \n\t\t```\n\n* 停止Kafka\n\t- 停止kafka\n\t`sudo bin/kafka-server-stop.sh`\n\t- 停止zookeeper\n\t`sudo bin/zookeeper-server-stop.sh`\n\n\n* 测试kafaka\n\n* 创建一个测试的Topic\n\t``` bash\n\tbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n\n\t\t- --replication-factor  副本数\n\t\t- --partitions  分区数\n\t\t- --topic 指定topic名字\n\t```\n\n* 查看Topic\n\t``` bash\n\t#连接zookkeeper模式\n\tbin/kafka-topics.sh --list --zookeeper localhost:2181  \n\t#直接kafka模式\n\tbin/kafka-topics.sh --list --bootstrap-server localhost:9092\n\t```\n\n* 删除Topic\n\t``` bash\n\tbin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic test \n\t```\n\n* 查看Topic描述信息\n\t``` bash\n\tbin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test \n\t```\n\n* 产生消息\n\t``` bash\n\t#直接kafka模式\n\tbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test \n\t```\n\n* 消费消息\n\t``` bash\n\tbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n\t#直接kafka模式\n\tbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\t```\n\n## Kafka架构深入\n\n`Kafka工作流程`\n\n![查看源图像](https://www.freesion.com/images/679/61ba1660d8ee0128987a3e012674cad7.png)\n\n* Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，面向的都是同一个 topic。\n\n* topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 Producer 生产的数据。Producer 生产的数据会不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。\n\n`Kafka文件存储`\n\n![preview](https://pic2.zhimg.com/v2-23dcdca68db7e5406e3f036297f68c4d_r.jpg)\n\n* 由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了分片和索引机制，将每个 partition 分为多个 segment，每个 segment 对应两个文件：“.index” 索引文件和 “.log” 数据文件\n\n## Kafka生产者\n\n* 分区原因\n\t- 方便在集群中扩展，每个 partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 partition 组成，因此可以以 partition 为单位读写了。\n\t- 可以提高并发，以 partition 为单位读写了。\n\n* 分区原则\n\t```\n\t我们需要将 Producer 发送的数据封装成一个 ProducerRecord 对象。该对象需要指定一些参数：\n\t- topic：string 类型，NotNull\n\t- partition：int 类型，可选\n\t- timestamp：long 类型，可选\n\t- key：string类型，可选\n\t- value：string 类型，可选\n\t- headers：array 类型，Nullable\n\t```\n\t- 指明 partition 的情况下，直接指明的值 作为 partition 的值。\n\t- 没有指明 partition 但有 key 的情况下，将 key 的 hash 值与分区数取余得到 partition 值。\n\t- 既没有 partition 有没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用都在这个整数上自增），将这个值与可用的分区数取余，得到 partition 值，也就是常说的 round-robin 轮询算法。\n\n* 生产者数据可靠性保证\n\t- 为保证 producer 发送的数据，能可靠地发送到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack（acknowledge 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据\n\n\t![preview](https://pic3.zhimg.com/v2-2225e28f85f77380de5fcededf77249e_r.jpg)\n\n\t- 副本数据同步策略\n\t\t```\n\t\t* 何时发送ack?\n\t\t\t- leader 收到数据之后\n\t\t\t- leader数据并同步到follower之后\n\t\t* 多少follower同步完成之后发送ack?\n\t\t\t- 半数同步完成\n\t\t\t- 全部同步完成\n\t\t* Kafka选择全部同步完成才发送ack的方案在忍受相同机器故障的情况下所需的及取数更少\n\t\t```\n\t\t![preview](https://pic4.zhimg.com/v2-05f1d9b679c8db558d56dc9afcc8c4c3_r.jpg)\n\n\t- ISR\n\t\t```\n\t\t* 采用第二种方案，所有 follower 完成同步，producer 才能继续发送数据，设想有一个 follower 因为某种原因出现故障，那 leader 就要一直等到它完成同步。这个问题怎么解决？ \n\n\t\t* leader维护了一个动态的 in-sync replica set（ISR), 意为和 leader 保持同步的 follower 集合。当 ISR 集合中的 follower 完成数据的同步之后，leader 就会给 producer 发送 ack。如果 follower 长时间未向 leader 同步数据，则该 follower 将被踢出 ISR 集合，该时间阈值由 replica.lag.time.max.ms 参数设定。\n\n\t\t* leader 发生故障后，就会从 ISR 中选举出新的 leader\n\t\t```\n\t\n\t- acks 参数配置\n\t\t```\n\t\t* 对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等 ISR 中的 follower 全部接受成功。 \n\n\t\t* 所以 Kafka 为用户提供了三种可靠性级别，用户根据可靠性和延迟的要求进行权衡，选择以下的配置\n\t\t```\n\n\t\t* 0：producer 不等待 broker 的 ack，这提供了最低延迟，broker 一收到数据还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据。\n\t\t* 1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据。\n\t\t* -1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是在 broker 发送 ack 时，leader 发生故障，则会造成数据重复。\n\n\t\t![img](https://pic2.zhimg.com/80/v2-73974b936cd969c98eab1a088e680bd5_720w.jpg)\n\t\n\t- 故障处理细节\n\t\t![preview](https://pic2.zhimg.com/v2-b417f990a4378583e76dfde8672bf4d1_r.jpg)\n\n\t\t```\n\t\t* LEO：每个副本最大的 offset。 \n\t\t* HW：消费者能见到的最大的 offset，ISR 队列中最小的 LEO\n\t\t```\n\t\t* Follower 故障\n\t\t\t```\n\t\t\tfollower 发生故障后会被临时踢出 ISR 集合，待该 follower 恢复后，follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步数据操作。等该 follower 的 LEO 大于等于该 partition 的 HW，即 follower 追上 leader 后，就可以重新加入 ISR 了。\n\t\t\t```\n\t\t* Leader 故障\n\t\t\t```\n\t\t\t* leader 发生故障后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。 \n\n\t\t\t* 注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复，acks机制会影响数据丢失性\n\t\t\t```\n\n\t- Exactly Once 语义\n\t\t```\n\t\t* 将服务器的 ACK 级别设置为-1，可以保证 producer 到 server 之间不会丢失数据，即 At Least Once 语义。\n\n\t\t* 将服务器 ACK 级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once 语义\n\n\t\t* At Least Once 可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once 可以保证数据不重复，但是不能保证数据不丢失。\n\n\t\t* 但是，对于一些非常重要的信息，比如交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义\n\n\t\t* 引入了幂等性：producer 不论向 server 发送多少重复数据，server 端都只会持久化一条。即：At Least Once + 幂等性 = Exactly Once\n\n\t\t* 启用幂等性，只需要将 producer 的参数中 enable.idompotence 设置为 true 即可\n\n\t\t* 开启幂等性的 producer 在初始化时会被分配一个 PID，发往同一 partition 的消息会附带 Sequence Number。而 borker 端会对 <PID,Partition,SeqNumber> 做缓存，当具有相同主键的消息提交时，broker 只会持久化一条。 \n\n\t\t* 但是 PID 重启后就会变化，同时不同的 partition 也具有不同主键，所以幂等性无法保证跨分区会话的 Exactly Once\n\t\t```\n\n* 总结\n\t- ack: 决定数据丢失情况\n\t- ISR: 同步副本集合\n\t- HW和LEO\n\n## Kafka消费者\n\n* 消费方式\n\t- consumer 采用 pull（拉取）模式从 broker 中读取数据\n\n\t- broker给consumer推送消息的模式,很难适应消费速率不同的消费者。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞， 而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息\n\n\t- pull 模式不足之处是，如果 Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。因为消费者从 broker 主动拉取数据，需要维护一个长轮询，针对这一点， Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。\n\n* 分区分配策略\n\t- 一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定哪个 partition 由哪个 consumer 来消费\n\n\t- Kafka 有两种分配策略，一个是 RoundRobin，一个是 Range，默认为range，当消费者组内消费者发生变化时，会触发分区分配策略（方法重新分配\n\n\t- 当消费者组中的消费者数量发生变化的时候会触发分区分配策略\n\t- RoundRobin\n\n\t\t![preview](https://pic2.zhimg.com/v2-71b0b3eba72505d5658e94446bc159b9_r.jpg)\n\n\t- Range range 方式是按照主题来分的，不会产生轮询方式的消费混乱问题。\n\n\t\t![img](https://pic4.zhimg.com/80/v2-587357091d733d72a6fb62555ec0a247_720w.jpg)\n\n* offset维护\n\t- consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。 \n\t- Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为 __consumer_offsets，都是按照<组-主题-分区>三个条件确定一个offset\n\n## Kafka高效读写数据\n\n* 顺序写磁盘\n\t```\n\tkafka 生产者写数据是有序的，即 Partition 内部有序，数据以 append 的方式顺序追加写入。Consumer 消费数据也是有序的，指定 offset 后顺序读出 offset 之后的数据。顺序读写可以避免磁盘读数据时的多次寻道和旋转延迟\n\t```\n\n* 零拷贝技术\n\t![preview](https://pic1.zhimg.com/v2-023030c309ec9406c0a69763f451bcb0_r.jpg)\n\t```\n\t- 传统IO流程:\n\t\t1、第一次：将磁盘文件，读取到操作系统内核缓冲区；\n\t\t2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；\n\t\t3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；\n\t\t4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。\n\n\t\t* 传统方式，读取磁盘文件并进行网络发送，经过的四次数据copy是非常繁琐的。实际IO读写，需要进行IO中断，需要CPU响应中断(带来上下文切换)，尽管后来引入DMA来接管CPU的中断请求，但四次copy是存在 不必要的拷⻉的。\n\t```\n\t![preview](https://pic3.zhimg.com/v2-798463e8afa943f27eec0c980f910f86_r.jpg)\n\t```\n\t零拷贝技术: \n\t\t1.将文件拷⻉到kernel buffer中；\n\t\t2.向socket buffer中追加当前要发生的数据在kernel buffer中的位置和偏移量；\n\t\t3.根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备中；\n\n\t\t*  经过上述过程，数据只经过了2次copy就从磁盘传送出去了。这个才是真正的Zero-Copy(这里的零拷⻉是针对kernel来讲的，数据在kernel模式下是Zero-Copy)。\n\t```\n\n## Kafka事务\n\n* Kafka事务特性是指一系列的生产者生产消息和消费者提交偏移量的操作在一个事务中，或者说是一个原子操作，生产消息和提交偏移量同时成功或者失败。\n\n* Kafka事务使用\n\t- 生产者发送多条消息可以封装在一个事务中，形成一个原子操作。多条消息要么都发送成功，要么都发送失败。\n\t- read-process-write模式：将消息消费和生产封装在一个事务中，形成一个原子操作。在一个流式处理的应用中，常常一个服务需要从上游接收消息，然后经过处理后送达到下游，这就对应着消息的消费和生成。\n\n```\n* 没有事务机制的幂等性只能保证单个 Producer 对于同一个<Topic, Partition>的Exactly Once语义\n\n* 并不能保证以下几个操作的Exactly Once操作\n\t- 写操作的原子性——即多个写操作，要么全部被 Commit 要么全部不被 Commit\n\t- 多个读写操作的原子性——对于 Kafka Stream 应用而言，典型的操作即是从某个 Topic 消费数据，经过一系列转换后写回另一个 Topic，保证从源 Topic 的读取与向目标 Topic 的写入的原子性有助于从故障中恢复。\n\n* 为了实现事务，应用程序必须提供一个稳定的（重启后不变）唯一的 ID，也即Transaction ID。Transactin ID与PID绑定。区别在于Transaction ID由用户提供，而PID是内部的实现对用户透明。\n\n* Kafka为了支持事务特性，引入一个新的组件：Transaction Coordinator。主要负责分配pid，记录事务状态等操作\n```\n\n## 生产者发送消息有哪些模式\n\n* 发后即忘(fire-and-forget): 它只管往 Kafka 里面发送消息，但是不关心消息是否正确到达，这种方式的效率最高，但是可靠性也最差，比如当发生某些不可充实异常的时候会造成消息的丢失\n* 同步(ync): producer.send()返回一个Future对象，调用get()方法变回进行同步等待，就知道消息是否发送成功，发送一条消息需要等上个消息发送成功后才可以继续发送\n* 异步(async): Kafka支持 producer.send() 传入一个回调函数，消息不管成功或者失败都会调用这个回调函数，这样就算是异步发送，我们也知道消息的发送情况，然后再回调函数中选择记录日志还是重试都取决于调用方 \n\n## Kafka实现负载均衡的方式:\n\n* Kafka 的负责均衡主要是通过分区来实现的，Kafka 是主写主读的架构，如下图:\n<img src=\"https://pic4.zhimg.com/v2-1d7719726f1cdcc2bd608a8e9df2c71b_r.jpg\" alt=\"preview\" style=\"zoom:50%;\" />\n* 每个 broker 都有消费者拉取消息，每个 broker 也都有生产者发送消息，每个 broker 上的读写负载都是一样的，这也说明了 kafka 独特的架构方式可以通过主写主读来实现负载均衡。\n\n## Kafka 的负责均衡存在的问题\n\n* broker 端分配不均: 当创建 topic 的时候可能会出现某些 broker 分配到的分区数多，而有些 broker 分配的分区少，这就导致了 leader 多副本不均\n* 生产者写入消息不均: 生产者可能只对某些 broker 中的 leader 副本进行大量的写入操作，而对其他的 leader 副本不闻不问。\n* 消费者消费不均: 消费者可能只对某些 broker 中的 leader 副本进行大量的拉取操作，而对其他的 leader 副本不闻不问。\n* leader 副本切换不均：当主从副本切换或者分区副本进行了重分配后，可能会导致各个 broker 中的 leader 副本分配不均匀。\n\n## 分区再分配\n\n* 分区再分配主要是用来维护 kafka 集群的负载均衡\n* 场景一: 如果一个节点的分区是单副本的,那么结点下线会导致分区将会变得不可用\n* 场景二: 当集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。\n* 分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移\n* 分区再分配的原理就是通过控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一些列保证性能的操作，比如复制限流\n\n## 增强消费者消费能力的方法\n\n* 增加 topic 的分区数，并且同时提升消费组的消费者数量，消费者数=分区数。\n* 可以采用多线程的方式进行消费，并且优化业务方法流程\n\n## Kafka控制器作用\n\n* Kafka 集群中有一台broker 会被选举为控制器，它负责管理整个集群中所有分区和副本的状态，kafka 集群中只能有一个控制器\n\t- 当某个分区的 leader 副本出现故障时，由控制器负责为该分区选举新的 leader 副本\n\t- 检测到某个分区的ISR集合发生变化时，由控制器负责通知所有 broker 更新其元数据信息\n\t- 当为某个 topic 增加分区数量时，由控制器负责分区的重新分配\n\n## Kafka速度快的原因\n\n* 顺序读写\n* Page Cache: 为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache\n* 零拷贝: Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭\n* 分区分段+索引\n* 批量读写\n* 批量压缩\n","source":"_posts/go/kafka.md","raw":"---\ntitle: Kafka基础 \ncategories: \n- GolangStudy\n---\n# Kafka基础 \n\n* Kafka是一个分布式的基于发布/订阅模式的消息队列，主要用于大数据实时处理\n\n## 消息队列\n\n* 使用消息队列的好处:\n\t- 解耦: 可以独立地扩展或者修改两边的处理过程\n\t- 可恢复性: 即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理\n\t- 缓冲: 解决生产者和消费者处理消息速度不一致的情况(生产 > 消费)\n\t- 灵活性和削峰处理能力: 不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。\n\t- 异步通信: 消息队列允许用户把消息放入队列但不立即处理它。\n\n* 消息队列的两种模式\n\t- 点对点模式(一对一[消息 对 消费者]，消费者主动拉取数据，消息收到后消息清除)\n\t\t```\n\t\t* 消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。\n\n\t\t* 消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费\n\t\t```\n\n\t\t![查看源图像](https://img-blog.csdnimg.cn/20200802210501168.png)\n\n\t- 发布订阅(一对多[消息 对 消费者], 消费者消费数据之后不会清除数据，消费者主动拉取的模式)\n\n\t\t```\n\t\t* 消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。\n\n\t\t* 和点对点方式不同，发布到topic的消息会被所有订阅者消费。\n\t\t```\n\n\t\t![查看源图像](https://pic2.zhimg.com/v2-08a36aa5e745285aebe8352d9f7fbebf_r.jpg)\n\n## Kafka基础架构\n\n![查看源图像](https://www.diguage.com/images/kafka/kafka-architecture.png)\n\n* Producer生产者进程产生的数据可以被发布到不同的Topic主题下的不同 Partition 分区\n* 在一个分区内，这些消息被索引并连同时间戳存储在一起。\n* Consumer 消费者进程可以从分区订阅消息\n\n* Kafka重要概念\n\t- Producer： 消息生产者，向 Kafka Broker 发消息的客户端。\n\t- Consumer： 消息消费者，从 Kafka Broker 取消息的客户端。\n\t- Consumer Group： 消费者组（CG），消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\n\t- Broker： 一台 Kafka 机器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。\n\t- Topic： 可以理解为一个队列，topic 将消息分类，生产者和消费者面向的是同一个 topic。\n\t- Partition： 为了实现扩展性，提高并发能力，一个非常大的 topic 可以分布到多个 broker （即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个 有序的队列。\n\t- Replica： 副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。\n\t- Leader： 每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 leader。\n\t- Follower： 每个分区多个副本的“从”副本，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 还会成为新的 leader。\n\t- offset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。\n\t- Zookeeper： Kafka 集群能够正常工作，需要依赖于 zookeeper，zookeeper 帮助 Kafka 存储和管理集群信息。\n\n## Kafka安装和基本使用\n\n* 启动Kafka\n\t- 启动zookeeper\n\t\t``` bash\n\t\tsudo bin/zookeeper-server-start.sh  config/zookeeper.properties \n\t\t# 后台启动zookeeper\n\t\tsudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties \n\t\t```\n\t- 启动kafka\n\t\t``` bash\n\t\tsudo bin/kafka-server-start.sh config/server.properties \n\t\t# 后台启动kafka\n\t\tsudo bin/kafka-server-start.sh -daemon config/server.properties \n\t\t```\n\n* 停止Kafka\n\t- 停止kafka\n\t`sudo bin/kafka-server-stop.sh`\n\t- 停止zookeeper\n\t`sudo bin/zookeeper-server-stop.sh`\n\n\n* 测试kafaka\n\n* 创建一个测试的Topic\n\t``` bash\n\tbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n\n\t\t- --replication-factor  副本数\n\t\t- --partitions  分区数\n\t\t- --topic 指定topic名字\n\t```\n\n* 查看Topic\n\t``` bash\n\t#连接zookkeeper模式\n\tbin/kafka-topics.sh --list --zookeeper localhost:2181  \n\t#直接kafka模式\n\tbin/kafka-topics.sh --list --bootstrap-server localhost:9092\n\t```\n\n* 删除Topic\n\t``` bash\n\tbin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic test \n\t```\n\n* 查看Topic描述信息\n\t``` bash\n\tbin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test \n\t```\n\n* 产生消息\n\t``` bash\n\t#直接kafka模式\n\tbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test \n\t```\n\n* 消费消息\n\t``` bash\n\tbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n\t#直接kafka模式\n\tbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\t```\n\n## Kafka架构深入\n\n`Kafka工作流程`\n\n![查看源图像](https://www.freesion.com/images/679/61ba1660d8ee0128987a3e012674cad7.png)\n\n* Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，面向的都是同一个 topic。\n\n* topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 Producer 生产的数据。Producer 生产的数据会不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。\n\n`Kafka文件存储`\n\n![preview](https://pic2.zhimg.com/v2-23dcdca68db7e5406e3f036297f68c4d_r.jpg)\n\n* 由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了分片和索引机制，将每个 partition 分为多个 segment，每个 segment 对应两个文件：“.index” 索引文件和 “.log” 数据文件\n\n## Kafka生产者\n\n* 分区原因\n\t- 方便在集群中扩展，每个 partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 partition 组成，因此可以以 partition 为单位读写了。\n\t- 可以提高并发，以 partition 为单位读写了。\n\n* 分区原则\n\t```\n\t我们需要将 Producer 发送的数据封装成一个 ProducerRecord 对象。该对象需要指定一些参数：\n\t- topic：string 类型，NotNull\n\t- partition：int 类型，可选\n\t- timestamp：long 类型，可选\n\t- key：string类型，可选\n\t- value：string 类型，可选\n\t- headers：array 类型，Nullable\n\t```\n\t- 指明 partition 的情况下，直接指明的值 作为 partition 的值。\n\t- 没有指明 partition 但有 key 的情况下，将 key 的 hash 值与分区数取余得到 partition 值。\n\t- 既没有 partition 有没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用都在这个整数上自增），将这个值与可用的分区数取余，得到 partition 值，也就是常说的 round-robin 轮询算法。\n\n* 生产者数据可靠性保证\n\t- 为保证 producer 发送的数据，能可靠地发送到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack（acknowledge 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据\n\n\t![preview](https://pic3.zhimg.com/v2-2225e28f85f77380de5fcededf77249e_r.jpg)\n\n\t- 副本数据同步策略\n\t\t```\n\t\t* 何时发送ack?\n\t\t\t- leader 收到数据之后\n\t\t\t- leader数据并同步到follower之后\n\t\t* 多少follower同步完成之后发送ack?\n\t\t\t- 半数同步完成\n\t\t\t- 全部同步完成\n\t\t* Kafka选择全部同步完成才发送ack的方案在忍受相同机器故障的情况下所需的及取数更少\n\t\t```\n\t\t![preview](https://pic4.zhimg.com/v2-05f1d9b679c8db558d56dc9afcc8c4c3_r.jpg)\n\n\t- ISR\n\t\t```\n\t\t* 采用第二种方案，所有 follower 完成同步，producer 才能继续发送数据，设想有一个 follower 因为某种原因出现故障，那 leader 就要一直等到它完成同步。这个问题怎么解决？ \n\n\t\t* leader维护了一个动态的 in-sync replica set（ISR), 意为和 leader 保持同步的 follower 集合。当 ISR 集合中的 follower 完成数据的同步之后，leader 就会给 producer 发送 ack。如果 follower 长时间未向 leader 同步数据，则该 follower 将被踢出 ISR 集合，该时间阈值由 replica.lag.time.max.ms 参数设定。\n\n\t\t* leader 发生故障后，就会从 ISR 中选举出新的 leader\n\t\t```\n\t\n\t- acks 参数配置\n\t\t```\n\t\t* 对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等 ISR 中的 follower 全部接受成功。 \n\n\t\t* 所以 Kafka 为用户提供了三种可靠性级别，用户根据可靠性和延迟的要求进行权衡，选择以下的配置\n\t\t```\n\n\t\t* 0：producer 不等待 broker 的 ack，这提供了最低延迟，broker 一收到数据还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据。\n\t\t* 1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据。\n\t\t* -1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是在 broker 发送 ack 时，leader 发生故障，则会造成数据重复。\n\n\t\t![img](https://pic2.zhimg.com/80/v2-73974b936cd969c98eab1a088e680bd5_720w.jpg)\n\t\n\t- 故障处理细节\n\t\t![preview](https://pic2.zhimg.com/v2-b417f990a4378583e76dfde8672bf4d1_r.jpg)\n\n\t\t```\n\t\t* LEO：每个副本最大的 offset。 \n\t\t* HW：消费者能见到的最大的 offset，ISR 队列中最小的 LEO\n\t\t```\n\t\t* Follower 故障\n\t\t\t```\n\t\t\tfollower 发生故障后会被临时踢出 ISR 集合，待该 follower 恢复后，follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步数据操作。等该 follower 的 LEO 大于等于该 partition 的 HW，即 follower 追上 leader 后，就可以重新加入 ISR 了。\n\t\t\t```\n\t\t* Leader 故障\n\t\t\t```\n\t\t\t* leader 发生故障后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。 \n\n\t\t\t* 注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复，acks机制会影响数据丢失性\n\t\t\t```\n\n\t- Exactly Once 语义\n\t\t```\n\t\t* 将服务器的 ACK 级别设置为-1，可以保证 producer 到 server 之间不会丢失数据，即 At Least Once 语义。\n\n\t\t* 将服务器 ACK 级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once 语义\n\n\t\t* At Least Once 可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once 可以保证数据不重复，但是不能保证数据不丢失。\n\n\t\t* 但是，对于一些非常重要的信息，比如交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义\n\n\t\t* 引入了幂等性：producer 不论向 server 发送多少重复数据，server 端都只会持久化一条。即：At Least Once + 幂等性 = Exactly Once\n\n\t\t* 启用幂等性，只需要将 producer 的参数中 enable.idompotence 设置为 true 即可\n\n\t\t* 开启幂等性的 producer 在初始化时会被分配一个 PID，发往同一 partition 的消息会附带 Sequence Number。而 borker 端会对 <PID,Partition,SeqNumber> 做缓存，当具有相同主键的消息提交时，broker 只会持久化一条。 \n\n\t\t* 但是 PID 重启后就会变化，同时不同的 partition 也具有不同主键，所以幂等性无法保证跨分区会话的 Exactly Once\n\t\t```\n\n* 总结\n\t- ack: 决定数据丢失情况\n\t- ISR: 同步副本集合\n\t- HW和LEO\n\n## Kafka消费者\n\n* 消费方式\n\t- consumer 采用 pull（拉取）模式从 broker 中读取数据\n\n\t- broker给consumer推送消息的模式,很难适应消费速率不同的消费者。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞， 而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息\n\n\t- pull 模式不足之处是，如果 Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。因为消费者从 broker 主动拉取数据，需要维护一个长轮询，针对这一点， Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。\n\n* 分区分配策略\n\t- 一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定哪个 partition 由哪个 consumer 来消费\n\n\t- Kafka 有两种分配策略，一个是 RoundRobin，一个是 Range，默认为range，当消费者组内消费者发生变化时，会触发分区分配策略（方法重新分配\n\n\t- 当消费者组中的消费者数量发生变化的时候会触发分区分配策略\n\t- RoundRobin\n\n\t\t![preview](https://pic2.zhimg.com/v2-71b0b3eba72505d5658e94446bc159b9_r.jpg)\n\n\t- Range range 方式是按照主题来分的，不会产生轮询方式的消费混乱问题。\n\n\t\t![img](https://pic4.zhimg.com/80/v2-587357091d733d72a6fb62555ec0a247_720w.jpg)\n\n* offset维护\n\t- consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。 \n\t- Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为 __consumer_offsets，都是按照<组-主题-分区>三个条件确定一个offset\n\n## Kafka高效读写数据\n\n* 顺序写磁盘\n\t```\n\tkafka 生产者写数据是有序的，即 Partition 内部有序，数据以 append 的方式顺序追加写入。Consumer 消费数据也是有序的，指定 offset 后顺序读出 offset 之后的数据。顺序读写可以避免磁盘读数据时的多次寻道和旋转延迟\n\t```\n\n* 零拷贝技术\n\t![preview](https://pic1.zhimg.com/v2-023030c309ec9406c0a69763f451bcb0_r.jpg)\n\t```\n\t- 传统IO流程:\n\t\t1、第一次：将磁盘文件，读取到操作系统内核缓冲区；\n\t\t2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；\n\t\t3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；\n\t\t4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。\n\n\t\t* 传统方式，读取磁盘文件并进行网络发送，经过的四次数据copy是非常繁琐的。实际IO读写，需要进行IO中断，需要CPU响应中断(带来上下文切换)，尽管后来引入DMA来接管CPU的中断请求，但四次copy是存在 不必要的拷⻉的。\n\t```\n\t![preview](https://pic3.zhimg.com/v2-798463e8afa943f27eec0c980f910f86_r.jpg)\n\t```\n\t零拷贝技术: \n\t\t1.将文件拷⻉到kernel buffer中；\n\t\t2.向socket buffer中追加当前要发生的数据在kernel buffer中的位置和偏移量；\n\t\t3.根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备中；\n\n\t\t*  经过上述过程，数据只经过了2次copy就从磁盘传送出去了。这个才是真正的Zero-Copy(这里的零拷⻉是针对kernel来讲的，数据在kernel模式下是Zero-Copy)。\n\t```\n\n## Kafka事务\n\n* Kafka事务特性是指一系列的生产者生产消息和消费者提交偏移量的操作在一个事务中，或者说是一个原子操作，生产消息和提交偏移量同时成功或者失败。\n\n* Kafka事务使用\n\t- 生产者发送多条消息可以封装在一个事务中，形成一个原子操作。多条消息要么都发送成功，要么都发送失败。\n\t- read-process-write模式：将消息消费和生产封装在一个事务中，形成一个原子操作。在一个流式处理的应用中，常常一个服务需要从上游接收消息，然后经过处理后送达到下游，这就对应着消息的消费和生成。\n\n```\n* 没有事务机制的幂等性只能保证单个 Producer 对于同一个<Topic, Partition>的Exactly Once语义\n\n* 并不能保证以下几个操作的Exactly Once操作\n\t- 写操作的原子性——即多个写操作，要么全部被 Commit 要么全部不被 Commit\n\t- 多个读写操作的原子性——对于 Kafka Stream 应用而言，典型的操作即是从某个 Topic 消费数据，经过一系列转换后写回另一个 Topic，保证从源 Topic 的读取与向目标 Topic 的写入的原子性有助于从故障中恢复。\n\n* 为了实现事务，应用程序必须提供一个稳定的（重启后不变）唯一的 ID，也即Transaction ID。Transactin ID与PID绑定。区别在于Transaction ID由用户提供，而PID是内部的实现对用户透明。\n\n* Kafka为了支持事务特性，引入一个新的组件：Transaction Coordinator。主要负责分配pid，记录事务状态等操作\n```\n\n## 生产者发送消息有哪些模式\n\n* 发后即忘(fire-and-forget): 它只管往 Kafka 里面发送消息，但是不关心消息是否正确到达，这种方式的效率最高，但是可靠性也最差，比如当发生某些不可充实异常的时候会造成消息的丢失\n* 同步(ync): producer.send()返回一个Future对象，调用get()方法变回进行同步等待，就知道消息是否发送成功，发送一条消息需要等上个消息发送成功后才可以继续发送\n* 异步(async): Kafka支持 producer.send() 传入一个回调函数，消息不管成功或者失败都会调用这个回调函数，这样就算是异步发送，我们也知道消息的发送情况，然后再回调函数中选择记录日志还是重试都取决于调用方 \n\n## Kafka实现负载均衡的方式:\n\n* Kafka 的负责均衡主要是通过分区来实现的，Kafka 是主写主读的架构，如下图:\n<img src=\"https://pic4.zhimg.com/v2-1d7719726f1cdcc2bd608a8e9df2c71b_r.jpg\" alt=\"preview\" style=\"zoom:50%;\" />\n* 每个 broker 都有消费者拉取消息，每个 broker 也都有生产者发送消息，每个 broker 上的读写负载都是一样的，这也说明了 kafka 独特的架构方式可以通过主写主读来实现负载均衡。\n\n## Kafka 的负责均衡存在的问题\n\n* broker 端分配不均: 当创建 topic 的时候可能会出现某些 broker 分配到的分区数多，而有些 broker 分配的分区少，这就导致了 leader 多副本不均\n* 生产者写入消息不均: 生产者可能只对某些 broker 中的 leader 副本进行大量的写入操作，而对其他的 leader 副本不闻不问。\n* 消费者消费不均: 消费者可能只对某些 broker 中的 leader 副本进行大量的拉取操作，而对其他的 leader 副本不闻不问。\n* leader 副本切换不均：当主从副本切换或者分区副本进行了重分配后，可能会导致各个 broker 中的 leader 副本分配不均匀。\n\n## 分区再分配\n\n* 分区再分配主要是用来维护 kafka 集群的负载均衡\n* 场景一: 如果一个节点的分区是单副本的,那么结点下线会导致分区将会变得不可用\n* 场景二: 当集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。\n* 分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移\n* 分区再分配的原理就是通过控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一些列保证性能的操作，比如复制限流\n\n## 增强消费者消费能力的方法\n\n* 增加 topic 的分区数，并且同时提升消费组的消费者数量，消费者数=分区数。\n* 可以采用多线程的方式进行消费，并且优化业务方法流程\n\n## Kafka控制器作用\n\n* Kafka 集群中有一台broker 会被选举为控制器，它负责管理整个集群中所有分区和副本的状态，kafka 集群中只能有一个控制器\n\t- 当某个分区的 leader 副本出现故障时，由控制器负责为该分区选举新的 leader 副本\n\t- 检测到某个分区的ISR集合发生变化时，由控制器负责通知所有 broker 更新其元数据信息\n\t- 当为某个 topic 增加分区数量时，由控制器负责分区的重新分配\n\n## Kafka速度快的原因\n\n* 顺序读写\n* Page Cache: 为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache\n* 零拷贝: Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭\n* 分区分段+索引\n* 批量读写\n* 批量压缩\n","slug":"go/kafka","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6e8000df8wz93wk0xks","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Kafka基础\"><a href=\"#Kafka基础\" class=\"headerlink\" title=\"Kafka基础\"></a>Kafka基础</h1><ul>\n<li>Kafka是一个分布式的基于发布/订阅模式的消息队列，主要用于大数据实时处理</li>\n</ul>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><ul>\n<li><p>使用消息队列的好处:</p>\n<ul>\n<li>解耦: 可以独立地扩展或者修改两边的处理过程</li>\n<li>可恢复性: 即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理</li>\n<li>缓冲: 解决生产者和消费者处理消息速度不一致的情况(生产 &gt; 消费)</li>\n<li>灵活性和削峰处理能力: 不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。</li>\n<li>异步通信: 消息队列允许用户把消息放入队列但不立即处理它。</li>\n</ul>\n</li>\n<li><p>消息队列的两种模式</p>\n<ul>\n<li><p>点对点模式(一对一[消息 对 消费者]，消费者主动拉取数据，消息收到后消息清除)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。</span><br><span class=\"line\"></span><br><span class=\"line\">* 消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://img-blog.csdnimg.cn/20200802210501168.png\" alt=\"查看源图像\"></p>\n</li>\n<li><p>发布订阅(一对多[消息 对 消费者], 消费者消费数据之后不会清除数据，消费者主动拉取的模式)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。</span><br><span class=\"line\"></span><br><span class=\"line\">* 和点对点方式不同，发布到topic的消息会被所有订阅者消费。</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://pic2.zhimg.com/v2-08a36aa5e745285aebe8352d9f7fbebf_r.jpg\" alt=\"查看源图像\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka基础架构\"><a href=\"#Kafka基础架构\" class=\"headerlink\" title=\"Kafka基础架构\"></a>Kafka基础架构</h2><p><img src=\"https://www.diguage.com/images/kafka/kafka-architecture.png\" alt=\"查看源图像\"></p>\n<ul>\n<li><p>Producer生产者进程产生的数据可以被发布到不同的Topic主题下的不同 Partition 分区</p>\n</li>\n<li><p>在一个分区内，这些消息被索引并连同时间戳存储在一起。</p>\n</li>\n<li><p>Consumer 消费者进程可以从分区订阅消息</p>\n</li>\n<li><p>Kafka重要概念</p>\n<ul>\n<li>Producer： 消息生产者，向 Kafka Broker 发消息的客户端。</li>\n<li>Consumer： 消息消费者，从 Kafka Broker 取消息的客户端。</li>\n<li>Consumer Group： 消费者组（CG），消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li>\n<li>Broker： 一台 Kafka 机器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。</li>\n<li>Topic： 可以理解为一个队列，topic 将消息分类，生产者和消费者面向的是同一个 topic。</li>\n<li>Partition： 为了实现扩展性，提高并发能力，一个非常大的 topic 可以分布到多个 broker （即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个 有序的队列。</li>\n<li>Replica： 副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。</li>\n<li>Leader： 每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 leader。</li>\n<li>Follower： 每个分区多个副本的“从”副本，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 还会成为新的 leader。</li>\n<li>offset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。</li>\n<li>Zookeeper： Kafka 集群能够正常工作，需要依赖于 zookeeper，zookeeper 帮助 Kafka 存储和管理集群信息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka安装和基本使用\"><a href=\"#Kafka安装和基本使用\" class=\"headerlink\" title=\"Kafka安装和基本使用\"></a>Kafka安装和基本使用</h2><ul>\n<li><p>启动Kafka</p>\n<ul>\n<li>启动zookeeper  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/zookeeper-server-start.sh  config/zookeeper.properties </span><br><span class=\"line\"><span class=\"comment\"># 后台启动zookeeper</span></span><br><span class=\"line\">sudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties </span><br></pre></td></tr></table></figure></li>\n<li>启动kafka  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/kafka-server-start.sh config/server.properties </span><br><span class=\"line\"><span class=\"comment\"># 后台启动kafka</span></span><br><span class=\"line\">sudo bin/kafka-server-start.sh -daemon config/server.properties </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>停止Kafka</p>\n<ul>\n<li>停止kafka<br><code>sudo bin/kafka-server-stop.sh</code></li>\n<li>停止zookeeper<br><code>sudo bin/zookeeper-server-stop.sh</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试kafaka</p>\n</li>\n<li><p>创建一个测试的Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t- --replication-factor  副本数</span><br><span class=\"line\">\t- --partitions  分区数</span><br><span class=\"line\">\t- --topic 指定topic名字</span><br></pre></td></tr></table></figure></li>\n<li><p>查看Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接zookkeeper模式</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181  </span><br><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure></li>\n<li><p>删除Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>查看Topic描述信息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>产生消息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>消费消息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class=\"built_in\">test</span> --from-beginning</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Kafka架构深入\"><a href=\"#Kafka架构深入\" class=\"headerlink\" title=\"Kafka架构深入\"></a>Kafka架构深入</h2><p><code>Kafka工作流程</code></p>\n<p><img src=\"https://www.freesion.com/images/679/61ba1660d8ee0128987a3e012674cad7.png\" alt=\"查看源图像\"></p>\n<ul>\n<li><p>Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，面向的都是同一个 topic。</p>\n</li>\n<li><p>topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 Producer 生产的数据。Producer 生产的数据会不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。</p>\n</li>\n</ul>\n<p><code>Kafka文件存储</code></p>\n<p><img src=\"https://pic2.zhimg.com/v2-23dcdca68db7e5406e3f036297f68c4d_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了分片和索引机制，将每个 partition 分为多个 segment，每个 segment 对应两个文件：“.index” 索引文件和 “.log” 数据文件</li>\n</ul>\n<h2 id=\"Kafka生产者\"><a href=\"#Kafka生产者\" class=\"headerlink\" title=\"Kafka生产者\"></a>Kafka生产者</h2><ul>\n<li><p>分区原因</p>\n<ul>\n<li>方便在集群中扩展，每个 partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 partition 组成，因此可以以 partition 为单位读写了。</li>\n<li>可以提高并发，以 partition 为单位读写了。</li>\n</ul>\n</li>\n<li><p>分区原则</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们需要将 Producer 发送的数据封装成一个 ProducerRecord 对象。该对象需要指定一些参数：</span><br><span class=\"line\">- topic：string 类型，NotNull</span><br><span class=\"line\">- partition：int 类型，可选</span><br><span class=\"line\">- timestamp：long 类型，可选</span><br><span class=\"line\">- key：string类型，可选</span><br><span class=\"line\">- value：string 类型，可选</span><br><span class=\"line\">- headers：array 类型，Nullable</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指明 partition 的情况下，直接指明的值 作为 partition 的值。</li>\n<li>没有指明 partition 但有 key 的情况下，将 key 的 hash 值与分区数取余得到 partition 值。</li>\n<li>既没有 partition 有没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用都在这个整数上自增），将这个值与可用的分区数取余，得到 partition 值，也就是常说的 round-robin 轮询算法。</li>\n</ul>\n</li>\n<li><p>生产者数据可靠性保证</p>\n<ul>\n<li>为保证 producer 发送的数据，能可靠地发送到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack（acknowledge 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据</li>\n</ul>\n<p>  <img src=\"https://pic3.zhimg.com/v2-2225e28f85f77380de5fcededf77249e_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li><p>副本数据同步策略</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 何时发送ack?</span><br><span class=\"line\">\t- leader 收到数据之后</span><br><span class=\"line\">\t- leader数据并同步到follower之后</span><br><span class=\"line\">* 多少follower同步完成之后发送ack?</span><br><span class=\"line\">\t- 半数同步完成</span><br><span class=\"line\">\t- 全部同步完成</span><br><span class=\"line\">* Kafka选择全部同步完成才发送ack的方案在忍受相同机器故障的情况下所需的及取数更少</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://pic4.zhimg.com/v2-05f1d9b679c8db558d56dc9afcc8c4c3_r.jpg\" alt=\"preview\"></p>\n</li>\n<li><p>ISR</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 采用第二种方案，所有 follower 完成同步，producer 才能继续发送数据，设想有一个 follower 因为某种原因出现故障，那 leader 就要一直等到它完成同步。这个问题怎么解决？ </span><br><span class=\"line\"></span><br><span class=\"line\">* leader维护了一个动态的 in-sync replica set（ISR), 意为和 leader 保持同步的 follower 集合。当 ISR 集合中的 follower 完成数据的同步之后，leader 就会给 producer 发送 ack。如果 follower 长时间未向 leader 同步数据，则该 follower 将被踢出 ISR 集合，该时间阈值由 replica.lag.time.max.ms 参数设定。</span><br><span class=\"line\"></span><br><span class=\"line\">* leader 发生故障后，就会从 ISR 中选举出新的 leader</span><br></pre></td></tr></table></figure></li>\n<li><p>acks 参数配置</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等 ISR 中的 follower 全部接受成功。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 所以 Kafka 为用户提供了三种可靠性级别，用户根据可靠性和延迟的要求进行权衡，选择以下的配置</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0：producer 不等待 broker 的 ack，这提供了最低延迟，broker 一收到数据还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据。</li>\n<li>1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据。</li>\n<li>-1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是在 broker 发送 ack 时，leader 发生故障，则会造成数据重复。</li>\n</ul>\n<p>  <img src=\"https://pic2.zhimg.com/80/v2-73974b936cd969c98eab1a088e680bd5_720w.jpg\" alt=\"img\"></p>\n</li>\n<li><p>故障处理细节<br>  <img src=\"https://pic2.zhimg.com/v2-b417f990a4378583e76dfde8672bf4d1_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* LEO：每个副本最大的 offset。 </span><br><span class=\"line\">* HW：消费者能见到的最大的 offset，ISR 队列中最小的 LEO</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Follower 故障  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">follower 发生故障后会被临时踢出 ISR 集合，待该 follower 恢复后，follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步数据操作。等该 follower 的 LEO 大于等于该 partition 的 HW，即 follower 追上 leader 后，就可以重新加入 ISR 了。</span><br></pre></td></tr></table></figure></li>\n<li>Leader 故障  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* leader 发生故障后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复，acks机制会影响数据丢失性</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Exactly Once 语义</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 将服务器的 ACK 级别设置为-1，可以保证 producer 到 server 之间不会丢失数据，即 At Least Once 语义。</span><br><span class=\"line\"></span><br><span class=\"line\">* 将服务器 ACK 级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once 语义</span><br><span class=\"line\"></span><br><span class=\"line\">* At Least Once 可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once 可以保证数据不重复，但是不能保证数据不丢失。</span><br><span class=\"line\"></span><br><span class=\"line\">* 但是，对于一些非常重要的信息，比如交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义</span><br><span class=\"line\"></span><br><span class=\"line\">* 引入了幂等性：producer 不论向 server 发送多少重复数据，server 端都只会持久化一条。即：At Least Once + 幂等性 = Exactly Once</span><br><span class=\"line\"></span><br><span class=\"line\">* 启用幂等性，只需要将 producer 的参数中 enable.idompotence 设置为 true 即可</span><br><span class=\"line\"></span><br><span class=\"line\">* 开启幂等性的 producer 在初始化时会被分配一个 PID，发往同一 partition 的消息会附带 Sequence Number。而 borker 端会对 &lt;PID,Partition,SeqNumber&gt; 做缓存，当具有相同主键的消息提交时，broker 只会持久化一条。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 但是 PID 重启后就会变化，同时不同的 partition 也具有不同主键，所以幂等性无法保证跨分区会话的 Exactly Once</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>ack: 决定数据丢失情况</li>\n<li>ISR: 同步副本集合</li>\n<li>HW和LEO</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka消费者\"><a href=\"#Kafka消费者\" class=\"headerlink\" title=\"Kafka消费者\"></a>Kafka消费者</h2><ul>\n<li><p>消费方式</p>\n<ul>\n<li><p>consumer 采用 pull（拉取）模式从 broker 中读取数据</p>\n</li>\n<li><p>broker给consumer推送消息的模式,很难适应消费速率不同的消费者。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞， 而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息</p>\n</li>\n<li><p>pull 模式不足之处是，如果 Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。因为消费者从 broker 主动拉取数据，需要维护一个长轮询，针对这一点， Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p>\n</li>\n</ul>\n</li>\n<li><p>分区分配策略</p>\n<ul>\n<li><p>一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定哪个 partition 由哪个 consumer 来消费</p>\n</li>\n<li><p>Kafka 有两种分配策略，一个是 RoundRobin，一个是 Range，默认为range，当消费者组内消费者发生变化时，会触发分区分配策略（方法重新分配</p>\n</li>\n<li><p>当消费者组中的消费者数量发生变化的时候会触发分区分配策略</p>\n</li>\n<li><p>RoundRobin</p>\n<p>  <img src=\"https://pic2.zhimg.com/v2-71b0b3eba72505d5658e94446bc159b9_r.jpg\" alt=\"preview\"></p>\n</li>\n<li><p>Range range 方式是按照主题来分的，不会产生轮询方式的消费混乱问题。</p>\n<p>  <img src=\"https://pic4.zhimg.com/80/v2-587357091d733d72a6fb62555ec0a247_720w.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>offset维护</p>\n<ul>\n<li>consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。 </li>\n<li>Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为 __consumer_offsets，都是按照&lt;组-主题-分区&gt;三个条件确定一个offset</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka高效读写数据\"><a href=\"#Kafka高效读写数据\" class=\"headerlink\" title=\"Kafka高效读写数据\"></a>Kafka高效读写数据</h2><ul>\n<li><p>顺序写磁盘</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka 生产者写数据是有序的，即 Partition 内部有序，数据以 append 的方式顺序追加写入。Consumer 消费数据也是有序的，指定 offset 后顺序读出 offset 之后的数据。顺序读写可以避免磁盘读数据时的多次寻道和旋转延迟</span><br></pre></td></tr></table></figure></li>\n<li><p>零拷贝技术<br>  <img src=\"https://pic1.zhimg.com/v2-023030c309ec9406c0a69763f451bcb0_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 传统IO流程:</span><br><span class=\"line\">\t1、第一次：将磁盘文件，读取到操作系统内核缓冲区；</span><br><span class=\"line\">\t2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；</span><br><span class=\"line\">\t3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；</span><br><span class=\"line\">\t4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。</span><br><span class=\"line\"></span><br><span class=\"line\">\t* 传统方式，读取磁盘文件并进行网络发送，经过的四次数据copy是非常繁琐的。实际IO读写，需要进行IO中断，需要CPU响应中断(带来上下文切换)，尽管后来引入DMA来接管CPU的中断请求，但四次copy是存在 不必要的拷⻉的。</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://pic3.zhimg.com/v2-798463e8afa943f27eec0c980f910f86_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">零拷贝技术: </span><br><span class=\"line\">\t1.将文件拷⻉到kernel buffer中；</span><br><span class=\"line\">\t2.向socket buffer中追加当前要发生的数据在kernel buffer中的位置和偏移量；</span><br><span class=\"line\">\t3.根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备中；</span><br><span class=\"line\"></span><br><span class=\"line\">\t*  经过上述过程，数据只经过了2次copy就从磁盘传送出去了。这个才是真正的Zero-Copy(这里的零拷⻉是针对kernel来讲的，数据在kernel模式下是Zero-Copy)。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Kafka事务\"><a href=\"#Kafka事务\" class=\"headerlink\" title=\"Kafka事务\"></a>Kafka事务</h2><ul>\n<li><p>Kafka事务特性是指一系列的生产者生产消息和消费者提交偏移量的操作在一个事务中，或者说是一个原子操作，生产消息和提交偏移量同时成功或者失败。</p>\n</li>\n<li><p>Kafka事务使用</p>\n<ul>\n<li>生产者发送多条消息可以封装在一个事务中，形成一个原子操作。多条消息要么都发送成功，要么都发送失败。</li>\n<li>read-process-write模式：将消息消费和生产封装在一个事务中，形成一个原子操作。在一个流式处理的应用中，常常一个服务需要从上游接收消息，然后经过处理后送达到下游，这就对应着消息的消费和生成。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 没有事务机制的幂等性只能保证单个 Producer 对于同一个&lt;Topic, Partition&gt;的Exactly Once语义</span><br><span class=\"line\"></span><br><span class=\"line\">* 并不能保证以下几个操作的Exactly Once操作</span><br><span class=\"line\">\t- 写操作的原子性——即多个写操作，要么全部被 Commit 要么全部不被 Commit</span><br><span class=\"line\">\t- 多个读写操作的原子性——对于 Kafka Stream 应用而言，典型的操作即是从某个 Topic 消费数据，经过一系列转换后写回另一个 Topic，保证从源 Topic 的读取与向目标 Topic 的写入的原子性有助于从故障中恢复。</span><br><span class=\"line\"></span><br><span class=\"line\">* 为了实现事务，应用程序必须提供一个稳定的（重启后不变）唯一的 ID，也即Transaction ID。Transactin ID与PID绑定。区别在于Transaction ID由用户提供，而PID是内部的实现对用户透明。</span><br><span class=\"line\"></span><br><span class=\"line\">* Kafka为了支持事务特性，引入一个新的组件：Transaction Coordinator。主要负责分配pid，记录事务状态等操作</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发送消息有哪些模式\"><a href=\"#生产者发送消息有哪些模式\" class=\"headerlink\" title=\"生产者发送消息有哪些模式\"></a>生产者发送消息有哪些模式</h2><ul>\n<li>发后即忘(fire-and-forget): 它只管往 Kafka 里面发送消息，但是不关心消息是否正确到达，这种方式的效率最高，但是可靠性也最差，比如当发生某些不可充实异常的时候会造成消息的丢失</li>\n<li>同步(ync): producer.send()返回一个Future对象，调用get()方法变回进行同步等待，就知道消息是否发送成功，发送一条消息需要等上个消息发送成功后才可以继续发送</li>\n<li>异步(async): Kafka支持 producer.send() 传入一个回调函数，消息不管成功或者失败都会调用这个回调函数，这样就算是异步发送，我们也知道消息的发送情况，然后再回调函数中选择记录日志还是重试都取决于调用方 </li>\n</ul>\n<h2 id=\"Kafka实现负载均衡的方式\"><a href=\"#Kafka实现负载均衡的方式\" class=\"headerlink\" title=\"Kafka实现负载均衡的方式:\"></a>Kafka实现负载均衡的方式:</h2><ul>\n<li>Kafka 的负责均衡主要是通过分区来实现的，Kafka 是主写主读的架构，如下图:<img src=\"https://pic4.zhimg.com/v2-1d7719726f1cdcc2bd608a8e9df2c71b_r.jpg\" alt=\"preview\" style=\"zoom:50%;\" /></li>\n<li>每个 broker 都有消费者拉取消息，每个 broker 也都有生产者发送消息，每个 broker 上的读写负载都是一样的，这也说明了 kafka 独特的架构方式可以通过主写主读来实现负载均衡。</li>\n</ul>\n<h2 id=\"Kafka-的负责均衡存在的问题\"><a href=\"#Kafka-的负责均衡存在的问题\" class=\"headerlink\" title=\"Kafka 的负责均衡存在的问题\"></a>Kafka 的负责均衡存在的问题</h2><ul>\n<li>broker 端分配不均: 当创建 topic 的时候可能会出现某些 broker 分配到的分区数多，而有些 broker 分配的分区少，这就导致了 leader 多副本不均</li>\n<li>生产者写入消息不均: 生产者可能只对某些 broker 中的 leader 副本进行大量的写入操作，而对其他的 leader 副本不闻不问。</li>\n<li>消费者消费不均: 消费者可能只对某些 broker 中的 leader 副本进行大量的拉取操作，而对其他的 leader 副本不闻不问。</li>\n<li>leader 副本切换不均：当主从副本切换或者分区副本进行了重分配后，可能会导致各个 broker 中的 leader 副本分配不均匀。</li>\n</ul>\n<h2 id=\"分区再分配\"><a href=\"#分区再分配\" class=\"headerlink\" title=\"分区再分配\"></a>分区再分配</h2><ul>\n<li>分区再分配主要是用来维护 kafka 集群的负载均衡</li>\n<li>场景一: 如果一个节点的分区是单副本的,那么结点下线会导致分区将会变得不可用</li>\n<li>场景二: 当集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。</li>\n<li>分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移</li>\n<li>分区再分配的原理就是通过控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一些列保证性能的操作，比如复制限流</li>\n</ul>\n<h2 id=\"增强消费者消费能力的方法\"><a href=\"#增强消费者消费能力的方法\" class=\"headerlink\" title=\"增强消费者消费能力的方法\"></a>增强消费者消费能力的方法</h2><ul>\n<li>增加 topic 的分区数，并且同时提升消费组的消费者数量，消费者数=分区数。</li>\n<li>可以采用多线程的方式进行消费，并且优化业务方法流程</li>\n</ul>\n<h2 id=\"Kafka控制器作用\"><a href=\"#Kafka控制器作用\" class=\"headerlink\" title=\"Kafka控制器作用\"></a>Kafka控制器作用</h2><ul>\n<li>Kafka 集群中有一台broker 会被选举为控制器，它负责管理整个集群中所有分区和副本的状态，kafka 集群中只能有一个控制器<ul>\n<li>当某个分区的 leader 副本出现故障时，由控制器负责为该分区选举新的 leader 副本</li>\n<li>检测到某个分区的ISR集合发生变化时，由控制器负责通知所有 broker 更新其元数据信息</li>\n<li>当为某个 topic 增加分区数量时，由控制器负责分区的重新分配</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka速度快的原因\"><a href=\"#Kafka速度快的原因\" class=\"headerlink\" title=\"Kafka速度快的原因\"></a>Kafka速度快的原因</h2><ul>\n<li>顺序读写</li>\n<li>Page Cache: 为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache</li>\n<li>零拷贝: Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭</li>\n<li>分区分段+索引</li>\n<li>批量读写</li>\n<li>批量压缩</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kafka基础\"><a href=\"#Kafka基础\" class=\"headerlink\" title=\"Kafka基础\"></a>Kafka基础</h1><ul>\n<li>Kafka是一个分布式的基于发布/订阅模式的消息队列，主要用于大数据实时处理</li>\n</ul>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><ul>\n<li><p>使用消息队列的好处:</p>\n<ul>\n<li>解耦: 可以独立地扩展或者修改两边的处理过程</li>\n<li>可恢复性: 即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理</li>\n<li>缓冲: 解决生产者和消费者处理消息速度不一致的情况(生产 &gt; 消费)</li>\n<li>灵活性和削峰处理能力: 不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。</li>\n<li>异步通信: 消息队列允许用户把消息放入队列但不立即处理它。</li>\n</ul>\n</li>\n<li><p>消息队列的两种模式</p>\n<ul>\n<li><p>点对点模式(一对一[消息 对 消费者]，消费者主动拉取数据，消息收到后消息清除)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。</span><br><span class=\"line\"></span><br><span class=\"line\">* 消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://img-blog.csdnimg.cn/20200802210501168.png\" alt=\"查看源图像\"></p>\n</li>\n<li><p>发布订阅(一对多[消息 对 消费者], 消费者消费数据之后不会清除数据，消费者主动拉取的模式)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。</span><br><span class=\"line\"></span><br><span class=\"line\">* 和点对点方式不同，发布到topic的消息会被所有订阅者消费。</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://pic2.zhimg.com/v2-08a36aa5e745285aebe8352d9f7fbebf_r.jpg\" alt=\"查看源图像\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka基础架构\"><a href=\"#Kafka基础架构\" class=\"headerlink\" title=\"Kafka基础架构\"></a>Kafka基础架构</h2><p><img src=\"https://www.diguage.com/images/kafka/kafka-architecture.png\" alt=\"查看源图像\"></p>\n<ul>\n<li><p>Producer生产者进程产生的数据可以被发布到不同的Topic主题下的不同 Partition 分区</p>\n</li>\n<li><p>在一个分区内，这些消息被索引并连同时间戳存储在一起。</p>\n</li>\n<li><p>Consumer 消费者进程可以从分区订阅消息</p>\n</li>\n<li><p>Kafka重要概念</p>\n<ul>\n<li>Producer： 消息生产者，向 Kafka Broker 发消息的客户端。</li>\n<li>Consumer： 消息消费者，从 Kafka Broker 取消息的客户端。</li>\n<li>Consumer Group： 消费者组（CG），消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li>\n<li>Broker： 一台 Kafka 机器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。</li>\n<li>Topic： 可以理解为一个队列，topic 将消息分类，生产者和消费者面向的是同一个 topic。</li>\n<li>Partition： 为了实现扩展性，提高并发能力，一个非常大的 topic 可以分布到多个 broker （即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个 有序的队列。</li>\n<li>Replica： 副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。</li>\n<li>Leader： 每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 leader。</li>\n<li>Follower： 每个分区多个副本的“从”副本，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 还会成为新的 leader。</li>\n<li>offset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。</li>\n<li>Zookeeper： Kafka 集群能够正常工作，需要依赖于 zookeeper，zookeeper 帮助 Kafka 存储和管理集群信息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka安装和基本使用\"><a href=\"#Kafka安装和基本使用\" class=\"headerlink\" title=\"Kafka安装和基本使用\"></a>Kafka安装和基本使用</h2><ul>\n<li><p>启动Kafka</p>\n<ul>\n<li>启动zookeeper  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/zookeeper-server-start.sh  config/zookeeper.properties </span><br><span class=\"line\"><span class=\"comment\"># 后台启动zookeeper</span></span><br><span class=\"line\">sudo bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties </span><br></pre></td></tr></table></figure></li>\n<li>启动kafka  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bin/kafka-server-start.sh config/server.properties </span><br><span class=\"line\"><span class=\"comment\"># 后台启动kafka</span></span><br><span class=\"line\">sudo bin/kafka-server-start.sh -daemon config/server.properties </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>停止Kafka</p>\n<ul>\n<li>停止kafka<br><code>sudo bin/kafka-server-stop.sh</code></li>\n<li>停止zookeeper<br><code>sudo bin/zookeeper-server-stop.sh</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试kafaka</p>\n</li>\n<li><p>创建一个测试的Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t- --replication-factor  副本数</span><br><span class=\"line\">\t- --partitions  分区数</span><br><span class=\"line\">\t- --topic 指定topic名字</span><br></pre></td></tr></table></figure></li>\n<li><p>查看Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接zookkeeper模式</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181  </span><br><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-topics.sh --list --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure></li>\n<li><p>删除Topic</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>查看Topic描述信息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>产生消息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure></li>\n<li><p>消费消息</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\"><span class=\"comment\">#直接kafka模式</span></span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class=\"built_in\">test</span> --from-beginning</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Kafka架构深入\"><a href=\"#Kafka架构深入\" class=\"headerlink\" title=\"Kafka架构深入\"></a>Kafka架构深入</h2><p><code>Kafka工作流程</code></p>\n<p><img src=\"https://www.freesion.com/images/679/61ba1660d8ee0128987a3e012674cad7.png\" alt=\"查看源图像\"></p>\n<ul>\n<li><p>Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，面向的都是同一个 topic。</p>\n</li>\n<li><p>topic 是逻辑上的概念，而 partition 是物理上的概念，每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 Producer 生产的数据。Producer 生产的数据会不断追加到该 log 文件末端，且每条数据都有自己的 offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。</p>\n</li>\n</ul>\n<p><code>Kafka文件存储</code></p>\n<p><img src=\"https://pic2.zhimg.com/v2-23dcdca68db7e5406e3f036297f68c4d_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了分片和索引机制，将每个 partition 分为多个 segment，每个 segment 对应两个文件：“.index” 索引文件和 “.log” 数据文件</li>\n</ul>\n<h2 id=\"Kafka生产者\"><a href=\"#Kafka生产者\" class=\"headerlink\" title=\"Kafka生产者\"></a>Kafka生产者</h2><ul>\n<li><p>分区原因</p>\n<ul>\n<li>方便在集群中扩展，每个 partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 partition 组成，因此可以以 partition 为单位读写了。</li>\n<li>可以提高并发，以 partition 为单位读写了。</li>\n</ul>\n</li>\n<li><p>分区原则</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们需要将 Producer 发送的数据封装成一个 ProducerRecord 对象。该对象需要指定一些参数：</span><br><span class=\"line\">- topic：string 类型，NotNull</span><br><span class=\"line\">- partition：int 类型，可选</span><br><span class=\"line\">- timestamp：long 类型，可选</span><br><span class=\"line\">- key：string类型，可选</span><br><span class=\"line\">- value：string 类型，可选</span><br><span class=\"line\">- headers：array 类型，Nullable</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指明 partition 的情况下，直接指明的值 作为 partition 的值。</li>\n<li>没有指明 partition 但有 key 的情况下，将 key 的 hash 值与分区数取余得到 partition 值。</li>\n<li>既没有 partition 有没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用都在这个整数上自增），将这个值与可用的分区数取余，得到 partition 值，也就是常说的 round-robin 轮询算法。</li>\n</ul>\n</li>\n<li><p>生产者数据可靠性保证</p>\n<ul>\n<li>为保证 producer 发送的数据，能可靠地发送到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack（acknowledge 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据</li>\n</ul>\n<p>  <img src=\"https://pic3.zhimg.com/v2-2225e28f85f77380de5fcededf77249e_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li><p>副本数据同步策略</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 何时发送ack?</span><br><span class=\"line\">\t- leader 收到数据之后</span><br><span class=\"line\">\t- leader数据并同步到follower之后</span><br><span class=\"line\">* 多少follower同步完成之后发送ack?</span><br><span class=\"line\">\t- 半数同步完成</span><br><span class=\"line\">\t- 全部同步完成</span><br><span class=\"line\">* Kafka选择全部同步完成才发送ack的方案在忍受相同机器故障的情况下所需的及取数更少</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://pic4.zhimg.com/v2-05f1d9b679c8db558d56dc9afcc8c4c3_r.jpg\" alt=\"preview\"></p>\n</li>\n<li><p>ISR</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 采用第二种方案，所有 follower 完成同步，producer 才能继续发送数据，设想有一个 follower 因为某种原因出现故障，那 leader 就要一直等到它完成同步。这个问题怎么解决？ </span><br><span class=\"line\"></span><br><span class=\"line\">* leader维护了一个动态的 in-sync replica set（ISR), 意为和 leader 保持同步的 follower 集合。当 ISR 集合中的 follower 完成数据的同步之后，leader 就会给 producer 发送 ack。如果 follower 长时间未向 leader 同步数据，则该 follower 将被踢出 ISR 集合，该时间阈值由 replica.lag.time.max.ms 参数设定。</span><br><span class=\"line\"></span><br><span class=\"line\">* leader 发生故障后，就会从 ISR 中选举出新的 leader</span><br></pre></td></tr></table></figure></li>\n<li><p>acks 参数配置</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等 ISR 中的 follower 全部接受成功。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 所以 Kafka 为用户提供了三种可靠性级别，用户根据可靠性和延迟的要求进行权衡，选择以下的配置</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0：producer 不等待 broker 的 ack，这提供了最低延迟，broker 一收到数据还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据。</li>\n<li>1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据。</li>\n<li>-1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是在 broker 发送 ack 时，leader 发生故障，则会造成数据重复。</li>\n</ul>\n<p>  <img src=\"https://pic2.zhimg.com/80/v2-73974b936cd969c98eab1a088e680bd5_720w.jpg\" alt=\"img\"></p>\n</li>\n<li><p>故障处理细节<br>  <img src=\"https://pic2.zhimg.com/v2-b417f990a4378583e76dfde8672bf4d1_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* LEO：每个副本最大的 offset。 </span><br><span class=\"line\">* HW：消费者能见到的最大的 offset，ISR 队列中最小的 LEO</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Follower 故障  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">follower 发生故障后会被临时踢出 ISR 集合，待该 follower 恢复后，follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步数据操作。等该 follower 的 LEO 大于等于该 partition 的 HW，即 follower 追上 leader 后，就可以重新加入 ISR 了。</span><br></pre></td></tr></table></figure></li>\n<li>Leader 故障  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* leader 发生故障后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader 同步数据。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复，acks机制会影响数据丢失性</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Exactly Once 语义</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 将服务器的 ACK 级别设置为-1，可以保证 producer 到 server 之间不会丢失数据，即 At Least Once 语义。</span><br><span class=\"line\"></span><br><span class=\"line\">* 将服务器 ACK 级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once 语义</span><br><span class=\"line\"></span><br><span class=\"line\">* At Least Once 可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once 可以保证数据不重复，但是不能保证数据不丢失。</span><br><span class=\"line\"></span><br><span class=\"line\">* 但是，对于一些非常重要的信息，比如交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义</span><br><span class=\"line\"></span><br><span class=\"line\">* 引入了幂等性：producer 不论向 server 发送多少重复数据，server 端都只会持久化一条。即：At Least Once + 幂等性 = Exactly Once</span><br><span class=\"line\"></span><br><span class=\"line\">* 启用幂等性，只需要将 producer 的参数中 enable.idompotence 设置为 true 即可</span><br><span class=\"line\"></span><br><span class=\"line\">* 开启幂等性的 producer 在初始化时会被分配一个 PID，发往同一 partition 的消息会附带 Sequence Number。而 borker 端会对 &lt;PID,Partition,SeqNumber&gt; 做缓存，当具有相同主键的消息提交时，broker 只会持久化一条。 </span><br><span class=\"line\"></span><br><span class=\"line\">* 但是 PID 重启后就会变化，同时不同的 partition 也具有不同主键，所以幂等性无法保证跨分区会话的 Exactly Once</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>ack: 决定数据丢失情况</li>\n<li>ISR: 同步副本集合</li>\n<li>HW和LEO</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka消费者\"><a href=\"#Kafka消费者\" class=\"headerlink\" title=\"Kafka消费者\"></a>Kafka消费者</h2><ul>\n<li><p>消费方式</p>\n<ul>\n<li><p>consumer 采用 pull（拉取）模式从 broker 中读取数据</p>\n</li>\n<li><p>broker给consumer推送消息的模式,很难适应消费速率不同的消费者。它的目标是尽可能以最快速度传递消息，但是这样很容易造成 consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞， 而 pull 模式则可以根据 consumer 的消费能力以适当的速率消费消息</p>\n</li>\n<li><p>pull 模式不足之处是，如果 Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。因为消费者从 broker 主动拉取数据，需要维护一个长轮询，针对这一点， Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费，consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p>\n</li>\n</ul>\n</li>\n<li><p>分区分配策略</p>\n<ul>\n<li><p>一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定哪个 partition 由哪个 consumer 来消费</p>\n</li>\n<li><p>Kafka 有两种分配策略，一个是 RoundRobin，一个是 Range，默认为range，当消费者组内消费者发生变化时，会触发分区分配策略（方法重新分配</p>\n</li>\n<li><p>当消费者组中的消费者数量发生变化的时候会触发分区分配策略</p>\n</li>\n<li><p>RoundRobin</p>\n<p>  <img src=\"https://pic2.zhimg.com/v2-71b0b3eba72505d5658e94446bc159b9_r.jpg\" alt=\"preview\"></p>\n</li>\n<li><p>Range range 方式是按照主题来分的，不会产生轮询方式的消费混乱问题。</p>\n<p>  <img src=\"https://pic4.zhimg.com/80/v2-587357091d733d72a6fb62555ec0a247_720w.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>offset维护</p>\n<ul>\n<li>consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故障前的位置继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。 </li>\n<li>Kafka 0.9 版本之前，consumer 默认将 offset 保存在 Zookeeper 中，从 0.9 版本开始，consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为 __consumer_offsets，都是按照&lt;组-主题-分区&gt;三个条件确定一个offset</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka高效读写数据\"><a href=\"#Kafka高效读写数据\" class=\"headerlink\" title=\"Kafka高效读写数据\"></a>Kafka高效读写数据</h2><ul>\n<li><p>顺序写磁盘</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka 生产者写数据是有序的，即 Partition 内部有序，数据以 append 的方式顺序追加写入。Consumer 消费数据也是有序的，指定 offset 后顺序读出 offset 之后的数据。顺序读写可以避免磁盘读数据时的多次寻道和旋转延迟</span><br></pre></td></tr></table></figure></li>\n<li><p>零拷贝技术<br>  <img src=\"https://pic1.zhimg.com/v2-023030c309ec9406c0a69763f451bcb0_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 传统IO流程:</span><br><span class=\"line\">\t1、第一次：将磁盘文件，读取到操作系统内核缓冲区；</span><br><span class=\"line\">\t2、第二次：将内核缓冲区的数据，copy到application应用程序的buffer；</span><br><span class=\"line\">\t3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；</span><br><span class=\"line\">\t4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。</span><br><span class=\"line\"></span><br><span class=\"line\">\t* 传统方式，读取磁盘文件并进行网络发送，经过的四次数据copy是非常繁琐的。实际IO读写，需要进行IO中断，需要CPU响应中断(带来上下文切换)，尽管后来引入DMA来接管CPU的中断请求，但四次copy是存在 不必要的拷⻉的。</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://pic3.zhimg.com/v2-798463e8afa943f27eec0c980f910f86_r.jpg\" alt=\"preview\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">零拷贝技术: </span><br><span class=\"line\">\t1.将文件拷⻉到kernel buffer中；</span><br><span class=\"line\">\t2.向socket buffer中追加当前要发生的数据在kernel buffer中的位置和偏移量；</span><br><span class=\"line\">\t3.根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备中；</span><br><span class=\"line\"></span><br><span class=\"line\">\t*  经过上述过程，数据只经过了2次copy就从磁盘传送出去了。这个才是真正的Zero-Copy(这里的零拷⻉是针对kernel来讲的，数据在kernel模式下是Zero-Copy)。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Kafka事务\"><a href=\"#Kafka事务\" class=\"headerlink\" title=\"Kafka事务\"></a>Kafka事务</h2><ul>\n<li><p>Kafka事务特性是指一系列的生产者生产消息和消费者提交偏移量的操作在一个事务中，或者说是一个原子操作，生产消息和提交偏移量同时成功或者失败。</p>\n</li>\n<li><p>Kafka事务使用</p>\n<ul>\n<li>生产者发送多条消息可以封装在一个事务中，形成一个原子操作。多条消息要么都发送成功，要么都发送失败。</li>\n<li>read-process-write模式：将消息消费和生产封装在一个事务中，形成一个原子操作。在一个流式处理的应用中，常常一个服务需要从上游接收消息，然后经过处理后送达到下游，这就对应着消息的消费和生成。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 没有事务机制的幂等性只能保证单个 Producer 对于同一个&lt;Topic, Partition&gt;的Exactly Once语义</span><br><span class=\"line\"></span><br><span class=\"line\">* 并不能保证以下几个操作的Exactly Once操作</span><br><span class=\"line\">\t- 写操作的原子性——即多个写操作，要么全部被 Commit 要么全部不被 Commit</span><br><span class=\"line\">\t- 多个读写操作的原子性——对于 Kafka Stream 应用而言，典型的操作即是从某个 Topic 消费数据，经过一系列转换后写回另一个 Topic，保证从源 Topic 的读取与向目标 Topic 的写入的原子性有助于从故障中恢复。</span><br><span class=\"line\"></span><br><span class=\"line\">* 为了实现事务，应用程序必须提供一个稳定的（重启后不变）唯一的 ID，也即Transaction ID。Transactin ID与PID绑定。区别在于Transaction ID由用户提供，而PID是内部的实现对用户透明。</span><br><span class=\"line\"></span><br><span class=\"line\">* Kafka为了支持事务特性，引入一个新的组件：Transaction Coordinator。主要负责分配pid，记录事务状态等操作</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发送消息有哪些模式\"><a href=\"#生产者发送消息有哪些模式\" class=\"headerlink\" title=\"生产者发送消息有哪些模式\"></a>生产者发送消息有哪些模式</h2><ul>\n<li>发后即忘(fire-and-forget): 它只管往 Kafka 里面发送消息，但是不关心消息是否正确到达，这种方式的效率最高，但是可靠性也最差，比如当发生某些不可充实异常的时候会造成消息的丢失</li>\n<li>同步(ync): producer.send()返回一个Future对象，调用get()方法变回进行同步等待，就知道消息是否发送成功，发送一条消息需要等上个消息发送成功后才可以继续发送</li>\n<li>异步(async): Kafka支持 producer.send() 传入一个回调函数，消息不管成功或者失败都会调用这个回调函数，这样就算是异步发送，我们也知道消息的发送情况，然后再回调函数中选择记录日志还是重试都取决于调用方 </li>\n</ul>\n<h2 id=\"Kafka实现负载均衡的方式\"><a href=\"#Kafka实现负载均衡的方式\" class=\"headerlink\" title=\"Kafka实现负载均衡的方式:\"></a>Kafka实现负载均衡的方式:</h2><ul>\n<li>Kafka 的负责均衡主要是通过分区来实现的，Kafka 是主写主读的架构，如下图:<img src=\"https://pic4.zhimg.com/v2-1d7719726f1cdcc2bd608a8e9df2c71b_r.jpg\" alt=\"preview\" style=\"zoom:50%;\" /></li>\n<li>每个 broker 都有消费者拉取消息，每个 broker 也都有生产者发送消息，每个 broker 上的读写负载都是一样的，这也说明了 kafka 独特的架构方式可以通过主写主读来实现负载均衡。</li>\n</ul>\n<h2 id=\"Kafka-的负责均衡存在的问题\"><a href=\"#Kafka-的负责均衡存在的问题\" class=\"headerlink\" title=\"Kafka 的负责均衡存在的问题\"></a>Kafka 的负责均衡存在的问题</h2><ul>\n<li>broker 端分配不均: 当创建 topic 的时候可能会出现某些 broker 分配到的分区数多，而有些 broker 分配的分区少，这就导致了 leader 多副本不均</li>\n<li>生产者写入消息不均: 生产者可能只对某些 broker 中的 leader 副本进行大量的写入操作，而对其他的 leader 副本不闻不问。</li>\n<li>消费者消费不均: 消费者可能只对某些 broker 中的 leader 副本进行大量的拉取操作，而对其他的 leader 副本不闻不问。</li>\n<li>leader 副本切换不均：当主从副本切换或者分区副本进行了重分配后，可能会导致各个 broker 中的 leader 副本分配不均匀。</li>\n</ul>\n<h2 id=\"分区再分配\"><a href=\"#分区再分配\" class=\"headerlink\" title=\"分区再分配\"></a>分区再分配</h2><ul>\n<li>分区再分配主要是用来维护 kafka 集群的负载均衡</li>\n<li>场景一: 如果一个节点的分区是单副本的,那么结点下线会导致分区将会变得不可用</li>\n<li>场景二: 当集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。</li>\n<li>分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移</li>\n<li>分区再分配的原理就是通过控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一些列保证性能的操作，比如复制限流</li>\n</ul>\n<h2 id=\"增强消费者消费能力的方法\"><a href=\"#增强消费者消费能力的方法\" class=\"headerlink\" title=\"增强消费者消费能力的方法\"></a>增强消费者消费能力的方法</h2><ul>\n<li>增加 topic 的分区数，并且同时提升消费组的消费者数量，消费者数=分区数。</li>\n<li>可以采用多线程的方式进行消费，并且优化业务方法流程</li>\n</ul>\n<h2 id=\"Kafka控制器作用\"><a href=\"#Kafka控制器作用\" class=\"headerlink\" title=\"Kafka控制器作用\"></a>Kafka控制器作用</h2><ul>\n<li>Kafka 集群中有一台broker 会被选举为控制器，它负责管理整个集群中所有分区和副本的状态，kafka 集群中只能有一个控制器<ul>\n<li>当某个分区的 leader 副本出现故障时，由控制器负责为该分区选举新的 leader 副本</li>\n<li>检测到某个分区的ISR集合发生变化时，由控制器负责通知所有 broker 更新其元数据信息</li>\n<li>当为某个 topic 增加分区数量时，由控制器负责分区的重新分配</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Kafka速度快的原因\"><a href=\"#Kafka速度快的原因\" class=\"headerlink\" title=\"Kafka速度快的原因\"></a>Kafka速度快的原因</h2><ul>\n<li>顺序读写</li>\n<li>Page Cache: 为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache</li>\n<li>零拷贝: Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭</li>\n<li>分区分段+索引</li>\n<li>批量读写</li>\n<li>批量压缩</li>\n</ul>\n"},{"title":"Redis基础知识","_content":"\n## Redis简介\n\n* Redis(Remote Dictionary Server)是用C语言开发的一个开源的高性能键值对(key-value)内存数据库\n* NoSQL: 即Not-Only SQL(泛指非关系型数据库)，作为关系型数据库的补充\n* 特征\n\t- 数据间没有必然的关联关系\n\t- 内部采用单线程机制进行工作\n\t- 高性能\n\t- 多种数据类型支持\n\t\t* 字符串型 string\n\t\t* 列表类型 list\n\t\t* 散列类型 hash\n\t\t* 集合类型 set\n\t\t* 有序集合类型 sorted_set\n\t- 持久化支持\n* 应用\n\t* 为热点数据加速查询\n\t* 任务队列, 如秒杀、抢购、排队购票\n\t* 即时信息查询, 如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息\n\t* 时效性信息控制,如验证码控制、投票控制\n\t* 分布式数据共享\n\t* 消息队列\n\t* 分布式锁\n\n## 启动 \n\n* 服务端启动方式\n\n``` redis\nredis-server \nredis-server --port 6380\nredis-server conf/redis-6379.conf\n```\n\n* 客户端连接\n\n``` redis\nredis-cli \nredis-cli -p 6380\nredis-cli -h 127.0.0.1 -p 6380\n```\n\n\n\n## Redis数据类型\n\n* Redis数据都是Map，采用key:value的形式存储,其中key永远是string，value可以是以下的几种类型之一\n\n### string\n\n* 存储单个数据\n* 如果字符串以整数的形式展示，可以作为数字操作使用\n* 基本操作\n\t- 添加/修改数据\n\t\t``` redis \n\t\t# 添加/修改单条数据\n\t\tset key val\n\t\t# 添加/修改多条数据\n\t\tmset key1 val1 key2 val2\n\t\t```\n\t- 获取数据  \n\t\t``` redis\n\t\t# 获取单条数据\n\t\tget key\n\t\t# 获取多条数据\n\t\tmget key1 key2\n\t\t``` \n\t- 删除数据\n\t\t``` redis\n\t\tdel key\n\t\t```\n\t- 获取数据字符个数  \n\t\t``` redis\n\t\tstrlen key\n\t\t```\n\t- 追加信息到原始信息后部  \n\t\t``` redis\n\t\tappend key value\n\t\t```\n* 扩展操作\n\t- redis用于控制数据表主键id自增\n\t\t``` redis\n\t\tincr key\n\t\tdecr key\n\t\tincrby key increment\n\t\tdecrby key incrment\n\t\tincrbyfloat key increment \n\t\t```\n\n\t- 设置数据具有指定生命周期, 适用于所有具有时效性限定控制的操作(投票每4小时只能投一票)\n\t\t``` redis\n\t\tsetex key seconds value\n\t\tpsetex key milliseconds value\n\n\t\t# 示例:\n\t\tsetex 13879631902 60 1\n\t\t```\n\n* 格式化存储\n\t* 将所有的信息存放在表中，表名:主键名:主键值:字段名 value\n\t    ``` redis\n\t    set user:id:00789:fans 1242526\n\t    set user:id:00789:blogs 789\n\t    ```\n\t* 用json格式存储信息\n\t\t``` redis\n\t\tuser:id:2506 '{\"name\"\":春晚, \"fans\": 6143, \"focuns\"\":83}''\n\t\t```\n\n### hash\n\n* 对一系列存储的数据进行编组，方便管理，典型应用存储对象信息\n* 需要的存储结构: 一个存储空间保存多个键值对数据\n* 基本操作\n\t- 添加/修改数据  \n\t\t``` redis\n\t\t# 添加/修改单个数据\n\t\thset key filed1 value1 filed2 value2  \n\t\t# 添加/修改多个数据\n\t\thmset key1 filed1 value1 filed2 value2 key2 filed1 value1  \n\t\t```\n\t- 获取数据   \n\t\t```  redis\n\t\t# 获取key下面的一个字段值\n\t\thget key filed    \n\t\t# 获取key下面的所有字段值\n\t\thgetall key\n\t\t# 获取key下面的多个字段值\n\t\thmget key filed1 field2\n\t\t```\n\t- 删除数据   \n\t\t``` redis\n\t\thdel key field\n\t\t```\n\t- 获取哈希表中字段数量  \n\t\t``` redis\n\t\thlen key\n\t\t```\n\t- 获取哈希表中是否存在指定的字段  \n\t\t``` redis\n\t\thexists key field\n\t\t```\n\t- 添加之前会检查是否有value值，有的话set不成功  \n\t\t``` redis\n\t\thsetnx key fidld value\n\t\t```\n\n* 扩展操作\n\t* 获取哈希表中所有的字段名或者字段值 \n\t\t``` redis\n\t\t# 获取字段名\n\t\thkeys key    \n\t\t# 获取字段值\n\t\thvals key\n\t\t```\n\t* 设置指定字段的数值数据增加指定范围的值 \n\t\t``` redis\n\t\thincrby key field increment  \n\t\thincrbyfloat key field incrment\n\t\t```\n\n* 注意事项\n\t* hash类型下的value只能存储字符串，不允许存储其他类型的数据类型\n\t* hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性\n\t* hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率会很低，有可能成为数据访问瓶颈\n\n* 应用场景\n\t- 电商网站购物车设计与实现\n\t\t* 客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息\n\t\t* 将商品编号作为field，购买数量作为value进行存储\n\t\t* 添加商品: 追加全新的fileld与value\n\t\t* 浏览: 遍历hash\n\t\t* 更改数量: 自增/自减, 设置value值\n\t\t* 删除商品: 删除field\n\t\t* 清空: 删除key\n\n\t\t``` redis\n\t\thset user:id:001 g01 300 g02 500\n\t\thset user:id:001 g03 30\n\t\thincrby user:id:001 g03 2\n\t\thlen user:id:001\n\t\thdel user:id:001 g02\n\t\t```\n\n\t- 改进\n\t\t* 可以将购物车中的每条商品信息保存成多条filed\n\t\t\t* eg: 商品id:nums 用于保存购买的数量\n\t\t\t\t商品id:info 用于保存对应商品的信息\n\t\t\t``` redis\n\t\t\thset 001 g01:nums 100 g01:info '{\"name\":\"爽歪歪\", \"price\":100}'\n\t\t\t```\n\t\t\t* 商品信息可以存储为独立的hash\n\t- 抢购\n\t\t* 以商家id作为key\n\t\t* 将参与抢购的商品id作为field\n\t\t* 将参与抢购的商品数量作为对应的value\n\t\t``` redis\n\t\thset p01 c30 100 c50 100 c100 100\n\t\thincrby p01 c30 -10\n\t\t```\n\n### list\n\n* 存储多个数据，并对数据进入存储空间的顺序进行区分\n* 基本操作\n\t- 添加/修改数据  \n\t\t``` redis\n\t\tlpush key value1 value2.... (从左边push)\n\t\trpush key value1 value2.... (从右边push)\n\t\t```\n\t- 获取数据\n\t\t``` redis\n\t\tlrange key start stop  (-1表示最后一个元素,-2表示倒数第二个元素)\n\t\tlindex key index\n\t\tllen key\n\t\t```\n\t- 获取并移除数据\n\t\t``` redis\n\t\tlpop key\n\t\trpop key\n\t\t```\n\t- 规定时间内获取并移除数据(lpop和rpop的阻塞版本(b是blocking的缩写))(任务队列)\n\t\t``` redis\n\t\tblpop key1 key2 ... timeout\n\t\tbrpop key2 key2 ... timeout\n\t\t```\n\t- 移除指定数据\n\t\t``` redis\n\t\tlrem key count value\n\t\t```\n\n* list扩展操作\n\t- 朋友圈点赞，要求按照点赞顺序显示点赞好友的信息\n\t- list可以对数据进行分页操作，通常第一页信息来自于list，第二页及更多的信息通过数据库的形式加载\n\t- list用于展示最新的消息(最新关注的公众号，最新的日志)\n\t\n### set\n\n* 存储大量的数据，在查询方面提供更高的效率\n* 存储结构和hash完全相同，仅存储键，不存储值(nil),并且键是不允许重复的\n* 基本操作\n\t- 添加数据\n\t\t``` redis\n\t\tsadd key member1 member2 ...\n\t\t```\n\t- 获取全部数据\n\t\t``` redis\n\t\tsmembers key\n\t\t```\n\t- 删除数据\n\t\t``` redis\n\t\tsrem key member1 member2 ....\n\t\t```\n\t- 获取集合数据总量\n\t\t``` redis\n\t\tscard key\n\t\t```\n\t- 判断集合中是否包含指定数据\n\t\t``` redis\n\t\tsismember key member\n\t\t```\n\t- 随机获取集合中指定数量的数据\n\t\t``` redis\n\t\tsrandmember  key count\n\t\t```\n\t- 随机获取集合中的某个数据并将该数据移出集合\n\t\t``` redis\n\t\tspop key\n\t\t```\n\t- 求两个集合的交集\n\t\t``` redis\n\t\tsinter key1 key2 \n\t\t```\n\t- 求两个集合的并集\n\t\t``` redis\n\t\tsunion key1 key2\n\t\t```\n\t- 求两个集合的差集\n\t\t``` redis\n\t\tsdiff key1 key2\n\t\t```\n\n\t- 求两个集合的交、并、差集并存储到指定集合中\n\t\t``` redis\n\t\tsinterstore destination key1 key2\n\t\tsunionstore destination key1 key2\n\t\tsdiffstore destination key1 key2\n\t\t```\n\n\t- 将指定数据从原始集合移动到目标集合中\n\t\t``` redis\n\t\tsmove source destination member\n\t\t```\n* 扩展操作\n\t- 应用于随机推荐类信息检索，例如热点歌单推荐、购买旅游线路\n\t\t* 系统分析出各个分类的最新最热点信息条目并组织成set集合\n\t\t* 随机挑选出其中部分信息\n\t\t* 配合用户关注信息分类中的热点信息组织成展示的全信息集合\n\n\t- 应用于同类信息的关联检索，二度关联搜索、深度关联搜索\n\t\n\t\t* 显示共同关注\n\t\t* 显示共同好友\n\n\t- 权限校验\n\t\t* 依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤和快速查询\n\t\t* 根据用户id获取用户所有角色\n\t\t* 根据用户所有角色获取用户所有权限放入到set集合中\n\t\t* 根据用户所有角色获取用户所有数据全选放入set集合中\n\n\t\tsadd rid:001 getall getById\n\t\tsadd rid:002 getall getCount insert\n\t\tsunionstore uid:007 rid:001 rid:002\n\t\tsmembers uid:007\n\n\t- 统计网站的访问量，PV(访问量) 、UV(独立访客)、IP(独立IP)\n\t\t* PV: 网站被访问次数，可通过刷新页面提高访问量\n\t\t* UV: 网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变\n\t\t* IP: 网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问IP不变\n\n\t\t* 通过set的特点做重复性过滤\n\t\t* 建立set模型，记录不同cookie数量(UV)\n\t\t* 建立set模型，记录不同IP数量\n\n\t- 黑白名单\n\n* 注意事项\n\t* set中数据不允许重复\n\t* set虽然与hash中的存储结构相同，但是无法启用hash中的存储值的空间\n\n### sort_set\n\n* 数据排序有利于数据展示，需要提供有一种可以根据自身特征进行排序的方式\n* 在set的存储结构基础上添加可排序字段\n* 基本操作\n\t- 添加数据\n\t\t``` redis\n\t\tzadd key score1 member1 score2 member2\n\t\t```\n\t- 获取全部数据\n\t\t``` redis\n\t\tzrange key start stop [withscores]      (从小到大的顺序)\n\t\tzrevrange key start stop [withscores]   (从大到小的顺序)\n\t\t```\n\t- 删除数据\n\t\t``` redis\n\t\tzrem key member \n\t\t```\n\t- 按条件获取数据\n\t\t``` redis\n\t\tzrangebyscore key min max [withscores] [limit]\n\t\tzrevrangebyscore key max min [withscores]\n\t\t```\n\t- 条件删除数据\n\t\t``` redis\n\t\tzremrangebyrank key start stop\n\t\tzremrangebyscore key min max\n\t\t```\n\t- 获取集合数据总量\n\t\t``` redis\n\t\tzcard key\n\t\tzcount key min max\n\t\t```\n\t- 集合交、并操作\n\t\t``` redis\n\t\tzinterstore destination numkeys key1 key2 ...\n\t\tzunionstore destination numkeys key1 key2 ...\n\t\t```\n\t- 获取数据对应的索引(排名)\n\t\t``` redis\n\t\tzrank key member\n\t\tzrevrank key member\n\t\t```\n\t- score值获取与修改\n\t\t``` redis\n\t\tzscore key member\n\t\tzincrby key increment member\n\t\t```\n\n* 注意点\n\t- min与max用于限定搜索查询的条件\n\t- start和stop用于限定查询范围，作用于索引，表示开始和结束索引\n\t- offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量\n\n* 扩展操作\n\t- 排序类问题\n\t\t* 十大杰出青年\n\t\t* 各类资源类网站TOP10\n\t\t* 聊天室活跃度统计\n\t\t* 游戏好友亲密度\n\n\t- 时效性控制,用于定时任务执行顺序管理或任务过期管理\n\t\t* 对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序\n\t\t* 记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间\n\t\t* 当新任务加入时，判断并跟新当前下一个要处理的任务时间\n\t\t* 为提升sort_set的性能通常将任务根据特征存储成若干个sorted_set\n\t``` redis\n\tzadd tasks 20210613 task1 20130620 task2 20130626 task3\n\tzrange tasks 0 -1 withscores\n\tzremrangbyrank tasks 0 0\n\t```\n\n\t* 对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可\n* 总结\n\t* 带有生命周期的计数器(string)\n\n## 通用命令\n\n* key \n\n\t- key是一个字符串，通过key获取redis中保存的数据\n\t- key的操作\n\t\t* 与key自身状态相关的操作\n\t\t\t* 删除指定key \t\t`del keyi`\n\t\t\t* 获取key是否存在 \t`exists key`\n\t\t\t* 获取key的类型 \t`type key`\n\t\t* 与key有效性控制相关操作 \n\t\t\t* 设置有效期\n\t\t\t\t``` redis\n\t\t\t\texpire key seconds\n\t\t\t\tpexpire key milliseconds\n\t\t\t\texpireat key timestamp\n\t\t\t\tpexpireat key milliseconds-timestamp\n\t\t\t\t```\n\t\t\t* 获取key的有效时间\n\t\t\t\t``` redis\n\t\t\t\tttl key\n\t\t\t\tpttl key\n\t\t\t\t```\n\t\t\t* 切换key从时效性到永久性\n\t\t\t\t``` redis\n\t\t\t\tpersist key\n\t\t\t\t```\n\t\t* key查询操作 \n\t\t\t* 查询key `keys pattern`\n\t\t* key的改名操作\n\t\t\t``` redis\n\t\t\trename key newkey\n\t\t\trenamenx key newkey\n\t\t\t```\n\t\t* 对key排序\n\t\t\t``` redis\n\t\t\tsort\n\t\t\t```\n\t\t* 其它key通用操作\n\t\t\t``` redis\n\t\t\thelp @generic\n\t\t\t```\n* 数据库\n\n\t- redis为每个服务提供16个数据库, 编号0-15\n\t- 每个数据库之间相互独立\n\n\t- 切换数据库  `select index`\n\t- 其它操作\n\t\t* quit\n\t\t* ping\n\t\t* echo message\n\t- 数据移动 \tmove key db\n\t- 数据清除操作\n\t\t* dbsize\n\t\t* flushdb\n\t\t* flushall\n\n\n## 持久化\n\n* 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化\n* 持久化可以防止数据的丢失，确保数据安全性\n\n* 持久化方案\n\t- RDB\n\t\tsave \t保存数据\n\t\tbgsave  后台保存数据，可能不会立即执行\n\t\t通过更改配置文件自动RDB:  `save second changes`  满足限定时间范围内key变化的数量这一条件就进行持久化\n\t\tredis内部涉及RDB的操作都采用bgsave方式，save命令基本可以放弃使用了\n\t\t\n\t\t* RDB优点\n\t\t\t* RDB是一个紧凑压缩的二进制文件，存储效率高\n\t\t\t* RDB内部存储的是redis在某个时间点的数据快照，非常适合数据备份，全量复制等场景\n\t\t\t* RDB恢复数据的速度要比AOF快很多\n\t\t\t* RDB通常用于灾难恢复\n\t\t* RDB缺点\n\t\t\t* RDB方式无法做到实时持久化，具有较大的可能性丢失数据\n\t\t\t* bgsave指令每次运行都要fork操作创建子进程，会牺牲掉一些性能\n\t\t\t* Redis的众多版本中未进行RDB文件格式的版本统一\n\t- AOF\n\t\t* 以独立日志的方式记录每次写的命令，重启时再重新执行AOF文件中命令达到数据恢复的目的\n\t\t* 实现实时性的数据持久化\n\n\t\t* AOF写数据的三种策略\n\t\t\t* always \t每次写入操作均同步到AOF文件中，数据零失误，性能较低\n\t\t\t* everysec  每秒将缓冲区内的指令同步到AOF文件中，数据准确性较高，性能较高(默认配置)\n\t\t\t* no \t\t由操作系统控制每次同步到AOF文件的周期，整体过程不可控\n\n\t\t* AOF配置\n\t\t\t* appendonly yes \t\t\t开启AOF持久化功能，默认为不开启状态\n\t\t\t* appendfsync erverysec  \tAOF写文件策略(默认everysec)\n\t\t\t* appendfilename filename \t配置AOF持久化文件的名字\n\t\t* AOF重写\n\t\t\t* AOF重写就是对同一数据的若干条命令执行结果转换为最终的结果数据对应的指令进行记录\n\n\t\t\t* 作用\n\t\t\t\t* 降低磁盘占用量，提高磁盘利用率\n\t\t\t\t* 提高持久化效率，降低持久化写时间，提高IO性能\n\t\t\t\t* 降低数据恢复用时，提高数据恢复效率\n\n\t\t\t* 重写方式\n\t\t\t\t* 手动重写      bgrewriteaof\n\t\t\t\t* 自动重写 \t\t\n\t\t\t\t\t* auto-aof-rewrite-min-size size  \n\t\t\t\t\t* auto-aof-rewrite-percentage percentage\n\n## 事务\n\n* redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体(一个队列), 当执行时，一次性按照添加顺序依次执行，中间不会被打断\n* 基本操作\n\t* 开启事务 \tmulti   (设置指令开启位置，此指令后续的所有指令均加入到事务中)\n\t* 执行事务  exec \t(设置事务的结束位置，同时执行事务， 与multi成对出现)\n\t* 取消事务  discard (终止当前事务的定义，发生在multi之后，exec之前)\n\t* 注意: 加入到事务的命令暂时进入到任务队列中， 并没有立即执行，只有执行了exec命令才开始执行\n\t* 注意: 在添加事务的过程中如果出现语法错误，整体事务中的所有命令均不会执行\n\t* 注意: 在添加事务的过程中如果出现无法执行的操作，事务中能正确运行的指令会执行，错误的命令不会被执行\n\t* 注意: 已经执行完毕的命令对应的数据不会自动回滚，需要在代码中实现回滚\n\n## 锁\n\n* 监视锁\n\t- 添加监视锁 \twatch key1 [key2...]   (在执行exec之前如果watch的key发生了变化，事务会被终止执行)\n\t- 取消监视锁    unwatch\n\t``` redis\n\t# 客户端1\n\tset name 123\n\twatch name\n\tmulti\n\tset aaa bb\n\tget aaa\n\texec\n\n\t# 客户端2 (客户端2在客户端1执行exec之前修改了被监视的name值，事务会被取消执行)\n\tset name 234\n\t```\n\n* 分布式锁\n\t- 设置分布式锁\t\tsetnx lock-key value  (setnx在key有值时设置失败，无值时设置成功)\n\t- 取消锁\t\t\tdel lock-key\n\t- 设置锁的超时时间 expire lock-key second\n\t```\n\tset num 123\n\n\t# 修改num值之前先获取锁\n\tsetnx lock-num 1\n\t# 给锁设置超时时间\n\texpire lock-num 20\n\n\tset num 234\n\t# 取消锁\n\tdel lock-num\n\t```\n\n## 删除策略\n\n* 过期数据\n\t* Redis是一种内存级数据库，所有的数据存放在内存中，内存中的数据可以通过TTL指令获取其状态\n\t\t* TTL为正数: 具有时效性的数据\n\t\t* TTL = -1 : 永久有效的数据\n\t\t* TTL = -2 : 已经过期的数据 或者 被删除的数据 或者 未定义的数据\n* 数据删除策略(在内存占用和CPU占用达到平衡)\n\t* 定时删除\n\t\t* 创建一个定时器，当key设置有过期时间时，当到达过期时间执行对键的删除操作\n\t\t* 优点: 节约内存，快速释放掉不必要的内存占用\n\t\t* 缺点: CPU压力很大，可能会影响redis服务器响应时间和指令吞吐量\n\t* 惰性删除\n\t\t* 数据到达过期时间时， 不作处理，等下次访问该数据时\n\t\t\t* 如果未过期，返回数据\n\t\t\t* 如果过期了，删除数据，返回不存在\n\t\t* 优点: 节约CPU性能\n\t\t* 缺点: 内存压力很大,可能有些无用内存会长期占用\n\t* 定期删除\n\t\t* 周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度\n\t\t* 周期性抽查存储空间(随机抽查 重点抽查)\n* 逐出算法\n\t* redis添加数据的时候如果内存不满足要求，redis会临时删除一些数据为当前指令清理存储空间, 清理数据的策略称为逐出算法\n\n\t* 数据逐出的相关配置\n\t\t* 最大可使用内存\t\t\tmaxmemory  (占用物理内存的比例， 默认为0，表示不限制, 通常设置在50%以上)\n\t\t* 每次选取待删除数据个数 \tmaxmemory-samples\n\t\t* 删除策略 \t\t\t\t\tmaxmemory-policy (达到最大内存后对挑出的数据进行删除的策略)\n\t\t\t* 检测易失数据(可能会过期的数据集)\n\t\t\t\t* volatile-lru \t\t挑选最近没有使用的数据淘汰\n\t\t\t\t* volatile-lfu  \t挑选最近使用次数最少的数据淘汰\n\t\t\t\t* volatile-ttl \t\t挑选将要过期的数据淘汰\n\t\t\t\t* volatile-random \t任意选择数据淘汰\n\t\t\t* 检测全库数据\n\t\t\t\t* allkeys-lru\t\t挑选最近没有使用的数据淘汰\n\t\t\t\t* allkeys-lfu\t\t挑选使用次数最少的数据淘汰\n\t\t\t\t* allkeys-random \t任意选择数据淘汰\n\t\t\t* 不删除\n\t\t\t\t* noeviction\n\n## 高级数据类型\n\n* Bitmaps\n\t* 获取指定key对应偏移量上的bit值 \tgetbit key offset\n\t* 设置指定key对应偏移量上的bit值    setbit key offset value\n\t* 对指定key按位进行并、交、非、异或操作并将结果保存到destKey中\n\t\tbitop op desKey key1 [key2...]\n\t\t\t* and \t交\n\t\t\t* or \t并\n\t\t\t* not   非\n\t\t\t* xor   异或\n\t* 统计key中1的数量\n\t\tbitcount key [start end]\n* HyperLogLog\n\t* 统计不重复数据的数量\n\t* 基数: 数据集去重后的元素个数\n\t* HyperLogLog是用来做基数统计的\n\n\t* 基本操作\n\t\t* 添加数据 \tpfadd key element [element...]\n\t\t* 统计数据  pfcount key [key...]\n\t\t* 合并数据  pfmerge destkey sourcekey [sourcekey...]\n\t\t\t\n* GEO\n\t* 添加坐标点\n\t\tgeoadd key longitude latitude member [longitude latitude member ...]\n\t* 获取坐标点\n\t\tgeopos key member [member...]\n\t* 计算坐标点的记录\n\t\tgeodist key member1 member2 [unit]\n\t* 根据坐标求范围内的数据\n\t\tgeoradius key longitude latitude radius \n\t* 根据点求范围内的数据\n\t\tgeoradiusbymember key member radius\n\t* 获取指定点对应的坐标hash值\n\t\tgeohash key member\n","source":"_posts/go/redis_basic.md","raw":"---\ntitle: Redis基础知识 \ncategories: \n- GolangStudy\n---\n\n## Redis简介\n\n* Redis(Remote Dictionary Server)是用C语言开发的一个开源的高性能键值对(key-value)内存数据库\n* NoSQL: 即Not-Only SQL(泛指非关系型数据库)，作为关系型数据库的补充\n* 特征\n\t- 数据间没有必然的关联关系\n\t- 内部采用单线程机制进行工作\n\t- 高性能\n\t- 多种数据类型支持\n\t\t* 字符串型 string\n\t\t* 列表类型 list\n\t\t* 散列类型 hash\n\t\t* 集合类型 set\n\t\t* 有序集合类型 sorted_set\n\t- 持久化支持\n* 应用\n\t* 为热点数据加速查询\n\t* 任务队列, 如秒杀、抢购、排队购票\n\t* 即时信息查询, 如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息\n\t* 时效性信息控制,如验证码控制、投票控制\n\t* 分布式数据共享\n\t* 消息队列\n\t* 分布式锁\n\n## 启动 \n\n* 服务端启动方式\n\n``` redis\nredis-server \nredis-server --port 6380\nredis-server conf/redis-6379.conf\n```\n\n* 客户端连接\n\n``` redis\nredis-cli \nredis-cli -p 6380\nredis-cli -h 127.0.0.1 -p 6380\n```\n\n\n\n## Redis数据类型\n\n* Redis数据都是Map，采用key:value的形式存储,其中key永远是string，value可以是以下的几种类型之一\n\n### string\n\n* 存储单个数据\n* 如果字符串以整数的形式展示，可以作为数字操作使用\n* 基本操作\n\t- 添加/修改数据\n\t\t``` redis \n\t\t# 添加/修改单条数据\n\t\tset key val\n\t\t# 添加/修改多条数据\n\t\tmset key1 val1 key2 val2\n\t\t```\n\t- 获取数据  \n\t\t``` redis\n\t\t# 获取单条数据\n\t\tget key\n\t\t# 获取多条数据\n\t\tmget key1 key2\n\t\t``` \n\t- 删除数据\n\t\t``` redis\n\t\tdel key\n\t\t```\n\t- 获取数据字符个数  \n\t\t``` redis\n\t\tstrlen key\n\t\t```\n\t- 追加信息到原始信息后部  \n\t\t``` redis\n\t\tappend key value\n\t\t```\n* 扩展操作\n\t- redis用于控制数据表主键id自增\n\t\t``` redis\n\t\tincr key\n\t\tdecr key\n\t\tincrby key increment\n\t\tdecrby key incrment\n\t\tincrbyfloat key increment \n\t\t```\n\n\t- 设置数据具有指定生命周期, 适用于所有具有时效性限定控制的操作(投票每4小时只能投一票)\n\t\t``` redis\n\t\tsetex key seconds value\n\t\tpsetex key milliseconds value\n\n\t\t# 示例:\n\t\tsetex 13879631902 60 1\n\t\t```\n\n* 格式化存储\n\t* 将所有的信息存放在表中，表名:主键名:主键值:字段名 value\n\t    ``` redis\n\t    set user:id:00789:fans 1242526\n\t    set user:id:00789:blogs 789\n\t    ```\n\t* 用json格式存储信息\n\t\t``` redis\n\t\tuser:id:2506 '{\"name\"\":春晚, \"fans\": 6143, \"focuns\"\":83}''\n\t\t```\n\n### hash\n\n* 对一系列存储的数据进行编组，方便管理，典型应用存储对象信息\n* 需要的存储结构: 一个存储空间保存多个键值对数据\n* 基本操作\n\t- 添加/修改数据  \n\t\t``` redis\n\t\t# 添加/修改单个数据\n\t\thset key filed1 value1 filed2 value2  \n\t\t# 添加/修改多个数据\n\t\thmset key1 filed1 value1 filed2 value2 key2 filed1 value1  \n\t\t```\n\t- 获取数据   \n\t\t```  redis\n\t\t# 获取key下面的一个字段值\n\t\thget key filed    \n\t\t# 获取key下面的所有字段值\n\t\thgetall key\n\t\t# 获取key下面的多个字段值\n\t\thmget key filed1 field2\n\t\t```\n\t- 删除数据   \n\t\t``` redis\n\t\thdel key field\n\t\t```\n\t- 获取哈希表中字段数量  \n\t\t``` redis\n\t\thlen key\n\t\t```\n\t- 获取哈希表中是否存在指定的字段  \n\t\t``` redis\n\t\thexists key field\n\t\t```\n\t- 添加之前会检查是否有value值，有的话set不成功  \n\t\t``` redis\n\t\thsetnx key fidld value\n\t\t```\n\n* 扩展操作\n\t* 获取哈希表中所有的字段名或者字段值 \n\t\t``` redis\n\t\t# 获取字段名\n\t\thkeys key    \n\t\t# 获取字段值\n\t\thvals key\n\t\t```\n\t* 设置指定字段的数值数据增加指定范围的值 \n\t\t``` redis\n\t\thincrby key field increment  \n\t\thincrbyfloat key field incrment\n\t\t```\n\n* 注意事项\n\t* hash类型下的value只能存储字符串，不允许存储其他类型的数据类型\n\t* hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性\n\t* hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率会很低，有可能成为数据访问瓶颈\n\n* 应用场景\n\t- 电商网站购物车设计与实现\n\t\t* 客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息\n\t\t* 将商品编号作为field，购买数量作为value进行存储\n\t\t* 添加商品: 追加全新的fileld与value\n\t\t* 浏览: 遍历hash\n\t\t* 更改数量: 自增/自减, 设置value值\n\t\t* 删除商品: 删除field\n\t\t* 清空: 删除key\n\n\t\t``` redis\n\t\thset user:id:001 g01 300 g02 500\n\t\thset user:id:001 g03 30\n\t\thincrby user:id:001 g03 2\n\t\thlen user:id:001\n\t\thdel user:id:001 g02\n\t\t```\n\n\t- 改进\n\t\t* 可以将购物车中的每条商品信息保存成多条filed\n\t\t\t* eg: 商品id:nums 用于保存购买的数量\n\t\t\t\t商品id:info 用于保存对应商品的信息\n\t\t\t``` redis\n\t\t\thset 001 g01:nums 100 g01:info '{\"name\":\"爽歪歪\", \"price\":100}'\n\t\t\t```\n\t\t\t* 商品信息可以存储为独立的hash\n\t- 抢购\n\t\t* 以商家id作为key\n\t\t* 将参与抢购的商品id作为field\n\t\t* 将参与抢购的商品数量作为对应的value\n\t\t``` redis\n\t\thset p01 c30 100 c50 100 c100 100\n\t\thincrby p01 c30 -10\n\t\t```\n\n### list\n\n* 存储多个数据，并对数据进入存储空间的顺序进行区分\n* 基本操作\n\t- 添加/修改数据  \n\t\t``` redis\n\t\tlpush key value1 value2.... (从左边push)\n\t\trpush key value1 value2.... (从右边push)\n\t\t```\n\t- 获取数据\n\t\t``` redis\n\t\tlrange key start stop  (-1表示最后一个元素,-2表示倒数第二个元素)\n\t\tlindex key index\n\t\tllen key\n\t\t```\n\t- 获取并移除数据\n\t\t``` redis\n\t\tlpop key\n\t\trpop key\n\t\t```\n\t- 规定时间内获取并移除数据(lpop和rpop的阻塞版本(b是blocking的缩写))(任务队列)\n\t\t``` redis\n\t\tblpop key1 key2 ... timeout\n\t\tbrpop key2 key2 ... timeout\n\t\t```\n\t- 移除指定数据\n\t\t``` redis\n\t\tlrem key count value\n\t\t```\n\n* list扩展操作\n\t- 朋友圈点赞，要求按照点赞顺序显示点赞好友的信息\n\t- list可以对数据进行分页操作，通常第一页信息来自于list，第二页及更多的信息通过数据库的形式加载\n\t- list用于展示最新的消息(最新关注的公众号，最新的日志)\n\t\n### set\n\n* 存储大量的数据，在查询方面提供更高的效率\n* 存储结构和hash完全相同，仅存储键，不存储值(nil),并且键是不允许重复的\n* 基本操作\n\t- 添加数据\n\t\t``` redis\n\t\tsadd key member1 member2 ...\n\t\t```\n\t- 获取全部数据\n\t\t``` redis\n\t\tsmembers key\n\t\t```\n\t- 删除数据\n\t\t``` redis\n\t\tsrem key member1 member2 ....\n\t\t```\n\t- 获取集合数据总量\n\t\t``` redis\n\t\tscard key\n\t\t```\n\t- 判断集合中是否包含指定数据\n\t\t``` redis\n\t\tsismember key member\n\t\t```\n\t- 随机获取集合中指定数量的数据\n\t\t``` redis\n\t\tsrandmember  key count\n\t\t```\n\t- 随机获取集合中的某个数据并将该数据移出集合\n\t\t``` redis\n\t\tspop key\n\t\t```\n\t- 求两个集合的交集\n\t\t``` redis\n\t\tsinter key1 key2 \n\t\t```\n\t- 求两个集合的并集\n\t\t``` redis\n\t\tsunion key1 key2\n\t\t```\n\t- 求两个集合的差集\n\t\t``` redis\n\t\tsdiff key1 key2\n\t\t```\n\n\t- 求两个集合的交、并、差集并存储到指定集合中\n\t\t``` redis\n\t\tsinterstore destination key1 key2\n\t\tsunionstore destination key1 key2\n\t\tsdiffstore destination key1 key2\n\t\t```\n\n\t- 将指定数据从原始集合移动到目标集合中\n\t\t``` redis\n\t\tsmove source destination member\n\t\t```\n* 扩展操作\n\t- 应用于随机推荐类信息检索，例如热点歌单推荐、购买旅游线路\n\t\t* 系统分析出各个分类的最新最热点信息条目并组织成set集合\n\t\t* 随机挑选出其中部分信息\n\t\t* 配合用户关注信息分类中的热点信息组织成展示的全信息集合\n\n\t- 应用于同类信息的关联检索，二度关联搜索、深度关联搜索\n\t\n\t\t* 显示共同关注\n\t\t* 显示共同好友\n\n\t- 权限校验\n\t\t* 依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤和快速查询\n\t\t* 根据用户id获取用户所有角色\n\t\t* 根据用户所有角色获取用户所有权限放入到set集合中\n\t\t* 根据用户所有角色获取用户所有数据全选放入set集合中\n\n\t\tsadd rid:001 getall getById\n\t\tsadd rid:002 getall getCount insert\n\t\tsunionstore uid:007 rid:001 rid:002\n\t\tsmembers uid:007\n\n\t- 统计网站的访问量，PV(访问量) 、UV(独立访客)、IP(独立IP)\n\t\t* PV: 网站被访问次数，可通过刷新页面提高访问量\n\t\t* UV: 网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变\n\t\t* IP: 网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问IP不变\n\n\t\t* 通过set的特点做重复性过滤\n\t\t* 建立set模型，记录不同cookie数量(UV)\n\t\t* 建立set模型，记录不同IP数量\n\n\t- 黑白名单\n\n* 注意事项\n\t* set中数据不允许重复\n\t* set虽然与hash中的存储结构相同，但是无法启用hash中的存储值的空间\n\n### sort_set\n\n* 数据排序有利于数据展示，需要提供有一种可以根据自身特征进行排序的方式\n* 在set的存储结构基础上添加可排序字段\n* 基本操作\n\t- 添加数据\n\t\t``` redis\n\t\tzadd key score1 member1 score2 member2\n\t\t```\n\t- 获取全部数据\n\t\t``` redis\n\t\tzrange key start stop [withscores]      (从小到大的顺序)\n\t\tzrevrange key start stop [withscores]   (从大到小的顺序)\n\t\t```\n\t- 删除数据\n\t\t``` redis\n\t\tzrem key member \n\t\t```\n\t- 按条件获取数据\n\t\t``` redis\n\t\tzrangebyscore key min max [withscores] [limit]\n\t\tzrevrangebyscore key max min [withscores]\n\t\t```\n\t- 条件删除数据\n\t\t``` redis\n\t\tzremrangebyrank key start stop\n\t\tzremrangebyscore key min max\n\t\t```\n\t- 获取集合数据总量\n\t\t``` redis\n\t\tzcard key\n\t\tzcount key min max\n\t\t```\n\t- 集合交、并操作\n\t\t``` redis\n\t\tzinterstore destination numkeys key1 key2 ...\n\t\tzunionstore destination numkeys key1 key2 ...\n\t\t```\n\t- 获取数据对应的索引(排名)\n\t\t``` redis\n\t\tzrank key member\n\t\tzrevrank key member\n\t\t```\n\t- score值获取与修改\n\t\t``` redis\n\t\tzscore key member\n\t\tzincrby key increment member\n\t\t```\n\n* 注意点\n\t- min与max用于限定搜索查询的条件\n\t- start和stop用于限定查询范围，作用于索引，表示开始和结束索引\n\t- offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量\n\n* 扩展操作\n\t- 排序类问题\n\t\t* 十大杰出青年\n\t\t* 各类资源类网站TOP10\n\t\t* 聊天室活跃度统计\n\t\t* 游戏好友亲密度\n\n\t- 时效性控制,用于定时任务执行顺序管理或任务过期管理\n\t\t* 对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序\n\t\t* 记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间\n\t\t* 当新任务加入时，判断并跟新当前下一个要处理的任务时间\n\t\t* 为提升sort_set的性能通常将任务根据特征存储成若干个sorted_set\n\t``` redis\n\tzadd tasks 20210613 task1 20130620 task2 20130626 task3\n\tzrange tasks 0 -1 withscores\n\tzremrangbyrank tasks 0 0\n\t```\n\n\t* 对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可\n* 总结\n\t* 带有生命周期的计数器(string)\n\n## 通用命令\n\n* key \n\n\t- key是一个字符串，通过key获取redis中保存的数据\n\t- key的操作\n\t\t* 与key自身状态相关的操作\n\t\t\t* 删除指定key \t\t`del keyi`\n\t\t\t* 获取key是否存在 \t`exists key`\n\t\t\t* 获取key的类型 \t`type key`\n\t\t* 与key有效性控制相关操作 \n\t\t\t* 设置有效期\n\t\t\t\t``` redis\n\t\t\t\texpire key seconds\n\t\t\t\tpexpire key milliseconds\n\t\t\t\texpireat key timestamp\n\t\t\t\tpexpireat key milliseconds-timestamp\n\t\t\t\t```\n\t\t\t* 获取key的有效时间\n\t\t\t\t``` redis\n\t\t\t\tttl key\n\t\t\t\tpttl key\n\t\t\t\t```\n\t\t\t* 切换key从时效性到永久性\n\t\t\t\t``` redis\n\t\t\t\tpersist key\n\t\t\t\t```\n\t\t* key查询操作 \n\t\t\t* 查询key `keys pattern`\n\t\t* key的改名操作\n\t\t\t``` redis\n\t\t\trename key newkey\n\t\t\trenamenx key newkey\n\t\t\t```\n\t\t* 对key排序\n\t\t\t``` redis\n\t\t\tsort\n\t\t\t```\n\t\t* 其它key通用操作\n\t\t\t``` redis\n\t\t\thelp @generic\n\t\t\t```\n* 数据库\n\n\t- redis为每个服务提供16个数据库, 编号0-15\n\t- 每个数据库之间相互独立\n\n\t- 切换数据库  `select index`\n\t- 其它操作\n\t\t* quit\n\t\t* ping\n\t\t* echo message\n\t- 数据移动 \tmove key db\n\t- 数据清除操作\n\t\t* dbsize\n\t\t* flushdb\n\t\t* flushall\n\n\n## 持久化\n\n* 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化\n* 持久化可以防止数据的丢失，确保数据安全性\n\n* 持久化方案\n\t- RDB\n\t\tsave \t保存数据\n\t\tbgsave  后台保存数据，可能不会立即执行\n\t\t通过更改配置文件自动RDB:  `save second changes`  满足限定时间范围内key变化的数量这一条件就进行持久化\n\t\tredis内部涉及RDB的操作都采用bgsave方式，save命令基本可以放弃使用了\n\t\t\n\t\t* RDB优点\n\t\t\t* RDB是一个紧凑压缩的二进制文件，存储效率高\n\t\t\t* RDB内部存储的是redis在某个时间点的数据快照，非常适合数据备份，全量复制等场景\n\t\t\t* RDB恢复数据的速度要比AOF快很多\n\t\t\t* RDB通常用于灾难恢复\n\t\t* RDB缺点\n\t\t\t* RDB方式无法做到实时持久化，具有较大的可能性丢失数据\n\t\t\t* bgsave指令每次运行都要fork操作创建子进程，会牺牲掉一些性能\n\t\t\t* Redis的众多版本中未进行RDB文件格式的版本统一\n\t- AOF\n\t\t* 以独立日志的方式记录每次写的命令，重启时再重新执行AOF文件中命令达到数据恢复的目的\n\t\t* 实现实时性的数据持久化\n\n\t\t* AOF写数据的三种策略\n\t\t\t* always \t每次写入操作均同步到AOF文件中，数据零失误，性能较低\n\t\t\t* everysec  每秒将缓冲区内的指令同步到AOF文件中，数据准确性较高，性能较高(默认配置)\n\t\t\t* no \t\t由操作系统控制每次同步到AOF文件的周期，整体过程不可控\n\n\t\t* AOF配置\n\t\t\t* appendonly yes \t\t\t开启AOF持久化功能，默认为不开启状态\n\t\t\t* appendfsync erverysec  \tAOF写文件策略(默认everysec)\n\t\t\t* appendfilename filename \t配置AOF持久化文件的名字\n\t\t* AOF重写\n\t\t\t* AOF重写就是对同一数据的若干条命令执行结果转换为最终的结果数据对应的指令进行记录\n\n\t\t\t* 作用\n\t\t\t\t* 降低磁盘占用量，提高磁盘利用率\n\t\t\t\t* 提高持久化效率，降低持久化写时间，提高IO性能\n\t\t\t\t* 降低数据恢复用时，提高数据恢复效率\n\n\t\t\t* 重写方式\n\t\t\t\t* 手动重写      bgrewriteaof\n\t\t\t\t* 自动重写 \t\t\n\t\t\t\t\t* auto-aof-rewrite-min-size size  \n\t\t\t\t\t* auto-aof-rewrite-percentage percentage\n\n## 事务\n\n* redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体(一个队列), 当执行时，一次性按照添加顺序依次执行，中间不会被打断\n* 基本操作\n\t* 开启事务 \tmulti   (设置指令开启位置，此指令后续的所有指令均加入到事务中)\n\t* 执行事务  exec \t(设置事务的结束位置，同时执行事务， 与multi成对出现)\n\t* 取消事务  discard (终止当前事务的定义，发生在multi之后，exec之前)\n\t* 注意: 加入到事务的命令暂时进入到任务队列中， 并没有立即执行，只有执行了exec命令才开始执行\n\t* 注意: 在添加事务的过程中如果出现语法错误，整体事务中的所有命令均不会执行\n\t* 注意: 在添加事务的过程中如果出现无法执行的操作，事务中能正确运行的指令会执行，错误的命令不会被执行\n\t* 注意: 已经执行完毕的命令对应的数据不会自动回滚，需要在代码中实现回滚\n\n## 锁\n\n* 监视锁\n\t- 添加监视锁 \twatch key1 [key2...]   (在执行exec之前如果watch的key发生了变化，事务会被终止执行)\n\t- 取消监视锁    unwatch\n\t``` redis\n\t# 客户端1\n\tset name 123\n\twatch name\n\tmulti\n\tset aaa bb\n\tget aaa\n\texec\n\n\t# 客户端2 (客户端2在客户端1执行exec之前修改了被监视的name值，事务会被取消执行)\n\tset name 234\n\t```\n\n* 分布式锁\n\t- 设置分布式锁\t\tsetnx lock-key value  (setnx在key有值时设置失败，无值时设置成功)\n\t- 取消锁\t\t\tdel lock-key\n\t- 设置锁的超时时间 expire lock-key second\n\t```\n\tset num 123\n\n\t# 修改num值之前先获取锁\n\tsetnx lock-num 1\n\t# 给锁设置超时时间\n\texpire lock-num 20\n\n\tset num 234\n\t# 取消锁\n\tdel lock-num\n\t```\n\n## 删除策略\n\n* 过期数据\n\t* Redis是一种内存级数据库，所有的数据存放在内存中，内存中的数据可以通过TTL指令获取其状态\n\t\t* TTL为正数: 具有时效性的数据\n\t\t* TTL = -1 : 永久有效的数据\n\t\t* TTL = -2 : 已经过期的数据 或者 被删除的数据 或者 未定义的数据\n* 数据删除策略(在内存占用和CPU占用达到平衡)\n\t* 定时删除\n\t\t* 创建一个定时器，当key设置有过期时间时，当到达过期时间执行对键的删除操作\n\t\t* 优点: 节约内存，快速释放掉不必要的内存占用\n\t\t* 缺点: CPU压力很大，可能会影响redis服务器响应时间和指令吞吐量\n\t* 惰性删除\n\t\t* 数据到达过期时间时， 不作处理，等下次访问该数据时\n\t\t\t* 如果未过期，返回数据\n\t\t\t* 如果过期了，删除数据，返回不存在\n\t\t* 优点: 节约CPU性能\n\t\t* 缺点: 内存压力很大,可能有些无用内存会长期占用\n\t* 定期删除\n\t\t* 周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度\n\t\t* 周期性抽查存储空间(随机抽查 重点抽查)\n* 逐出算法\n\t* redis添加数据的时候如果内存不满足要求，redis会临时删除一些数据为当前指令清理存储空间, 清理数据的策略称为逐出算法\n\n\t* 数据逐出的相关配置\n\t\t* 最大可使用内存\t\t\tmaxmemory  (占用物理内存的比例， 默认为0，表示不限制, 通常设置在50%以上)\n\t\t* 每次选取待删除数据个数 \tmaxmemory-samples\n\t\t* 删除策略 \t\t\t\t\tmaxmemory-policy (达到最大内存后对挑出的数据进行删除的策略)\n\t\t\t* 检测易失数据(可能会过期的数据集)\n\t\t\t\t* volatile-lru \t\t挑选最近没有使用的数据淘汰\n\t\t\t\t* volatile-lfu  \t挑选最近使用次数最少的数据淘汰\n\t\t\t\t* volatile-ttl \t\t挑选将要过期的数据淘汰\n\t\t\t\t* volatile-random \t任意选择数据淘汰\n\t\t\t* 检测全库数据\n\t\t\t\t* allkeys-lru\t\t挑选最近没有使用的数据淘汰\n\t\t\t\t* allkeys-lfu\t\t挑选使用次数最少的数据淘汰\n\t\t\t\t* allkeys-random \t任意选择数据淘汰\n\t\t\t* 不删除\n\t\t\t\t* noeviction\n\n## 高级数据类型\n\n* Bitmaps\n\t* 获取指定key对应偏移量上的bit值 \tgetbit key offset\n\t* 设置指定key对应偏移量上的bit值    setbit key offset value\n\t* 对指定key按位进行并、交、非、异或操作并将结果保存到destKey中\n\t\tbitop op desKey key1 [key2...]\n\t\t\t* and \t交\n\t\t\t* or \t并\n\t\t\t* not   非\n\t\t\t* xor   异或\n\t* 统计key中1的数量\n\t\tbitcount key [start end]\n* HyperLogLog\n\t* 统计不重复数据的数量\n\t* 基数: 数据集去重后的元素个数\n\t* HyperLogLog是用来做基数统计的\n\n\t* 基本操作\n\t\t* 添加数据 \tpfadd key element [element...]\n\t\t* 统计数据  pfcount key [key...]\n\t\t* 合并数据  pfmerge destkey sourcekey [sourcekey...]\n\t\t\t\n* GEO\n\t* 添加坐标点\n\t\tgeoadd key longitude latitude member [longitude latitude member ...]\n\t* 获取坐标点\n\t\tgeopos key member [member...]\n\t* 计算坐标点的记录\n\t\tgeodist key member1 member2 [unit]\n\t* 根据坐标求范围内的数据\n\t\tgeoradius key longitude latitude radius \n\t* 根据点求范围内的数据\n\t\tgeoradiusbymember key member radius\n\t* 获取指定点对应的坐标hash值\n\t\tgeohash key member\n","slug":"go/redis_basic","published":1,"date":"2022-05-31T09:51:28.595Z","updated":"2022-05-31T09:51:28.595Z","_id":"cl3tkt6eb000ef8wzd0qodmyo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h2><ul>\n<li>Redis(Remote Dictionary Server)是用C语言开发的一个开源的高性能键值对(key-value)内存数据库</li>\n<li>NoSQL: 即Not-Only SQL(泛指非关系型数据库)，作为关系型数据库的补充</li>\n<li>特征<ul>\n<li>数据间没有必然的关联关系</li>\n<li>内部采用单线程机制进行工作</li>\n<li>高性能</li>\n<li>多种数据类型支持<ul>\n<li>字符串型 string</li>\n<li>列表类型 list</li>\n<li>散列类型 hash</li>\n<li>集合类型 set</li>\n<li>有序集合类型 sorted_set</li>\n</ul>\n</li>\n<li>持久化支持</li>\n</ul>\n</li>\n<li>应用<ul>\n<li>为热点数据加速查询</li>\n<li>任务队列, 如秒杀、抢购、排队购票</li>\n<li>即时信息查询, 如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息</li>\n<li>时效性信息控制,如验证码控制、投票控制</li>\n<li>分布式数据共享</li>\n<li>消息队列</li>\n<li>分布式锁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ul>\n<li>服务端启动方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server </span><br><span class=\"line\">redis-server --port 6380</span><br><span class=\"line\">redis-server conf/redis-6379.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端连接</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli </span><br><span class=\"line\">redis-cli -p 6380</span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6380</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h2><ul>\n<li>Redis数据都是Map，采用key:value的形式存储,其中key永远是string，value可以是以下的几种类型之一</li>\n</ul>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><ul>\n<li><p>存储单个数据</p>\n</li>\n<li><p>如果字符串以整数的形式展示，可以作为数字操作使用</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加/修改单条数据</span><br><span class=\"line\">set key val</span><br><span class=\"line\"># 添加/修改多条数据</span><br><span class=\"line\">mset key1 val1 key2 val2</span><br></pre></td></tr></table></figure></li>\n<li>获取数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取单条数据</span><br><span class=\"line\">get key</span><br><span class=\"line\"># 获取多条数据</span><br><span class=\"line\">mget key1 key2</span><br></pre></td></tr></table></figure></li>\n<li>删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del key</span><br></pre></td></tr></table></figure></li>\n<li>获取数据字符个数    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strlen key</span><br></pre></td></tr></table></figure></li>\n<li>追加信息到原始信息后部    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append key value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>redis用于控制数据表主键id自增</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr key</span><br><span class=\"line\">decr key</span><br><span class=\"line\">incrby key increment</span><br><span class=\"line\">decrby key incrment</span><br><span class=\"line\">incrbyfloat key increment </span><br></pre></td></tr></table></figure></li>\n<li><p>设置数据具有指定生命周期, 适用于所有具有时效性限定控制的操作(投票每4小时只能投一票)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setex key seconds value</span><br><span class=\"line\">psetex key milliseconds value</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例:</span><br><span class=\"line\">setex 13879631902 60 1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>格式化存储</p>\n<ul>\n<li>将所有的信息存放在表中，表名:主键名:主键值:字段名 value  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set user:id:00789:fans 1242526</span><br><span class=\"line\">set user:id:00789:blogs 789</span><br></pre></td></tr></table></figure></li>\n<li>用json格式存储信息  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user:id:2506 &#x27;&#123;&quot;name&quot;&quot;:春晚, &quot;fans&quot;: 6143, &quot;focuns&quot;&quot;:83&#125;&#x27;&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li><p>对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p>\n</li>\n<li><p>需要的存储结构: 一个存储空间保存多个键值对数据</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加/修改单个数据</span><br><span class=\"line\">hset key filed1 value1 filed2 value2  </span><br><span class=\"line\"># 添加/修改多个数据</span><br><span class=\"line\">hmset key1 filed1 value1 filed2 value2 key2 filed1 value1  </span><br></pre></td></tr></table></figure></li>\n<li>获取数据     <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取key下面的一个字段值</span><br><span class=\"line\">hget key filed    </span><br><span class=\"line\"># 获取key下面的所有字段值</span><br><span class=\"line\">hgetall key</span><br><span class=\"line\"># 获取key下面的多个字段值</span><br><span class=\"line\">hmget key filed1 field2</span><br></pre></td></tr></table></figure></li>\n<li>删除数据     <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel key field</span><br></pre></td></tr></table></figure></li>\n<li>获取哈希表中字段数量    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen key</span><br></pre></td></tr></table></figure></li>\n<li>获取哈希表中是否存在指定的字段    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists key field</span><br></pre></td></tr></table></figure></li>\n<li>添加之前会检查是否有value值，有的话set不成功    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hsetnx key fidld value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li>获取哈希表中所有的字段名或者字段值   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取字段名</span><br><span class=\"line\">hkeys key    </span><br><span class=\"line\"># 获取字段值</span><br><span class=\"line\">hvals key</span><br></pre></td></tr></table></figure></li>\n<li>设置指定字段的数值数据增加指定范围的值   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby key field increment  </span><br><span class=\"line\">hincrbyfloat key field incrment</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>hash类型下的value只能存储字符串，不允许存储其他类型的数据类型</li>\n<li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性</li>\n<li>hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率会很低，有可能成为数据访问瓶颈</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li><p>电商网站购物车设计与实现</p>\n<ul>\n<li>客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</li>\n<li>将商品编号作为field，购买数量作为value进行存储</li>\n<li>添加商品: 追加全新的fileld与value</li>\n<li>浏览: 遍历hash</li>\n<li>更改数量: 自增/自减, 设置value值</li>\n<li>删除商品: 删除field</li>\n<li>清空: 删除key</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset user:id:001 g01 300 g02 500</span><br><span class=\"line\">hset user:id:001 g03 30</span><br><span class=\"line\">hincrby user:id:001 g03 2</span><br><span class=\"line\">hlen user:id:001</span><br><span class=\"line\">hdel user:id:001 g02</span><br></pre></td></tr></table></figure></li>\n<li><p>改进</p>\n<ul>\n<li>可以将购物车中的每条商品信息保存成多条filed<ul>\n<li>eg: 商品id:nums 用于保存购买的数量<br>  商品id:info 用于保存对应商品的信息<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset 001 g01:nums 100 g01:info &#x27;&#123;&quot;name&quot;:&quot;爽歪歪&quot;, &quot;price&quot;:100&#125;&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>商品信息可以存储为独立的hash</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抢购</p>\n<ul>\n<li>以商家id作为key</li>\n<li>将参与抢购的商品id作为field</li>\n<li>将参与抢购的商品数量作为对应的value<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset p01 c30 100 c50 100 c100 100</span><br><span class=\"line\">hincrby p01 c30 -10</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><ul>\n<li><p>存储多个数据，并对数据进入存储空间的顺序进行区分</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush key value1 value2.... (从左边push)</span><br><span class=\"line\">rpush key value1 value2.... (从右边push)</span><br></pre></td></tr></table></figure></li>\n<li>获取数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange key start stop  (-1表示最后一个元素,-2表示倒数第二个元素)</span><br><span class=\"line\">lindex key index</span><br><span class=\"line\">llen key</span><br></pre></td></tr></table></figure></li>\n<li>获取并移除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop key</span><br><span class=\"line\">rpop key</span><br></pre></td></tr></table></figure></li>\n<li>规定时间内获取并移除数据(lpop和rpop的阻塞版本(b是blocking的缩写))(任务队列)  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blpop key1 key2 ... timeout</span><br><span class=\"line\">brpop key2 key2 ... timeout</span><br></pre></td></tr></table></figure></li>\n<li>移除指定数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem key count value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>list扩展操作</p>\n<ul>\n<li>朋友圈点赞，要求按照点赞顺序显示点赞好友的信息</li>\n<li>list可以对数据进行分页操作，通常第一页信息来自于list，第二页及更多的信息通过数据库的形式加载</li>\n<li>list用于展示最新的消息(最新关注的公众号，最新的日志)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><ul>\n<li><p>存储大量的数据，在查询方面提供更高的效率</p>\n</li>\n<li><p>存储结构和hash完全相同，仅存储键，不存储值(nil),并且键是不允许重复的</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li><p>添加数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd key member1 member2 ...</span><br></pre></td></tr></table></figure></li>\n<li><p>获取全部数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers key</span><br></pre></td></tr></table></figure></li>\n<li><p>删除数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srem key member1 member2 ....</span><br></pre></td></tr></table></figure></li>\n<li><p>获取集合数据总量</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scard key</span><br></pre></td></tr></table></figure></li>\n<li><p>判断集合中是否包含指定数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember key member</span><br></pre></td></tr></table></figure></li>\n<li><p>随机获取集合中指定数量的数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember  key count</span><br></pre></td></tr></table></figure></li>\n<li><p>随机获取集合中的某个数据并将该数据移出集合</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop key</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的交集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter key1 key2 </span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的并集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的差集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的交、并、差集并存储到指定集合中</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinterstore destination key1 key2</span><br><span class=\"line\">sunionstore destination key1 key2</span><br><span class=\"line\">sdiffstore destination key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>将指定数据从原始集合移动到目标集合中</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smove source destination member</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>应用于随机推荐类信息检索，例如热点歌单推荐、购买旅游线路</p>\n<ul>\n<li>系统分析出各个分类的最新最热点信息条目并组织成set集合</li>\n<li>随机挑选出其中部分信息</li>\n<li>配合用户关注信息分类中的热点信息组织成展示的全信息集合</li>\n</ul>\n</li>\n<li><p>应用于同类信息的关联检索，二度关联搜索、深度关联搜索</p>\n<ul>\n<li>显示共同关注</li>\n<li>显示共同好友</li>\n</ul>\n</li>\n<li><p>权限校验</p>\n<ul>\n<li>依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤和快速查询</li>\n<li>根据用户id获取用户所有角色</li>\n<li>根据用户所有角色获取用户所有权限放入到set集合中</li>\n<li>根据用户所有角色获取用户所有数据全选放入set集合中</li>\n</ul>\n<p>  sadd rid:001 getall getById<br>  sadd rid:002 getall getCount insert<br>  sunionstore uid:007 rid:001 rid:002<br>  smembers uid:007</p>\n</li>\n<li><p>统计网站的访问量，PV(访问量) 、UV(独立访客)、IP(独立IP)</p>\n<ul>\n<li><p>PV: 网站被访问次数，可通过刷新页面提高访问量</p>\n</li>\n<li><p>UV: 网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变</p>\n</li>\n<li><p>IP: 网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问IP不变</p>\n</li>\n<li><p>通过set的特点做重复性过滤</p>\n</li>\n<li><p>建立set模型，记录不同cookie数量(UV)</p>\n</li>\n<li><p>建立set模型，记录不同IP数量</p>\n</li>\n</ul>\n</li>\n<li><p>黑白名单</p>\n</li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>set中数据不允许重复</li>\n<li>set虽然与hash中的存储结构相同，但是无法启用hash中的存储值的空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort_set\"></a>sort_set</h3><ul>\n<li><p>数据排序有利于数据展示，需要提供有一种可以根据自身特征进行排序的方式</p>\n</li>\n<li><p>在set的存储结构基础上添加可排序字段</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd key score1 member1 score2 member2</span><br></pre></td></tr></table></figure></li>\n<li>获取全部数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrange key start stop [withscores]      (从小到大的顺序)</span><br><span class=\"line\">zrevrange key start stop [withscores]   (从大到小的顺序)</span><br></pre></td></tr></table></figure></li>\n<li>删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrem key member </span><br></pre></td></tr></table></figure></li>\n<li>按条件获取数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore key min max [withscores] [limit]</span><br><span class=\"line\">zrevrangebyscore key max min [withscores]</span><br></pre></td></tr></table></figure></li>\n<li>条件删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zremrangebyrank key start stop</span><br><span class=\"line\">zremrangebyscore key min max</span><br></pre></td></tr></table></figure></li>\n<li>获取集合数据总量  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcard key</span><br><span class=\"line\">zcount key min max</span><br></pre></td></tr></table></figure></li>\n<li>集合交、并操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zinterstore destination numkeys key1 key2 ...</span><br><span class=\"line\">zunionstore destination numkeys key1 key2 ...</span><br></pre></td></tr></table></figure></li>\n<li>获取数据对应的索引(排名)  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrank key member</span><br><span class=\"line\">zrevrank key member</span><br></pre></td></tr></table></figure></li>\n<li>score值获取与修改  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zscore key member</span><br><span class=\"line\">zincrby key increment member</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>注意点</p>\n<ul>\n<li>min与max用于限定搜索查询的条件</li>\n<li>start和stop用于限定查询范围，作用于索引，表示开始和结束索引</li>\n<li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>排序类问题</p>\n<ul>\n<li>十大杰出青年</li>\n<li>各类资源类网站TOP10</li>\n<li>聊天室活跃度统计</li>\n<li>游戏好友亲密度</li>\n</ul>\n</li>\n<li><p>时效性控制,用于定时任务执行顺序管理或任务过期管理</p>\n<ul>\n<li>对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序</li>\n<li>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间</li>\n<li>当新任务加入时，判断并跟新当前下一个要处理的任务时间</li>\n<li>为提升sort_set的性能通常将任务根据特征存储成若干个sorted_set<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd tasks 20210613 task1 20130620 task2 20130626 task3</span><br><span class=\"line\">zrange tasks 0 -1 withscores</span><br><span class=\"line\">zremrangbyrank tasks 0 0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可</li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>带有生命周期的计数器(string)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h2><ul>\n<li><p>key </p>\n<ul>\n<li>key是一个字符串，通过key获取redis中保存的数据</li>\n<li>key的操作<ul>\n<li>与key自身状态相关的操作<ul>\n<li>删除指定key         <code>del keyi</code></li>\n<li>获取key是否存在     <code>exists key</code></li>\n<li>获取key的类型     <code>type key</code></li>\n</ul>\n</li>\n<li>与key有效性控制相关操作 <ul>\n<li>设置有效期  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expire key seconds</span><br><span class=\"line\">pexpire key milliseconds</span><br><span class=\"line\">expireat key timestamp</span><br><span class=\"line\">pexpireat key milliseconds-timestamp</span><br></pre></td></tr></table></figure></li>\n<li>获取key的有效时间  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttl key</span><br><span class=\"line\">pttl key</span><br></pre></td></tr></table></figure></li>\n<li>切换key从时效性到永久性  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persist key</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>key查询操作 <ul>\n<li>查询key <code>keys pattern</code></li>\n</ul>\n</li>\n<li>key的改名操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename key newkey</span><br><span class=\"line\">renamenx key newkey</span><br></pre></td></tr></table></figure></li>\n<li>对key排序  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort</span><br></pre></td></tr></table></figure></li>\n<li>其它key通用操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">help @generic</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>redis为每个服务提供16个数据库, 编号0-15</p>\n</li>\n<li><p>每个数据库之间相互独立</p>\n</li>\n<li><p>切换数据库  <code>select index</code></p>\n</li>\n<li><p>其它操作</p>\n<ul>\n<li>quit</li>\n<li>ping</li>\n<li>echo message</li>\n</ul>\n</li>\n<li><p>数据移动     move key db</p>\n</li>\n<li><p>数据清除操作</p>\n<ul>\n<li>dbsize</li>\n<li>flushdb</li>\n<li>flushall</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><ul>\n<li><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化</p>\n</li>\n<li><p>持久化可以防止数据的丢失，确保数据安全性</p>\n</li>\n<li><p>持久化方案</p>\n<ul>\n<li><p>RDB<br>  save     保存数据<br>  bgsave  后台保存数据，可能不会立即执行<br>  通过更改配置文件自动RDB:  <code>save second changes</code>  满足限定时间范围内key变化的数量这一条件就进行持久化<br>  redis内部涉及RDB的操作都采用bgsave方式，save命令基本可以放弃使用了</p>\n<ul>\n<li>RDB优点<ul>\n<li>RDB是一个紧凑压缩的二进制文件，存储效率高</li>\n<li>RDB内部存储的是redis在某个时间点的数据快照，非常适合数据备份，全量复制等场景</li>\n<li>RDB恢复数据的速度要比AOF快很多</li>\n<li>RDB通常用于灾难恢复</li>\n</ul>\n</li>\n<li>RDB缺点<ul>\n<li>RDB方式无法做到实时持久化，具有较大的可能性丢失数据</li>\n<li>bgsave指令每次运行都要fork操作创建子进程，会牺牲掉一些性能</li>\n<li>Redis的众多版本中未进行RDB文件格式的版本统一</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>AOF</p>\n<ul>\n<li><p>以独立日志的方式记录每次写的命令，重启时再重新执行AOF文件中命令达到数据恢复的目的</p>\n</li>\n<li><p>实现实时性的数据持久化</p>\n</li>\n<li><p>AOF写数据的三种策略</p>\n<ul>\n<li>always     每次写入操作均同步到AOF文件中，数据零失误，性能较低</li>\n<li>everysec  每秒将缓冲区内的指令同步到AOF文件中，数据准确性较高，性能较高(默认配置)</li>\n<li>no         由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li>\n</ul>\n</li>\n<li><p>AOF配置</p>\n<ul>\n<li>appendonly yes             开启AOF持久化功能，默认为不开启状态</li>\n<li>appendfsync erverysec      AOF写文件策略(默认everysec)</li>\n<li>appendfilename filename     配置AOF持久化文件的名字</li>\n</ul>\n</li>\n<li><p>AOF重写</p>\n<ul>\n<li><p>AOF重写就是对同一数据的若干条命令执行结果转换为最终的结果数据对应的指令进行记录</p>\n</li>\n<li><p>作用</p>\n<ul>\n<li>降低磁盘占用量，提高磁盘利用率</li>\n<li>提高持久化效率，降低持久化写时间，提高IO性能</li>\n<li>降低数据恢复用时，提高数据恢复效率</li>\n</ul>\n</li>\n<li><p>重写方式</p>\n<ul>\n<li>手动重写      bgrewriteaof</li>\n<li>自动重写         <ul>\n<li>auto-aof-rewrite-min-size size  </li>\n<li>auto-aof-rewrite-percentage percentage</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体(一个队列), 当执行时，一次性按照添加顺序依次执行，中间不会被打断</li>\n<li>基本操作<ul>\n<li>开启事务     multi   (设置指令开启位置，此指令后续的所有指令均加入到事务中)</li>\n<li>执行事务  exec     (设置事务的结束位置，同时执行事务， 与multi成对出现)</li>\n<li>取消事务  discard (终止当前事务的定义，发生在multi之后，exec之前)</li>\n<li>注意: 加入到事务的命令暂时进入到任务队列中， 并没有立即执行，只有执行了exec命令才开始执行</li>\n<li>注意: 在添加事务的过程中如果出现语法错误，整体事务中的所有命令均不会执行</li>\n<li>注意: 在添加事务的过程中如果出现无法执行的操作，事务中能正确运行的指令会执行，错误的命令不会被执行</li>\n<li>注意: 已经执行完毕的命令对应的数据不会自动回滚，需要在代码中实现回滚</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li><p>监视锁</p>\n<ul>\n<li>添加监视锁     watch key1 [key2…]   (在执行exec之前如果watch的key发生了变化，事务会被终止执行)</li>\n<li>取消监视锁    unwatch<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端1</span><br><span class=\"line\">set name 123</span><br><span class=\"line\">watch name</span><br><span class=\"line\">multi</span><br><span class=\"line\">set aaa bb</span><br><span class=\"line\">get aaa</span><br><span class=\"line\">exec</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端2 (客户端2在客户端1执行exec之前修改了被监视的name值，事务会被取消执行)</span><br><span class=\"line\">set name 234</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>分布式锁</p>\n<ul>\n<li>设置分布式锁        setnx lock-key value  (setnx在key有值时设置失败，无值时设置成功)</li>\n<li>取消锁            del lock-key</li>\n<li>设置锁的超时时间 expire lock-key second<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set num 123</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改num值之前先获取锁</span><br><span class=\"line\">setnx lock-num 1</span><br><span class=\"line\"># 给锁设置超时时间</span><br><span class=\"line\">expire lock-num 20</span><br><span class=\"line\"></span><br><span class=\"line\">set num 234</span><br><span class=\"line\"># 取消锁</span><br><span class=\"line\">del lock-num</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h2><ul>\n<li><p>过期数据</p>\n<ul>\n<li>Redis是一种内存级数据库，所有的数据存放在内存中，内存中的数据可以通过TTL指令获取其状态<ul>\n<li>TTL为正数: 具有时效性的数据</li>\n<li>TTL = -1 : 永久有效的数据</li>\n<li>TTL = -2 : 已经过期的数据 或者 被删除的数据 或者 未定义的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据删除策略(在内存占用和CPU占用达到平衡)</p>\n<ul>\n<li>定时删除<ul>\n<li>创建一个定时器，当key设置有过期时间时，当到达过期时间执行对键的删除操作</li>\n<li>优点: 节约内存，快速释放掉不必要的内存占用</li>\n<li>缺点: CPU压力很大，可能会影响redis服务器响应时间和指令吞吐量</li>\n</ul>\n</li>\n<li>惰性删除<ul>\n<li>数据到达过期时间时， 不作处理，等下次访问该数据时<ul>\n<li>如果未过期，返回数据</li>\n<li>如果过期了，删除数据，返回不存在</li>\n</ul>\n</li>\n<li>优点: 节约CPU性能</li>\n<li>缺点: 内存压力很大,可能有些无用内存会长期占用</li>\n</ul>\n</li>\n<li>定期删除<ul>\n<li>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</li>\n<li>周期性抽查存储空间(随机抽查 重点抽查)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>逐出算法</p>\n<ul>\n<li><p>redis添加数据的时候如果内存不满足要求，redis会临时删除一些数据为当前指令清理存储空间, 清理数据的策略称为逐出算法</p>\n</li>\n<li><p>数据逐出的相关配置</p>\n<ul>\n<li>最大可使用内存            maxmemory  (占用物理内存的比例， 默认为0，表示不限制, 通常设置在50%以上)</li>\n<li>每次选取待删除数据个数     maxmemory-samples</li>\n<li>删除策略                     maxmemory-policy (达到最大内存后对挑出的数据进行删除的策略)<ul>\n<li>检测易失数据(可能会过期的数据集)<ul>\n<li>volatile-lru         挑选最近没有使用的数据淘汰</li>\n<li>volatile-lfu      挑选最近使用次数最少的数据淘汰</li>\n<li>volatile-ttl         挑选将要过期的数据淘汰</li>\n<li>volatile-random     任意选择数据淘汰</li>\n</ul>\n</li>\n<li>检测全库数据<ul>\n<li>allkeys-lru        挑选最近没有使用的数据淘汰</li>\n<li>allkeys-lfu        挑选使用次数最少的数据淘汰</li>\n<li>allkeys-random     任意选择数据淘汰</li>\n</ul>\n</li>\n<li>不删除<ul>\n<li>noeviction</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"高级数据类型\"><a href=\"#高级数据类型\" class=\"headerlink\" title=\"高级数据类型\"></a>高级数据类型</h2><ul>\n<li><p>Bitmaps</p>\n<ul>\n<li>获取指定key对应偏移量上的bit值     getbit key offset</li>\n<li>设置指定key对应偏移量上的bit值    setbit key offset value</li>\n<li>对指定key按位进行并、交、非、异或操作并将结果保存到destKey中<br>  bitop op desKey key1 [key2…]<pre><code>  * and     交\n  * or     并\n  * not   非\n  * xor   异或\n</code></pre>\n</li>\n<li>统计key中1的数量<br>  bitcount key [start end]</li>\n</ul>\n</li>\n<li><p>HyperLogLog</p>\n<ul>\n<li><p>统计不重复数据的数量</p>\n</li>\n<li><p>基数: 数据集去重后的元素个数</p>\n</li>\n<li><p>HyperLogLog是用来做基数统计的</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加数据     pfadd key element [element…]</li>\n<li>统计数据  pfcount key [key…]</li>\n<li>合并数据  pfmerge destkey sourcekey [sourcekey…]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>GEO</p>\n<ul>\n<li>添加坐标点<br>  geoadd key longitude latitude member [longitude latitude member …]</li>\n<li>获取坐标点<br>  geopos key member [member…]</li>\n<li>计算坐标点的记录<br>  geodist key member1 member2 [unit]</li>\n<li>根据坐标求范围内的数据<br>  georadius key longitude latitude radius </li>\n<li>根据点求范围内的数据<br>  georadiusbymember key member radius</li>\n<li>获取指定点对应的坐标hash值<br>  geohash key member</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h2><ul>\n<li>Redis(Remote Dictionary Server)是用C语言开发的一个开源的高性能键值对(key-value)内存数据库</li>\n<li>NoSQL: 即Not-Only SQL(泛指非关系型数据库)，作为关系型数据库的补充</li>\n<li>特征<ul>\n<li>数据间没有必然的关联关系</li>\n<li>内部采用单线程机制进行工作</li>\n<li>高性能</li>\n<li>多种数据类型支持<ul>\n<li>字符串型 string</li>\n<li>列表类型 list</li>\n<li>散列类型 hash</li>\n<li>集合类型 set</li>\n<li>有序集合类型 sorted_set</li>\n</ul>\n</li>\n<li>持久化支持</li>\n</ul>\n</li>\n<li>应用<ul>\n<li>为热点数据加速查询</li>\n<li>任务队列, 如秒杀、抢购、排队购票</li>\n<li>即时信息查询, 如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息</li>\n<li>时效性信息控制,如验证码控制、投票控制</li>\n<li>分布式数据共享</li>\n<li>消息队列</li>\n<li>分布式锁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ul>\n<li>服务端启动方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server </span><br><span class=\"line\">redis-server --port 6380</span><br><span class=\"line\">redis-server conf/redis-6379.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端连接</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli </span><br><span class=\"line\">redis-cli -p 6380</span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6380</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h2><ul>\n<li>Redis数据都是Map，采用key:value的形式存储,其中key永远是string，value可以是以下的几种类型之一</li>\n</ul>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><ul>\n<li><p>存储单个数据</p>\n</li>\n<li><p>如果字符串以整数的形式展示，可以作为数字操作使用</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加/修改单条数据</span><br><span class=\"line\">set key val</span><br><span class=\"line\"># 添加/修改多条数据</span><br><span class=\"line\">mset key1 val1 key2 val2</span><br></pre></td></tr></table></figure></li>\n<li>获取数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取单条数据</span><br><span class=\"line\">get key</span><br><span class=\"line\"># 获取多条数据</span><br><span class=\"line\">mget key1 key2</span><br></pre></td></tr></table></figure></li>\n<li>删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del key</span><br></pre></td></tr></table></figure></li>\n<li>获取数据字符个数    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strlen key</span><br></pre></td></tr></table></figure></li>\n<li>追加信息到原始信息后部    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append key value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>redis用于控制数据表主键id自增</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr key</span><br><span class=\"line\">decr key</span><br><span class=\"line\">incrby key increment</span><br><span class=\"line\">decrby key incrment</span><br><span class=\"line\">incrbyfloat key increment </span><br></pre></td></tr></table></figure></li>\n<li><p>设置数据具有指定生命周期, 适用于所有具有时效性限定控制的操作(投票每4小时只能投一票)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setex key seconds value</span><br><span class=\"line\">psetex key milliseconds value</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例:</span><br><span class=\"line\">setex 13879631902 60 1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>格式化存储</p>\n<ul>\n<li>将所有的信息存放在表中，表名:主键名:主键值:字段名 value  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set user:id:00789:fans 1242526</span><br><span class=\"line\">set user:id:00789:blogs 789</span><br></pre></td></tr></table></figure></li>\n<li>用json格式存储信息  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user:id:2506 &#x27;&#123;&quot;name&quot;&quot;:春晚, &quot;fans&quot;: 6143, &quot;focuns&quot;&quot;:83&#125;&#x27;&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><ul>\n<li><p>对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p>\n</li>\n<li><p>需要的存储结构: 一个存储空间保存多个键值对数据</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加/修改单个数据</span><br><span class=\"line\">hset key filed1 value1 filed2 value2  </span><br><span class=\"line\"># 添加/修改多个数据</span><br><span class=\"line\">hmset key1 filed1 value1 filed2 value2 key2 filed1 value1  </span><br></pre></td></tr></table></figure></li>\n<li>获取数据     <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取key下面的一个字段值</span><br><span class=\"line\">hget key filed    </span><br><span class=\"line\"># 获取key下面的所有字段值</span><br><span class=\"line\">hgetall key</span><br><span class=\"line\"># 获取key下面的多个字段值</span><br><span class=\"line\">hmget key filed1 field2</span><br></pre></td></tr></table></figure></li>\n<li>删除数据     <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel key field</span><br></pre></td></tr></table></figure></li>\n<li>获取哈希表中字段数量    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen key</span><br></pre></td></tr></table></figure></li>\n<li>获取哈希表中是否存在指定的字段    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists key field</span><br></pre></td></tr></table></figure></li>\n<li>添加之前会检查是否有value值，有的话set不成功    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hsetnx key fidld value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li>获取哈希表中所有的字段名或者字段值   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取字段名</span><br><span class=\"line\">hkeys key    </span><br><span class=\"line\"># 获取字段值</span><br><span class=\"line\">hvals key</span><br></pre></td></tr></table></figure></li>\n<li>设置指定字段的数值数据增加指定范围的值   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby key field increment  </span><br><span class=\"line\">hincrbyfloat key field incrment</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>hash类型下的value只能存储字符串，不允许存储其他类型的数据类型</li>\n<li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性</li>\n<li>hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率会很低，有可能成为数据访问瓶颈</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li><p>电商网站购物车设计与实现</p>\n<ul>\n<li>客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</li>\n<li>将商品编号作为field，购买数量作为value进行存储</li>\n<li>添加商品: 追加全新的fileld与value</li>\n<li>浏览: 遍历hash</li>\n<li>更改数量: 自增/自减, 设置value值</li>\n<li>删除商品: 删除field</li>\n<li>清空: 删除key</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset user:id:001 g01 300 g02 500</span><br><span class=\"line\">hset user:id:001 g03 30</span><br><span class=\"line\">hincrby user:id:001 g03 2</span><br><span class=\"line\">hlen user:id:001</span><br><span class=\"line\">hdel user:id:001 g02</span><br></pre></td></tr></table></figure></li>\n<li><p>改进</p>\n<ul>\n<li>可以将购物车中的每条商品信息保存成多条filed<ul>\n<li>eg: 商品id:nums 用于保存购买的数量<br>  商品id:info 用于保存对应商品的信息<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset 001 g01:nums 100 g01:info &#x27;&#123;&quot;name&quot;:&quot;爽歪歪&quot;, &quot;price&quot;:100&#125;&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>商品信息可以存储为独立的hash</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抢购</p>\n<ul>\n<li>以商家id作为key</li>\n<li>将参与抢购的商品id作为field</li>\n<li>将参与抢购的商品数量作为对应的value<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset p01 c30 100 c50 100 c100 100</span><br><span class=\"line\">hincrby p01 c30 -10</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><ul>\n<li><p>存储多个数据，并对数据进入存储空间的顺序进行区分</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加/修改数据    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush key value1 value2.... (从左边push)</span><br><span class=\"line\">rpush key value1 value2.... (从右边push)</span><br></pre></td></tr></table></figure></li>\n<li>获取数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange key start stop  (-1表示最后一个元素,-2表示倒数第二个元素)</span><br><span class=\"line\">lindex key index</span><br><span class=\"line\">llen key</span><br></pre></td></tr></table></figure></li>\n<li>获取并移除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop key</span><br><span class=\"line\">rpop key</span><br></pre></td></tr></table></figure></li>\n<li>规定时间内获取并移除数据(lpop和rpop的阻塞版本(b是blocking的缩写))(任务队列)  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blpop key1 key2 ... timeout</span><br><span class=\"line\">brpop key2 key2 ... timeout</span><br></pre></td></tr></table></figure></li>\n<li>移除指定数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem key count value</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>list扩展操作</p>\n<ul>\n<li>朋友圈点赞，要求按照点赞顺序显示点赞好友的信息</li>\n<li>list可以对数据进行分页操作，通常第一页信息来自于list，第二页及更多的信息通过数据库的形式加载</li>\n<li>list用于展示最新的消息(最新关注的公众号，最新的日志)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><ul>\n<li><p>存储大量的数据，在查询方面提供更高的效率</p>\n</li>\n<li><p>存储结构和hash完全相同，仅存储键，不存储值(nil),并且键是不允许重复的</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li><p>添加数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd key member1 member2 ...</span><br></pre></td></tr></table></figure></li>\n<li><p>获取全部数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers key</span><br></pre></td></tr></table></figure></li>\n<li><p>删除数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srem key member1 member2 ....</span><br></pre></td></tr></table></figure></li>\n<li><p>获取集合数据总量</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scard key</span><br></pre></td></tr></table></figure></li>\n<li><p>判断集合中是否包含指定数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember key member</span><br></pre></td></tr></table></figure></li>\n<li><p>随机获取集合中指定数量的数据</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember  key count</span><br></pre></td></tr></table></figure></li>\n<li><p>随机获取集合中的某个数据并将该数据移出集合</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop key</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的交集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter key1 key2 </span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的并集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的差集</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>求两个集合的交、并、差集并存储到指定集合中</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinterstore destination key1 key2</span><br><span class=\"line\">sunionstore destination key1 key2</span><br><span class=\"line\">sdiffstore destination key1 key2</span><br></pre></td></tr></table></figure></li>\n<li><p>将指定数据从原始集合移动到目标集合中</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smove source destination member</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>应用于随机推荐类信息检索，例如热点歌单推荐、购买旅游线路</p>\n<ul>\n<li>系统分析出各个分类的最新最热点信息条目并组织成set集合</li>\n<li>随机挑选出其中部分信息</li>\n<li>配合用户关注信息分类中的热点信息组织成展示的全信息集合</li>\n</ul>\n</li>\n<li><p>应用于同类信息的关联检索，二度关联搜索、深度关联搜索</p>\n<ul>\n<li>显示共同关注</li>\n<li>显示共同好友</li>\n</ul>\n</li>\n<li><p>权限校验</p>\n<ul>\n<li>依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤和快速查询</li>\n<li>根据用户id获取用户所有角色</li>\n<li>根据用户所有角色获取用户所有权限放入到set集合中</li>\n<li>根据用户所有角色获取用户所有数据全选放入set集合中</li>\n</ul>\n<p>  sadd rid:001 getall getById<br>  sadd rid:002 getall getCount insert<br>  sunionstore uid:007 rid:001 rid:002<br>  smembers uid:007</p>\n</li>\n<li><p>统计网站的访问量，PV(访问量) 、UV(独立访客)、IP(独立IP)</p>\n<ul>\n<li><p>PV: 网站被访问次数，可通过刷新页面提高访问量</p>\n</li>\n<li><p>UV: 网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变</p>\n</li>\n<li><p>IP: 网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问IP不变</p>\n</li>\n<li><p>通过set的特点做重复性过滤</p>\n</li>\n<li><p>建立set模型，记录不同cookie数量(UV)</p>\n</li>\n<li><p>建立set模型，记录不同IP数量</p>\n</li>\n</ul>\n</li>\n<li><p>黑白名单</p>\n</li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>set中数据不允许重复</li>\n<li>set虽然与hash中的存储结构相同，但是无法启用hash中的存储值的空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort_set\"></a>sort_set</h3><ul>\n<li><p>数据排序有利于数据展示，需要提供有一种可以根据自身特征进行排序的方式</p>\n</li>\n<li><p>在set的存储结构基础上添加可排序字段</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd key score1 member1 score2 member2</span><br></pre></td></tr></table></figure></li>\n<li>获取全部数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrange key start stop [withscores]      (从小到大的顺序)</span><br><span class=\"line\">zrevrange key start stop [withscores]   (从大到小的顺序)</span><br></pre></td></tr></table></figure></li>\n<li>删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrem key member </span><br></pre></td></tr></table></figure></li>\n<li>按条件获取数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrangebyscore key min max [withscores] [limit]</span><br><span class=\"line\">zrevrangebyscore key max min [withscores]</span><br></pre></td></tr></table></figure></li>\n<li>条件删除数据  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zremrangebyrank key start stop</span><br><span class=\"line\">zremrangebyscore key min max</span><br></pre></td></tr></table></figure></li>\n<li>获取集合数据总量  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zcard key</span><br><span class=\"line\">zcount key min max</span><br></pre></td></tr></table></figure></li>\n<li>集合交、并操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zinterstore destination numkeys key1 key2 ...</span><br><span class=\"line\">zunionstore destination numkeys key1 key2 ...</span><br></pre></td></tr></table></figure></li>\n<li>获取数据对应的索引(排名)  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zrank key member</span><br><span class=\"line\">zrevrank key member</span><br></pre></td></tr></table></figure></li>\n<li>score值获取与修改  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zscore key member</span><br><span class=\"line\">zincrby key increment member</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>注意点</p>\n<ul>\n<li>min与max用于限定搜索查询的条件</li>\n<li>start和stop用于限定查询范围，作用于索引，表示开始和结束索引</li>\n<li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li>\n</ul>\n</li>\n<li><p>扩展操作</p>\n<ul>\n<li><p>排序类问题</p>\n<ul>\n<li>十大杰出青年</li>\n<li>各类资源类网站TOP10</li>\n<li>聊天室活跃度统计</li>\n<li>游戏好友亲密度</li>\n</ul>\n</li>\n<li><p>时效性控制,用于定时任务执行顺序管理或任务过期管理</p>\n<ul>\n<li>对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序</li>\n<li>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间</li>\n<li>当新任务加入时，判断并跟新当前下一个要处理的任务时间</li>\n<li>为提升sort_set的性能通常将任务根据特征存储成若干个sorted_set<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd tasks 20210613 task1 20130620 task2 20130626 task3</span><br><span class=\"line\">zrange tasks 0 -1 withscores</span><br><span class=\"line\">zremrangbyrank tasks 0 0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可</li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>带有生命周期的计数器(string)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h2><ul>\n<li><p>key </p>\n<ul>\n<li>key是一个字符串，通过key获取redis中保存的数据</li>\n<li>key的操作<ul>\n<li>与key自身状态相关的操作<ul>\n<li>删除指定key         <code>del keyi</code></li>\n<li>获取key是否存在     <code>exists key</code></li>\n<li>获取key的类型     <code>type key</code></li>\n</ul>\n</li>\n<li>与key有效性控制相关操作 <ul>\n<li>设置有效期  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expire key seconds</span><br><span class=\"line\">pexpire key milliseconds</span><br><span class=\"line\">expireat key timestamp</span><br><span class=\"line\">pexpireat key milliseconds-timestamp</span><br></pre></td></tr></table></figure></li>\n<li>获取key的有效时间  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttl key</span><br><span class=\"line\">pttl key</span><br></pre></td></tr></table></figure></li>\n<li>切换key从时效性到永久性  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persist key</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>key查询操作 <ul>\n<li>查询key <code>keys pattern</code></li>\n</ul>\n</li>\n<li>key的改名操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename key newkey</span><br><span class=\"line\">renamenx key newkey</span><br></pre></td></tr></table></figure></li>\n<li>对key排序  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort</span><br></pre></td></tr></table></figure></li>\n<li>其它key通用操作  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">help @generic</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据库</p>\n<ul>\n<li><p>redis为每个服务提供16个数据库, 编号0-15</p>\n</li>\n<li><p>每个数据库之间相互独立</p>\n</li>\n<li><p>切换数据库  <code>select index</code></p>\n</li>\n<li><p>其它操作</p>\n<ul>\n<li>quit</li>\n<li>ping</li>\n<li>echo message</li>\n</ul>\n</li>\n<li><p>数据移动     move key db</p>\n</li>\n<li><p>数据清除操作</p>\n<ul>\n<li>dbsize</li>\n<li>flushdb</li>\n<li>flushall</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><ul>\n<li><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化</p>\n</li>\n<li><p>持久化可以防止数据的丢失，确保数据安全性</p>\n</li>\n<li><p>持久化方案</p>\n<ul>\n<li><p>RDB<br>  save     保存数据<br>  bgsave  后台保存数据，可能不会立即执行<br>  通过更改配置文件自动RDB:  <code>save second changes</code>  满足限定时间范围内key变化的数量这一条件就进行持久化<br>  redis内部涉及RDB的操作都采用bgsave方式，save命令基本可以放弃使用了</p>\n<ul>\n<li>RDB优点<ul>\n<li>RDB是一个紧凑压缩的二进制文件，存储效率高</li>\n<li>RDB内部存储的是redis在某个时间点的数据快照，非常适合数据备份，全量复制等场景</li>\n<li>RDB恢复数据的速度要比AOF快很多</li>\n<li>RDB通常用于灾难恢复</li>\n</ul>\n</li>\n<li>RDB缺点<ul>\n<li>RDB方式无法做到实时持久化，具有较大的可能性丢失数据</li>\n<li>bgsave指令每次运行都要fork操作创建子进程，会牺牲掉一些性能</li>\n<li>Redis的众多版本中未进行RDB文件格式的版本统一</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>AOF</p>\n<ul>\n<li><p>以独立日志的方式记录每次写的命令，重启时再重新执行AOF文件中命令达到数据恢复的目的</p>\n</li>\n<li><p>实现实时性的数据持久化</p>\n</li>\n<li><p>AOF写数据的三种策略</p>\n<ul>\n<li>always     每次写入操作均同步到AOF文件中，数据零失误，性能较低</li>\n<li>everysec  每秒将缓冲区内的指令同步到AOF文件中，数据准确性较高，性能较高(默认配置)</li>\n<li>no         由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li>\n</ul>\n</li>\n<li><p>AOF配置</p>\n<ul>\n<li>appendonly yes             开启AOF持久化功能，默认为不开启状态</li>\n<li>appendfsync erverysec      AOF写文件策略(默认everysec)</li>\n<li>appendfilename filename     配置AOF持久化文件的名字</li>\n</ul>\n</li>\n<li><p>AOF重写</p>\n<ul>\n<li><p>AOF重写就是对同一数据的若干条命令执行结果转换为最终的结果数据对应的指令进行记录</p>\n</li>\n<li><p>作用</p>\n<ul>\n<li>降低磁盘占用量，提高磁盘利用率</li>\n<li>提高持久化效率，降低持久化写时间，提高IO性能</li>\n<li>降低数据恢复用时，提高数据恢复效率</li>\n</ul>\n</li>\n<li><p>重写方式</p>\n<ul>\n<li>手动重写      bgrewriteaof</li>\n<li>自动重写         <ul>\n<li>auto-aof-rewrite-min-size size  </li>\n<li>auto-aof-rewrite-percentage percentage</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体(一个队列), 当执行时，一次性按照添加顺序依次执行，中间不会被打断</li>\n<li>基本操作<ul>\n<li>开启事务     multi   (设置指令开启位置，此指令后续的所有指令均加入到事务中)</li>\n<li>执行事务  exec     (设置事务的结束位置，同时执行事务， 与multi成对出现)</li>\n<li>取消事务  discard (终止当前事务的定义，发生在multi之后，exec之前)</li>\n<li>注意: 加入到事务的命令暂时进入到任务队列中， 并没有立即执行，只有执行了exec命令才开始执行</li>\n<li>注意: 在添加事务的过程中如果出现语法错误，整体事务中的所有命令均不会执行</li>\n<li>注意: 在添加事务的过程中如果出现无法执行的操作，事务中能正确运行的指令会执行，错误的命令不会被执行</li>\n<li>注意: 已经执行完毕的命令对应的数据不会自动回滚，需要在代码中实现回滚</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li><p>监视锁</p>\n<ul>\n<li>添加监视锁     watch key1 [key2…]   (在执行exec之前如果watch的key发生了变化，事务会被终止执行)</li>\n<li>取消监视锁    unwatch<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端1</span><br><span class=\"line\">set name 123</span><br><span class=\"line\">watch name</span><br><span class=\"line\">multi</span><br><span class=\"line\">set aaa bb</span><br><span class=\"line\">get aaa</span><br><span class=\"line\">exec</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端2 (客户端2在客户端1执行exec之前修改了被监视的name值，事务会被取消执行)</span><br><span class=\"line\">set name 234</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>分布式锁</p>\n<ul>\n<li>设置分布式锁        setnx lock-key value  (setnx在key有值时设置失败，无值时设置成功)</li>\n<li>取消锁            del lock-key</li>\n<li>设置锁的超时时间 expire lock-key second<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set num 123</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改num值之前先获取锁</span><br><span class=\"line\">setnx lock-num 1</span><br><span class=\"line\"># 给锁设置超时时间</span><br><span class=\"line\">expire lock-num 20</span><br><span class=\"line\"></span><br><span class=\"line\">set num 234</span><br><span class=\"line\"># 取消锁</span><br><span class=\"line\">del lock-num</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h2><ul>\n<li><p>过期数据</p>\n<ul>\n<li>Redis是一种内存级数据库，所有的数据存放在内存中，内存中的数据可以通过TTL指令获取其状态<ul>\n<li>TTL为正数: 具有时效性的数据</li>\n<li>TTL = -1 : 永久有效的数据</li>\n<li>TTL = -2 : 已经过期的数据 或者 被删除的数据 或者 未定义的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据删除策略(在内存占用和CPU占用达到平衡)</p>\n<ul>\n<li>定时删除<ul>\n<li>创建一个定时器，当key设置有过期时间时，当到达过期时间执行对键的删除操作</li>\n<li>优点: 节约内存，快速释放掉不必要的内存占用</li>\n<li>缺点: CPU压力很大，可能会影响redis服务器响应时间和指令吞吐量</li>\n</ul>\n</li>\n<li>惰性删除<ul>\n<li>数据到达过期时间时， 不作处理，等下次访问该数据时<ul>\n<li>如果未过期，返回数据</li>\n<li>如果过期了，删除数据，返回不存在</li>\n</ul>\n</li>\n<li>优点: 节约CPU性能</li>\n<li>缺点: 内存压力很大,可能有些无用内存会长期占用</li>\n</ul>\n</li>\n<li>定期删除<ul>\n<li>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</li>\n<li>周期性抽查存储空间(随机抽查 重点抽查)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>逐出算法</p>\n<ul>\n<li><p>redis添加数据的时候如果内存不满足要求，redis会临时删除一些数据为当前指令清理存储空间, 清理数据的策略称为逐出算法</p>\n</li>\n<li><p>数据逐出的相关配置</p>\n<ul>\n<li>最大可使用内存            maxmemory  (占用物理内存的比例， 默认为0，表示不限制, 通常设置在50%以上)</li>\n<li>每次选取待删除数据个数     maxmemory-samples</li>\n<li>删除策略                     maxmemory-policy (达到最大内存后对挑出的数据进行删除的策略)<ul>\n<li>检测易失数据(可能会过期的数据集)<ul>\n<li>volatile-lru         挑选最近没有使用的数据淘汰</li>\n<li>volatile-lfu      挑选最近使用次数最少的数据淘汰</li>\n<li>volatile-ttl         挑选将要过期的数据淘汰</li>\n<li>volatile-random     任意选择数据淘汰</li>\n</ul>\n</li>\n<li>检测全库数据<ul>\n<li>allkeys-lru        挑选最近没有使用的数据淘汰</li>\n<li>allkeys-lfu        挑选使用次数最少的数据淘汰</li>\n<li>allkeys-random     任意选择数据淘汰</li>\n</ul>\n</li>\n<li>不删除<ul>\n<li>noeviction</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"高级数据类型\"><a href=\"#高级数据类型\" class=\"headerlink\" title=\"高级数据类型\"></a>高级数据类型</h2><ul>\n<li><p>Bitmaps</p>\n<ul>\n<li>获取指定key对应偏移量上的bit值     getbit key offset</li>\n<li>设置指定key对应偏移量上的bit值    setbit key offset value</li>\n<li>对指定key按位进行并、交、非、异或操作并将结果保存到destKey中<br>  bitop op desKey key1 [key2…]<pre><code>  * and     交\n  * or     并\n  * not   非\n  * xor   异或\n</code></pre>\n</li>\n<li>统计key中1的数量<br>  bitcount key [start end]</li>\n</ul>\n</li>\n<li><p>HyperLogLog</p>\n<ul>\n<li><p>统计不重复数据的数量</p>\n</li>\n<li><p>基数: 数据集去重后的元素个数</p>\n</li>\n<li><p>HyperLogLog是用来做基数统计的</p>\n</li>\n<li><p>基本操作</p>\n<ul>\n<li>添加数据     pfadd key element [element…]</li>\n<li>统计数据  pfcount key [key…]</li>\n<li>合并数据  pfmerge destkey sourcekey [sourcekey…]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>GEO</p>\n<ul>\n<li>添加坐标点<br>  geoadd key longitude latitude member [longitude latitude member …]</li>\n<li>获取坐标点<br>  geopos key member [member…]</li>\n<li>计算坐标点的记录<br>  geodist key member1 member2 [unit]</li>\n<li>根据坐标求范围内的数据<br>  georadius key longitude latitude radius </li>\n<li>根据点求范围内的数据<br>  georadiusbymember key member radius</li>\n<li>获取指定点对应的坐标hash值<br>  geohash key member</li>\n</ul>\n</li>\n</ul>\n"},{"title":"音视频协议","_content":"## RTP\n\n* RTP(Real-time Transport Protocol)，实时传输协议。\n\n## RTCP\n\n* RTCP(Real-time Transport Control Protocol)，实时传输控制协议。\n\n## RTSP\n\n* RTSP(Real Time Streaming Protocol)，实时流协议。\n\n## RTMP\n\n* RTMP(Real Time Messaging Protocol)，实时消息传输协议。\n\n## HLS\n\n* HLS(HTTP Live Streaming)，苹果公司提出的基于HTTP的流媒体网络传输协议。1\n\n## HTTP-FLV\n\n* HTTP-FLV，将RTMP等负载信息携带在HTTP协议之上的码流传输协议。\n\n","source":"_posts/av/live_protocol.md","raw":"---\ntitle: 音视频协议 \ncategories: \n- av\n---\n## RTP\n\n* RTP(Real-time Transport Protocol)，实时传输协议。\n\n## RTCP\n\n* RTCP(Real-time Transport Control Protocol)，实时传输控制协议。\n\n## RTSP\n\n* RTSP(Real Time Streaming Protocol)，实时流协议。\n\n## RTMP\n\n* RTMP(Real Time Messaging Protocol)，实时消息传输协议。\n\n## HLS\n\n* HLS(HTTP Live Streaming)，苹果公司提出的基于HTTP的流媒体网络传输协议。1\n\n## HTTP-FLV\n\n* HTTP-FLV，将RTMP等负载信息携带在HTTP协议之上的码流传输协议。\n\n","slug":"av/live_protocol","published":1,"date":"2022-05-31T09:53:07.354Z","updated":"2022-05-31T09:53:07.354Z","_id":"cl3tyb7uo0006gewz50wkclwx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"RTP\"><a href=\"#RTP\" class=\"headerlink\" title=\"RTP\"></a>RTP</h2><ul>\n<li>RTP(Real-time Transport Protocol)，实时传输协议。</li>\n</ul>\n<h2 id=\"RTCP\"><a href=\"#RTCP\" class=\"headerlink\" title=\"RTCP\"></a>RTCP</h2><ul>\n<li>RTCP(Real-time Transport Control Protocol)，实时传输控制协议。</li>\n</ul>\n<h2 id=\"RTSP\"><a href=\"#RTSP\" class=\"headerlink\" title=\"RTSP\"></a>RTSP</h2><ul>\n<li>RTSP(Real Time Streaming Protocol)，实时流协议。</li>\n</ul>\n<h2 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h2><ul>\n<li>RTMP(Real Time Messaging Protocol)，实时消息传输协议。</li>\n</ul>\n<h2 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h2><ul>\n<li>HLS(HTTP Live Streaming)，苹果公司提出的基于HTTP的流媒体网络传输协议。1</li>\n</ul>\n<h2 id=\"HTTP-FLV\"><a href=\"#HTTP-FLV\" class=\"headerlink\" title=\"HTTP-FLV\"></a>HTTP-FLV</h2><ul>\n<li>HTTP-FLV，将RTMP等负载信息携带在HTTP协议之上的码流传输协议。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RTP\"><a href=\"#RTP\" class=\"headerlink\" title=\"RTP\"></a>RTP</h2><ul>\n<li>RTP(Real-time Transport Protocol)，实时传输协议。</li>\n</ul>\n<h2 id=\"RTCP\"><a href=\"#RTCP\" class=\"headerlink\" title=\"RTCP\"></a>RTCP</h2><ul>\n<li>RTCP(Real-time Transport Control Protocol)，实时传输控制协议。</li>\n</ul>\n<h2 id=\"RTSP\"><a href=\"#RTSP\" class=\"headerlink\" title=\"RTSP\"></a>RTSP</h2><ul>\n<li>RTSP(Real Time Streaming Protocol)，实时流协议。</li>\n</ul>\n<h2 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h2><ul>\n<li>RTMP(Real Time Messaging Protocol)，实时消息传输协议。</li>\n</ul>\n<h2 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h2><ul>\n<li>HLS(HTTP Live Streaming)，苹果公司提出的基于HTTP的流媒体网络传输协议。1</li>\n</ul>\n<h2 id=\"HTTP-FLV\"><a href=\"#HTTP-FLV\" class=\"headerlink\" title=\"HTTP-FLV\"></a>HTTP-FLV</h2><ul>\n<li>HTTP-FLV，将RTMP等负载信息携带在HTTP协议之上的码流传输协议。</li>\n</ul>\n"},{"title":"音视频服务器","_content":"## nginx-rtmp部署\n\n* 下载nginx 和 nginx-rtmp-module\n\t```\n\thttps://nginx.org/en/download.html\n\thttps://github.com/arut/nginx-rtmp-module.git\n\t```\n\n* 解压压缩包\n\t``` bash\n\ttar xvf nginx-1.20.2.tar.gz\n\tunzip nginx-rtmp-module-master.zip\n\t```\n\n* 创建build目录\n\t``` bash\n\tcd nginx-1.20.2\n\tmkdir build\n\t```\n* config & make & make install\n\t``` bash\n\t./configure --prefix=/home/lijiahao/code/av/nginx-1.20.2/build --add-module=/home/lijiahao/code/av/nginx-rtmp-module-master\n\tmake\n\tmake install\n\t```\n\n* config过程中错误及错误处理\n\t``` bash\n\terror : ./configure: error: the HTTP rewrite module requires the PCRE library.\n\terror :./configure: error: SSL modules require the OpenSSL library.\n\terror :./configure: error: the HTTP gzip module requires the zlib library.\n\n\tsudo apt-get update\n\tsudo apt-get install libpcre3 libpcre3-dev\n\tsudo apt-get install openssl libssl-dev\n\tsudo apt-get install zlib1g-dev\n\t```\n\n* 添加rtmp配置：`/home/lijiahao/code/av/nginx-1.20.2/build/conf/nginx.conf`\n\t``` \n\trtmp {\n\t\tserver {\n\t\t\tlisten 1935;\n\t\t\tchunk_size 4096;\n\n\t\t\t# live on (用于直播)\n\t\t\tapplication rtmp_live {\n\t\t\t\tlive on;\n\t\t\t\t# hls on; #这个参数把直播服务器改造成实时回放服务器。\n\t\t\t\t# wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。\n\t\t\t\t# hls_path ./sbin/html; #切片视频文件存放位置。\n\t\t\t\t# hls_fragment 10s;     #每个视频切片的时长。\n\t\t\t\t# hls_playlist_length 60s;  #总共可以回看的时间，这里设置的是1分钟。\n\t\t\t\t# hls_continuous on; #连续模式。\n\t\t\t\t# hls_cleanup on;    #对多余的切片进行删除。\n\t\t\t\t# hls_nested on;     #嵌套模式。\n\t\t\t}\n\n\t\t\t# play videos (用于点播)\n\t\t\tapplication rtmp_play{\n\t\t\t\tplay ./videos;  #build directory\n\t\t\t}\n\t\t}\n\t}\n\t```\n\n* 启动 nginx\n\t``` bash\n\t~/code/av/nginx-1.20.2/build$ sudo ./sbin/nginx\n\t```\n\n* ffmpeg推流\n\t``` bash\n\tffmpeg -i demo.flv -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmp_live/mystream\n\t```\n\n\n* VLC拉流（直播、点播）\n\t``` \n\t直播：rtmp://localhost:1935/rtmp_live/mystream\n\t点播：rtmp://localhost:1935/rtmp_play/demo.flv\n\t```\n\n## srs部署\n\n* build srs from srouce\n\t``` bash\n\tgit clone -b develop https://gitee.com/ossrs/srs.git \n\tcd srs/trunk \n\t./configure \n\tmake \n\t./objs/srs -c conf/srs.conf\n\t```\n\n* 添加配置文件`conf/my_hls.conf`\n\t``` \n\tlisten              1935;\n\tmax_connections     1000;\n\tdaemon              on;\n\tsrs_log_tank        file;\n\tsrs_log_level        error;\n\tsrs_log_file        ./objs/srs.log;\n\n\thttp_server {\n\t\tenabled         on;\n\t\tlisten          8081;\n\t\tdir             ./objs/nginx/html;\n\t}\n\n\tvhost __defaultVhost__ {\n\t\thls {\n\t\t\tenabled         on;\n\t\t\thls_fragment    10;\n\t\t\thls_window      60;\n\t\t\thls_path        ./objs/nginx/html;\n\t\t\thls_m3u8_file   [app]/[stream].m3u8;\n\t\t\thls_ts_file     [app]/[stream]-[seq].ts;\n\t\t\thls_cleanup     on;\n\t\t\thls_dispose     30;\n\t\t\thls_on_error    continue;\n\t\t\thls_storage     disk;\n\t\t\thls_wait_keyframe       on;\n\t\t\thls_acodec      aac;\n\t\t\thls_vcodec      h264;\n\t\t}\n\t}\n\t```\n\n* 启动srs\n\t``` bash\n\t./objs/srs -c conf/my_hls.conf\n\t```\n\n* ffmpeg推流\n\t``` bash\n\tffmpeg -re -i demo.flv -c copy -f flv -y rtmp://localhost/live/livestream\n\t```\n\n* 生成的 m3u8 和 ts 文件路径\n\t``` \n\t/home/lijiahao/code/av/srs/trunk/objs/nginx/html/live\n\t```\n\n* VLC拉流（rtmp、http）\n\t```\n\trtmp://localhost:1935/live/livestream\n\thttp://localhost:8081/live/livestream.m3u8\n\t```\n\n## live555部署\n\n* 下载live555源码\n\t``` \n\thttp://www.live555.com/liveMedia/public/\n\t```\n\n\n* 解压\n\t``` bash\n\ttar vxf live.2021.08.24.tar.gz\n\tcd live\n\t```\n\n* 编译\n\t``` bash\n\t./genMakefiles linux-64bit\n\tmake\n\t```\n\n* 启动live555\n\t``` bash\n\tcd mediaServer\n\tsudo ./live555MediaServer\n\t```\n\n\n* 上传视频\n\t``` \n\t将test.mkv上传至 live/mediaServer目录下\n\t```\n\n* 播放\n\t``` \n\t拷贝 live555 生成的 url 地址\n\tvlc拉流：rtsp://192.168.80.128/<filename>\n\t```\n\n","source":"_posts/av/live_server.md","raw":"---\ntitle: 音视频服务器 \ncategories: \n- av\n---\n## nginx-rtmp部署\n\n* 下载nginx 和 nginx-rtmp-module\n\t```\n\thttps://nginx.org/en/download.html\n\thttps://github.com/arut/nginx-rtmp-module.git\n\t```\n\n* 解压压缩包\n\t``` bash\n\ttar xvf nginx-1.20.2.tar.gz\n\tunzip nginx-rtmp-module-master.zip\n\t```\n\n* 创建build目录\n\t``` bash\n\tcd nginx-1.20.2\n\tmkdir build\n\t```\n* config & make & make install\n\t``` bash\n\t./configure --prefix=/home/lijiahao/code/av/nginx-1.20.2/build --add-module=/home/lijiahao/code/av/nginx-rtmp-module-master\n\tmake\n\tmake install\n\t```\n\n* config过程中错误及错误处理\n\t``` bash\n\terror : ./configure: error: the HTTP rewrite module requires the PCRE library.\n\terror :./configure: error: SSL modules require the OpenSSL library.\n\terror :./configure: error: the HTTP gzip module requires the zlib library.\n\n\tsudo apt-get update\n\tsudo apt-get install libpcre3 libpcre3-dev\n\tsudo apt-get install openssl libssl-dev\n\tsudo apt-get install zlib1g-dev\n\t```\n\n* 添加rtmp配置：`/home/lijiahao/code/av/nginx-1.20.2/build/conf/nginx.conf`\n\t``` \n\trtmp {\n\t\tserver {\n\t\t\tlisten 1935;\n\t\t\tchunk_size 4096;\n\n\t\t\t# live on (用于直播)\n\t\t\tapplication rtmp_live {\n\t\t\t\tlive on;\n\t\t\t\t# hls on; #这个参数把直播服务器改造成实时回放服务器。\n\t\t\t\t# wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。\n\t\t\t\t# hls_path ./sbin/html; #切片视频文件存放位置。\n\t\t\t\t# hls_fragment 10s;     #每个视频切片的时长。\n\t\t\t\t# hls_playlist_length 60s;  #总共可以回看的时间，这里设置的是1分钟。\n\t\t\t\t# hls_continuous on; #连续模式。\n\t\t\t\t# hls_cleanup on;    #对多余的切片进行删除。\n\t\t\t\t# hls_nested on;     #嵌套模式。\n\t\t\t}\n\n\t\t\t# play videos (用于点播)\n\t\t\tapplication rtmp_play{\n\t\t\t\tplay ./videos;  #build directory\n\t\t\t}\n\t\t}\n\t}\n\t```\n\n* 启动 nginx\n\t``` bash\n\t~/code/av/nginx-1.20.2/build$ sudo ./sbin/nginx\n\t```\n\n* ffmpeg推流\n\t``` bash\n\tffmpeg -i demo.flv -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmp_live/mystream\n\t```\n\n\n* VLC拉流（直播、点播）\n\t``` \n\t直播：rtmp://localhost:1935/rtmp_live/mystream\n\t点播：rtmp://localhost:1935/rtmp_play/demo.flv\n\t```\n\n## srs部署\n\n* build srs from srouce\n\t``` bash\n\tgit clone -b develop https://gitee.com/ossrs/srs.git \n\tcd srs/trunk \n\t./configure \n\tmake \n\t./objs/srs -c conf/srs.conf\n\t```\n\n* 添加配置文件`conf/my_hls.conf`\n\t``` \n\tlisten              1935;\n\tmax_connections     1000;\n\tdaemon              on;\n\tsrs_log_tank        file;\n\tsrs_log_level        error;\n\tsrs_log_file        ./objs/srs.log;\n\n\thttp_server {\n\t\tenabled         on;\n\t\tlisten          8081;\n\t\tdir             ./objs/nginx/html;\n\t}\n\n\tvhost __defaultVhost__ {\n\t\thls {\n\t\t\tenabled         on;\n\t\t\thls_fragment    10;\n\t\t\thls_window      60;\n\t\t\thls_path        ./objs/nginx/html;\n\t\t\thls_m3u8_file   [app]/[stream].m3u8;\n\t\t\thls_ts_file     [app]/[stream]-[seq].ts;\n\t\t\thls_cleanup     on;\n\t\t\thls_dispose     30;\n\t\t\thls_on_error    continue;\n\t\t\thls_storage     disk;\n\t\t\thls_wait_keyframe       on;\n\t\t\thls_acodec      aac;\n\t\t\thls_vcodec      h264;\n\t\t}\n\t}\n\t```\n\n* 启动srs\n\t``` bash\n\t./objs/srs -c conf/my_hls.conf\n\t```\n\n* ffmpeg推流\n\t``` bash\n\tffmpeg -re -i demo.flv -c copy -f flv -y rtmp://localhost/live/livestream\n\t```\n\n* 生成的 m3u8 和 ts 文件路径\n\t``` \n\t/home/lijiahao/code/av/srs/trunk/objs/nginx/html/live\n\t```\n\n* VLC拉流（rtmp、http）\n\t```\n\trtmp://localhost:1935/live/livestream\n\thttp://localhost:8081/live/livestream.m3u8\n\t```\n\n## live555部署\n\n* 下载live555源码\n\t``` \n\thttp://www.live555.com/liveMedia/public/\n\t```\n\n\n* 解压\n\t``` bash\n\ttar vxf live.2021.08.24.tar.gz\n\tcd live\n\t```\n\n* 编译\n\t``` bash\n\t./genMakefiles linux-64bit\n\tmake\n\t```\n\n* 启动live555\n\t``` bash\n\tcd mediaServer\n\tsudo ./live555MediaServer\n\t```\n\n\n* 上传视频\n\t``` \n\t将test.mkv上传至 live/mediaServer目录下\n\t```\n\n* 播放\n\t``` \n\t拷贝 live555 生成的 url 地址\n\tvlc拉流：rtsp://192.168.80.128/<filename>\n\t```\n\n","slug":"av/live_server","published":1,"date":"2022-05-31T09:52:51.310Z","updated":"2022-05-31T09:52:51.310Z","_id":"cl3tyb7uq0007gewzdlzn2kow","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"nginx-rtmp部署\"><a href=\"#nginx-rtmp部署\" class=\"headerlink\" title=\"nginx-rtmp部署\"></a>nginx-rtmp部署</h2><ul>\n<li><p>下载nginx 和 nginx-rtmp-module</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://nginx.org/en/download.html</span><br><span class=\"line\">https://github.com/arut/nginx-rtmp-module.git</span><br></pre></td></tr></table></figure></li>\n<li><p>解压压缩包</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf nginx-1.20.2.tar.gz</span><br><span class=\"line\">unzip nginx-rtmp-module-master.zip</span><br></pre></td></tr></table></figure></li>\n<li><p>创建build目录</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.20.2</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br></pre></td></tr></table></figure></li>\n<li><p>config &amp; make &amp; make install</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/home/lijiahao/code/av/nginx-1.20.2/build --add-module=/home/lijiahao/code/av/nginx-rtmp-module-master</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>config过程中错误及错误处理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error : ./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class=\"line\">error :./configure: error: SSL modules require the OpenSSL library.</span><br><span class=\"line\">error :./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class=\"line\">sudo apt-get install openssl libssl-dev</span><br><span class=\"line\">sudo apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>添加rtmp配置：<code>/home/lijiahao/code/av/nginx-1.20.2/build/conf/nginx.conf</code></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">\t\tlisten 1935;</span><br><span class=\"line\">\t\tchunk_size 4096;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t# live on (用于直播)</span><br><span class=\"line\">\t\tapplication rtmp_live &#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\t# hls on; #这个参数把直播服务器改造成实时回放服务器。</span><br><span class=\"line\">\t\t\t# wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。</span><br><span class=\"line\">\t\t\t# hls_path ./sbin/html; #切片视频文件存放位置。</span><br><span class=\"line\">\t\t\t# hls_fragment 10s;     #每个视频切片的时长。</span><br><span class=\"line\">\t\t\t# hls_playlist_length 60s;  #总共可以回看的时间，这里设置的是1分钟。</span><br><span class=\"line\">\t\t\t# hls_continuous on; #连续模式。</span><br><span class=\"line\">\t\t\t# hls_cleanup on;    #对多余的切片进行删除。</span><br><span class=\"line\">\t\t\t# hls_nested on;     #嵌套模式。</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t# play videos (用于点播)</span><br><span class=\"line\">\t\tapplication rtmp_play&#123;</span><br><span class=\"line\">\t\t\tplay ./videos;  #build directory</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 nginx</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/code/av/nginx-1.20.2/build$ sudo ./sbin/nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>ffmpeg推流</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i demo.flv -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmp_live/mystream</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>VLC拉流（直播、点播）  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直播：rtmp://localhost:1935/rtmp_live/mystream</span><br><span class=\"line\">点播：rtmp://localhost:1935/rtmp_play/demo.flv</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"srs部署\"><a href=\"#srs部署\" class=\"headerlink\" title=\"srs部署\"></a>srs部署</h2><ul>\n<li><p>build srs from srouce</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b develop https://gitee.com/ossrs/srs.git </span><br><span class=\"line\"><span class=\"built_in\">cd</span> srs/trunk </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make </span><br><span class=\"line\">./objs/srs -c conf/srs.conf</span><br></pre></td></tr></table></figure></li>\n<li><p>添加配置文件<code>conf/my_hls.conf</code></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen              1935;</span><br><span class=\"line\">max_connections     1000;</span><br><span class=\"line\">daemon              on;</span><br><span class=\"line\">srs_log_tank        file;</span><br><span class=\"line\">srs_log_level        error;</span><br><span class=\"line\">srs_log_file        ./objs/srs.log;</span><br><span class=\"line\"></span><br><span class=\"line\">http_server &#123;</span><br><span class=\"line\">\tenabled         on;</span><br><span class=\"line\">\tlisten          8081;</span><br><span class=\"line\">\tdir             ./objs/nginx/html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vhost __defaultVhost__ &#123;</span><br><span class=\"line\">\thls &#123;</span><br><span class=\"line\">\t\tenabled         on;</span><br><span class=\"line\">\t\thls_fragment    10;</span><br><span class=\"line\">\t\thls_window      60;</span><br><span class=\"line\">\t\thls_path        ./objs/nginx/html;</span><br><span class=\"line\">\t\thls_m3u8_file   [app]/[stream].m3u8;</span><br><span class=\"line\">\t\thls_ts_file     [app]/[stream]-[seq].ts;</span><br><span class=\"line\">\t\thls_cleanup     on;</span><br><span class=\"line\">\t\thls_dispose     30;</span><br><span class=\"line\">\t\thls_on_error    continue;</span><br><span class=\"line\">\t\thls_storage     disk;</span><br><span class=\"line\">\t\thls_wait_keyframe       on;</span><br><span class=\"line\">\t\thls_acodec      aac;</span><br><span class=\"line\">\t\thls_vcodec      h264;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动srs</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./objs/srs -c conf/my_hls.conf</span><br></pre></td></tr></table></figure></li>\n<li><p>ffmpeg推流</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i demo.flv -c copy -f flv -y rtmp://localhost/live/livestream</span><br></pre></td></tr></table></figure></li>\n<li><p>生成的 m3u8 和 ts 文件路径</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/lijiahao/code/av/srs/trunk/objs/nginx/html/live</span><br></pre></td></tr></table></figure></li>\n<li><p>VLC拉流（rtmp、http）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp://localhost:1935/live/livestream</span><br><span class=\"line\">http://localhost:8081/live/livestream.m3u8</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"live555部署\"><a href=\"#live555部署\" class=\"headerlink\" title=\"live555部署\"></a>live555部署</h2><ul>\n<li>下载live555源码  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.live555.com/liveMedia/public/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>解压</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar vxf live.2021.08.24.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> live</span><br></pre></td></tr></table></figure></li>\n<li><p>编译</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./genMakefiles linux-64bit</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure></li>\n<li><p>启动live555</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mediaServer</span><br><span class=\"line\">sudo ./live555MediaServer</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>上传视频</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将test.mkv上传至 live/mediaServer目录下</span><br></pre></td></tr></table></figure></li>\n<li><p>播放</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拷贝 live555 生成的 url 地址</span><br><span class=\"line\">vlc拉流：rtsp://192.168.80.128/&lt;filename&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"nginx-rtmp部署\"><a href=\"#nginx-rtmp部署\" class=\"headerlink\" title=\"nginx-rtmp部署\"></a>nginx-rtmp部署</h2><ul>\n<li><p>下载nginx 和 nginx-rtmp-module</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://nginx.org/en/download.html</span><br><span class=\"line\">https://github.com/arut/nginx-rtmp-module.git</span><br></pre></td></tr></table></figure></li>\n<li><p>解压压缩包</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf nginx-1.20.2.tar.gz</span><br><span class=\"line\">unzip nginx-rtmp-module-master.zip</span><br></pre></td></tr></table></figure></li>\n<li><p>创建build目录</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.20.2</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br></pre></td></tr></table></figure></li>\n<li><p>config &amp; make &amp; make install</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/home/lijiahao/code/av/nginx-1.20.2/build --add-module=/home/lijiahao/code/av/nginx-rtmp-module-master</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>config过程中错误及错误处理</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error : ./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class=\"line\">error :./configure: error: SSL modules require the OpenSSL library.</span><br><span class=\"line\">error :./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class=\"line\">sudo apt-get install openssl libssl-dev</span><br><span class=\"line\">sudo apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>添加rtmp配置：<code>/home/lijiahao/code/av/nginx-1.20.2/build/conf/nginx.conf</code></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">\t\tlisten 1935;</span><br><span class=\"line\">\t\tchunk_size 4096;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t# live on (用于直播)</span><br><span class=\"line\">\t\tapplication rtmp_live &#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\t# hls on; #这个参数把直播服务器改造成实时回放服务器。</span><br><span class=\"line\">\t\t\t# wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。</span><br><span class=\"line\">\t\t\t# hls_path ./sbin/html; #切片视频文件存放位置。</span><br><span class=\"line\">\t\t\t# hls_fragment 10s;     #每个视频切片的时长。</span><br><span class=\"line\">\t\t\t# hls_playlist_length 60s;  #总共可以回看的时间，这里设置的是1分钟。</span><br><span class=\"line\">\t\t\t# hls_continuous on; #连续模式。</span><br><span class=\"line\">\t\t\t# hls_cleanup on;    #对多余的切片进行删除。</span><br><span class=\"line\">\t\t\t# hls_nested on;     #嵌套模式。</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t# play videos (用于点播)</span><br><span class=\"line\">\t\tapplication rtmp_play&#123;</span><br><span class=\"line\">\t\t\tplay ./videos;  #build directory</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 nginx</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/code/av/nginx-1.20.2/build$ sudo ./sbin/nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>ffmpeg推流</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i demo.flv -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmp_live/mystream</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>VLC拉流（直播、点播）  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直播：rtmp://localhost:1935/rtmp_live/mystream</span><br><span class=\"line\">点播：rtmp://localhost:1935/rtmp_play/demo.flv</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"srs部署\"><a href=\"#srs部署\" class=\"headerlink\" title=\"srs部署\"></a>srs部署</h2><ul>\n<li><p>build srs from srouce</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b develop https://gitee.com/ossrs/srs.git </span><br><span class=\"line\"><span class=\"built_in\">cd</span> srs/trunk </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make </span><br><span class=\"line\">./objs/srs -c conf/srs.conf</span><br></pre></td></tr></table></figure></li>\n<li><p>添加配置文件<code>conf/my_hls.conf</code></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen              1935;</span><br><span class=\"line\">max_connections     1000;</span><br><span class=\"line\">daemon              on;</span><br><span class=\"line\">srs_log_tank        file;</span><br><span class=\"line\">srs_log_level        error;</span><br><span class=\"line\">srs_log_file        ./objs/srs.log;</span><br><span class=\"line\"></span><br><span class=\"line\">http_server &#123;</span><br><span class=\"line\">\tenabled         on;</span><br><span class=\"line\">\tlisten          8081;</span><br><span class=\"line\">\tdir             ./objs/nginx/html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vhost __defaultVhost__ &#123;</span><br><span class=\"line\">\thls &#123;</span><br><span class=\"line\">\t\tenabled         on;</span><br><span class=\"line\">\t\thls_fragment    10;</span><br><span class=\"line\">\t\thls_window      60;</span><br><span class=\"line\">\t\thls_path        ./objs/nginx/html;</span><br><span class=\"line\">\t\thls_m3u8_file   [app]/[stream].m3u8;</span><br><span class=\"line\">\t\thls_ts_file     [app]/[stream]-[seq].ts;</span><br><span class=\"line\">\t\thls_cleanup     on;</span><br><span class=\"line\">\t\thls_dispose     30;</span><br><span class=\"line\">\t\thls_on_error    continue;</span><br><span class=\"line\">\t\thls_storage     disk;</span><br><span class=\"line\">\t\thls_wait_keyframe       on;</span><br><span class=\"line\">\t\thls_acodec      aac;</span><br><span class=\"line\">\t\thls_vcodec      h264;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动srs</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./objs/srs -c conf/my_hls.conf</span><br></pre></td></tr></table></figure></li>\n<li><p>ffmpeg推流</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i demo.flv -c copy -f flv -y rtmp://localhost/live/livestream</span><br></pre></td></tr></table></figure></li>\n<li><p>生成的 m3u8 和 ts 文件路径</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/lijiahao/code/av/srs/trunk/objs/nginx/html/live</span><br></pre></td></tr></table></figure></li>\n<li><p>VLC拉流（rtmp、http）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp://localhost:1935/live/livestream</span><br><span class=\"line\">http://localhost:8081/live/livestream.m3u8</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"live555部署\"><a href=\"#live555部署\" class=\"headerlink\" title=\"live555部署\"></a>live555部署</h2><ul>\n<li>下载live555源码  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.live555.com/liveMedia/public/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>解压</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar vxf live.2021.08.24.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> live</span><br></pre></td></tr></table></figure></li>\n<li><p>编译</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./genMakefiles linux-64bit</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure></li>\n<li><p>启动live555</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mediaServer</span><br><span class=\"line\">sudo ./live555MediaServer</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>上传视频</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将test.mkv上传至 live/mediaServer目录下</span><br></pre></td></tr></table></figure></li>\n<li><p>播放</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拷贝 live555 生成的 url 地址</span><br><span class=\"line\">vlc拉流：rtsp://192.168.80.128/&lt;filename&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"git基础","_content":"\n## git工作机制\n* 工作区---> 代码存放位置\n* 暂存区---> 临时存储 `git add`\n* 本地库---> 历史版本 `git commit`\n* 远程库---> 代码托管中心 `git push`\n\n## git常用命令\n### 基本命令\n* 设置用户签名\n``` bash\ngit config --global user.name 用户名\ngit config --global user.email 邮箱 \n```\n* 初始化本地库\n``` bash\ngit init\n```\n* 查看本地库状态\n``` bash\ngit status\n# 友好的输出格式\ngit status -sb -uno --show-stash\n```\n* 添加暂存区\n``` bash\ngit add 文件名\n```\n* 撤销添加到暂存区的修改\n``` bash\ngit rm --cached 文件名\n```\n* 提交本地库\n``` bash\ngit commit -m \"日志信息\" 文件名\n```\n* 提交暂存区(暂存本地不想提交的修改)\n``` bash\ngit stash\n```\n* 丢弃全部本地修改\n``` bash\ngit checkout -f\n```\n* 查看版本信息\n``` bash\n# 查看精简版版本信息\ngit reflog \n# 查看详细版版本信息\ngit log --oneline --graph\n```\n* 版本穿梭\n``` bash\ngit reset --hard 版本号\n```\n* 给提交贴标签\n``` bash\ngit tag \n```\n\n### 分支相关命令\n* 查看分支\n``` bash\n# 查看具体的提交信息\ngit branch -v\n# 查看远程分支\ngit branch -f\n# 查看本地和远程的所有分支\ngit branch -a\n```\n* 创建分支\n``` bash\ngit branch 分支名\n```\n* 删除分支\n``` bash\ngit branch -d 分支名\n```\n* 切换分支\n``` bash\n# 切换分支\ngit checkout 分支名\n\n# 创建并且换分支\ngit checkout -b 分支名\n```\n* 合并分支\n``` bash\ngit merge 分支名  # 将指定分支与当前分支进行合并\n```\n* 冲突合并\n``` bash\n# 当两个版本均有修改时，版本合并时会产生冲突\n# 首先需要手动进行合并\n# 将修改加入暂存区\ngit add 文件名\n# 提交本地库 注意: 此时提交不能带有文件名，否则会报错\ngit commit -m \"版本信息\"\n```\n\n### 远程库相关操作\n* 为远程库创建别名\n``` bash\n# 查看已经存在的别名\ngit remote -v\n# 为远程库添加别名\ngit remote add 别名 远程库地址\n# eg: \ngit remote add git-demo https://github.com/lijiahaohb/git-demo.git\n```\n\n* 更新远程仓库变更\n``` bash\ngit remote update origin\n# 之后还要将远程仓库的分支merge到本地仓库\ngit merge origin/develop \n```\n\n* 将本地库代码推送到远程库\n``` bash\ngit push 别名 本地分支名:远程分支名 \n# eg:\ngit push git-demo master:master\n```\n\n* 将远程库代码拉取到本地库\n``` bash\ngit pull 别名 远程分支名:本地分支名\n# eg: \ngit pull git-demo master:master\n```\n\n### git分支管理策略\n* master分支: 主干分支，会自动建立\n* release分支: 发布分支，realse分支开始测试之后，不能将develop分支内容合并到release分支\n* develop分支: 日常开发分支，develop分支代码稳定以后，应该合并回master\n* feature分支: 功能分支，为了开发特定功能从develop分支分出，开发完成后需要并入develop分支\n* hotfix分支: 软件修复分支，从master分支分出需要合并回master分支，如果存在待发布的release分支，还需要合并到release分支\n\n### git团队开发实践流程\n1. git add\n2. git commit\n3. git pull\n4. 解决冲突\n5. git push\n\n\n","source":"_posts/tools/git_learning.md","raw":"---\ntitle: git基础 \ncategories: \n- tools\n---\n\n## git工作机制\n* 工作区---> 代码存放位置\n* 暂存区---> 临时存储 `git add`\n* 本地库---> 历史版本 `git commit`\n* 远程库---> 代码托管中心 `git push`\n\n## git常用命令\n### 基本命令\n* 设置用户签名\n``` bash\ngit config --global user.name 用户名\ngit config --global user.email 邮箱 \n```\n* 初始化本地库\n``` bash\ngit init\n```\n* 查看本地库状态\n``` bash\ngit status\n# 友好的输出格式\ngit status -sb -uno --show-stash\n```\n* 添加暂存区\n``` bash\ngit add 文件名\n```\n* 撤销添加到暂存区的修改\n``` bash\ngit rm --cached 文件名\n```\n* 提交本地库\n``` bash\ngit commit -m \"日志信息\" 文件名\n```\n* 提交暂存区(暂存本地不想提交的修改)\n``` bash\ngit stash\n```\n* 丢弃全部本地修改\n``` bash\ngit checkout -f\n```\n* 查看版本信息\n``` bash\n# 查看精简版版本信息\ngit reflog \n# 查看详细版版本信息\ngit log --oneline --graph\n```\n* 版本穿梭\n``` bash\ngit reset --hard 版本号\n```\n* 给提交贴标签\n``` bash\ngit tag \n```\n\n### 分支相关命令\n* 查看分支\n``` bash\n# 查看具体的提交信息\ngit branch -v\n# 查看远程分支\ngit branch -f\n# 查看本地和远程的所有分支\ngit branch -a\n```\n* 创建分支\n``` bash\ngit branch 分支名\n```\n* 删除分支\n``` bash\ngit branch -d 分支名\n```\n* 切换分支\n``` bash\n# 切换分支\ngit checkout 分支名\n\n# 创建并且换分支\ngit checkout -b 分支名\n```\n* 合并分支\n``` bash\ngit merge 分支名  # 将指定分支与当前分支进行合并\n```\n* 冲突合并\n``` bash\n# 当两个版本均有修改时，版本合并时会产生冲突\n# 首先需要手动进行合并\n# 将修改加入暂存区\ngit add 文件名\n# 提交本地库 注意: 此时提交不能带有文件名，否则会报错\ngit commit -m \"版本信息\"\n```\n\n### 远程库相关操作\n* 为远程库创建别名\n``` bash\n# 查看已经存在的别名\ngit remote -v\n# 为远程库添加别名\ngit remote add 别名 远程库地址\n# eg: \ngit remote add git-demo https://github.com/lijiahaohb/git-demo.git\n```\n\n* 更新远程仓库变更\n``` bash\ngit remote update origin\n# 之后还要将远程仓库的分支merge到本地仓库\ngit merge origin/develop \n```\n\n* 将本地库代码推送到远程库\n``` bash\ngit push 别名 本地分支名:远程分支名 \n# eg:\ngit push git-demo master:master\n```\n\n* 将远程库代码拉取到本地库\n``` bash\ngit pull 别名 远程分支名:本地分支名\n# eg: \ngit pull git-demo master:master\n```\n\n### git分支管理策略\n* master分支: 主干分支，会自动建立\n* release分支: 发布分支，realse分支开始测试之后，不能将develop分支内容合并到release分支\n* develop分支: 日常开发分支，develop分支代码稳定以后，应该合并回master\n* feature分支: 功能分支，为了开发特定功能从develop分支分出，开发完成后需要并入develop分支\n* hotfix分支: 软件修复分支，从master分支分出需要合并回master分支，如果存在待发布的release分支，还需要合并到release分支\n\n### git团队开发实践流程\n1. git add\n2. git commit\n3. git pull\n4. 解决冲突\n5. git push\n\n\n","slug":"tools/git_learning","published":1,"date":"2022-07-10T14:47:09.927Z","updated":"2022-07-10T14:47:09.927Z","_id":"cl3tyev590009gewz054f6x2w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"git工作机制\"><a href=\"#git工作机制\" class=\"headerlink\" title=\"git工作机制\"></a>git工作机制</h2><ul>\n<li>工作区—&gt; 代码存放位置</li>\n<li>暂存区—&gt; 临时存储 <code>git add</code></li>\n<li>本地库—&gt; 历史版本 <code>git commit</code></li>\n<li>远程库—&gt; 代码托管中心 <code>git push</code></li>\n</ul>\n<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ul>\n<li>设置用户签名<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 用户名</span><br><span class=\"line\">git config --global user.email 邮箱 </span><br></pre></td></tr></table></figure></li>\n<li>初始化本地库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></li>\n<li>查看本地库状态<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 友好的输出格式</span></span><br><span class=\"line\">git status -sb -uno --show-stash</span><br></pre></td></tr></table></figure></li>\n<li>添加暂存区<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br></pre></td></tr></table></figure></li>\n<li>撤销添加到暂存区的修改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cached 文件名</span><br></pre></td></tr></table></figure></li>\n<li>提交本地库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;日志信息&quot;</span> 文件名</span><br></pre></td></tr></table></figure></li>\n<li>提交暂存区(暂存本地不想提交的修改)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure></li>\n<li>丢弃全部本地修改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -f</span><br></pre></td></tr></table></figure></li>\n<li>查看版本信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看精简版版本信息</span></span><br><span class=\"line\">git reflog </span><br><span class=\"line\"><span class=\"comment\"># 查看详细版版本信息</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline --graph</span><br></pre></td></tr></table></figure></li>\n<li>版本穿梭<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li>\n<li>给提交贴标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"分支相关命令\"><a href=\"#分支相关命令\" class=\"headerlink\" title=\"分支相关命令\"></a>分支相关命令</h3><ul>\n<li>查看分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看具体的提交信息</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">git branch -f</span><br><span class=\"line\"><span class=\"comment\"># 查看本地和远程的所有分支</span></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></li>\n<li>创建分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure></li>\n<li>删除分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure></li>\n<li>切换分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建并且换分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br></pre></td></tr></table></figure></li>\n<li>合并分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge 分支名  <span class=\"comment\"># 将指定分支与当前分支进行合并</span></span><br></pre></td></tr></table></figure></li>\n<li>冲突合并<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当两个版本均有修改时，版本合并时会产生冲突</span></span><br><span class=\"line\"><span class=\"comment\"># 首先需要手动进行合并</span></span><br><span class=\"line\"><span class=\"comment\"># 将修改加入暂存区</span></span><br><span class=\"line\">git add 文件名</span><br><span class=\"line\"><span class=\"comment\"># 提交本地库 注意: 此时提交不能带有文件名，否则会报错</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;版本信息&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"远程库相关操作\"><a href=\"#远程库相关操作\" class=\"headerlink\" title=\"远程库相关操作\"></a>远程库相关操作</h3><ul>\n<li><p>为远程库创建别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已经存在的别名</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 为远程库添加别名</span></span><br><span class=\"line\">git remote add 别名 远程库地址</span><br><span class=\"line\"><span class=\"comment\"># eg: </span></span><br><span class=\"line\">git remote add git-demo https://github.com/lijiahaohb/git-demo.git</span><br></pre></td></tr></table></figure></li>\n<li><p>更新远程仓库变更</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote update origin</span><br><span class=\"line\"><span class=\"comment\"># 之后还要将远程仓库的分支merge到本地仓库</span></span><br><span class=\"line\">git merge origin/develop </span><br></pre></td></tr></table></figure></li>\n<li><p>将本地库代码推送到远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push 别名 本地分支名:远程分支名 </span><br><span class=\"line\"><span class=\"comment\"># eg:</span></span><br><span class=\"line\">git push git-demo master:master</span><br></pre></td></tr></table></figure></li>\n<li><p>将远程库代码拉取到本地库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 别名 远程分支名:本地分支名</span><br><span class=\"line\"><span class=\"comment\"># eg: </span></span><br><span class=\"line\">git pull git-demo master:master</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git分支管理策略\"><a href=\"#git分支管理策略\" class=\"headerlink\" title=\"git分支管理策略\"></a>git分支管理策略</h3><ul>\n<li>master分支: 主干分支，会自动建立</li>\n<li>release分支: 发布分支，realse分支开始测试之后，不能将develop分支内容合并到release分支</li>\n<li>develop分支: 日常开发分支，develop分支代码稳定以后，应该合并回master</li>\n<li>feature分支: 功能分支，为了开发特定功能从develop分支分出，开发完成后需要并入develop分支</li>\n<li>hotfix分支: 软件修复分支，从master分支分出需要合并回master分支，如果存在待发布的release分支，还需要合并到release分支</li>\n</ul>\n<h3 id=\"git团队开发实践流程\"><a href=\"#git团队开发实践流程\" class=\"headerlink\" title=\"git团队开发实践流程\"></a>git团队开发实践流程</h3><ol>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>解决冲突</li>\n<li>git push</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git工作机制\"><a href=\"#git工作机制\" class=\"headerlink\" title=\"git工作机制\"></a>git工作机制</h2><ul>\n<li>工作区—&gt; 代码存放位置</li>\n<li>暂存区—&gt; 临时存储 <code>git add</code></li>\n<li>本地库—&gt; 历史版本 <code>git commit</code></li>\n<li>远程库—&gt; 代码托管中心 <code>git push</code></li>\n</ul>\n<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ul>\n<li>设置用户签名<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 用户名</span><br><span class=\"line\">git config --global user.email 邮箱 </span><br></pre></td></tr></table></figure></li>\n<li>初始化本地库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></li>\n<li>查看本地库状态<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 友好的输出格式</span></span><br><span class=\"line\">git status -sb -uno --show-stash</span><br></pre></td></tr></table></figure></li>\n<li>添加暂存区<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br></pre></td></tr></table></figure></li>\n<li>撤销添加到暂存区的修改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cached 文件名</span><br></pre></td></tr></table></figure></li>\n<li>提交本地库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;日志信息&quot;</span> 文件名</span><br></pre></td></tr></table></figure></li>\n<li>提交暂存区(暂存本地不想提交的修改)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure></li>\n<li>丢弃全部本地修改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -f</span><br></pre></td></tr></table></figure></li>\n<li>查看版本信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看精简版版本信息</span></span><br><span class=\"line\">git reflog </span><br><span class=\"line\"><span class=\"comment\"># 查看详细版版本信息</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline --graph</span><br></pre></td></tr></table></figure></li>\n<li>版本穿梭<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 版本号</span><br></pre></td></tr></table></figure></li>\n<li>给提交贴标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"分支相关命令\"><a href=\"#分支相关命令\" class=\"headerlink\" title=\"分支相关命令\"></a>分支相关命令</h3><ul>\n<li>查看分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看具体的提交信息</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">git branch -f</span><br><span class=\"line\"><span class=\"comment\"># 查看本地和远程的所有分支</span></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></li>\n<li>创建分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure></li>\n<li>删除分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure></li>\n<li>切换分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建并且换分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br></pre></td></tr></table></figure></li>\n<li>合并分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge 分支名  <span class=\"comment\"># 将指定分支与当前分支进行合并</span></span><br></pre></td></tr></table></figure></li>\n<li>冲突合并<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当两个版本均有修改时，版本合并时会产生冲突</span></span><br><span class=\"line\"><span class=\"comment\"># 首先需要手动进行合并</span></span><br><span class=\"line\"><span class=\"comment\"># 将修改加入暂存区</span></span><br><span class=\"line\">git add 文件名</span><br><span class=\"line\"><span class=\"comment\"># 提交本地库 注意: 此时提交不能带有文件名，否则会报错</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;版本信息&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"远程库相关操作\"><a href=\"#远程库相关操作\" class=\"headerlink\" title=\"远程库相关操作\"></a>远程库相关操作</h3><ul>\n<li><p>为远程库创建别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已经存在的别名</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 为远程库添加别名</span></span><br><span class=\"line\">git remote add 别名 远程库地址</span><br><span class=\"line\"><span class=\"comment\"># eg: </span></span><br><span class=\"line\">git remote add git-demo https://github.com/lijiahaohb/git-demo.git</span><br></pre></td></tr></table></figure></li>\n<li><p>更新远程仓库变更</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote update origin</span><br><span class=\"line\"><span class=\"comment\"># 之后还要将远程仓库的分支merge到本地仓库</span></span><br><span class=\"line\">git merge origin/develop </span><br></pre></td></tr></table></figure></li>\n<li><p>将本地库代码推送到远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push 别名 本地分支名:远程分支名 </span><br><span class=\"line\"><span class=\"comment\"># eg:</span></span><br><span class=\"line\">git push git-demo master:master</span><br></pre></td></tr></table></figure></li>\n<li><p>将远程库代码拉取到本地库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 别名 远程分支名:本地分支名</span><br><span class=\"line\"><span class=\"comment\"># eg: </span></span><br><span class=\"line\">git pull git-demo master:master</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git分支管理策略\"><a href=\"#git分支管理策略\" class=\"headerlink\" title=\"git分支管理策略\"></a>git分支管理策略</h3><ul>\n<li>master分支: 主干分支，会自动建立</li>\n<li>release分支: 发布分支，realse分支开始测试之后，不能将develop分支内容合并到release分支</li>\n<li>develop分支: 日常开发分支，develop分支代码稳定以后，应该合并回master</li>\n<li>feature分支: 功能分支，为了开发特定功能从develop分支分出，开发完成后需要并入develop分支</li>\n<li>hotfix分支: 软件修复分支，从master分支分出需要合并回master分支，如果存在待发布的release分支，还需要合并到release分支</li>\n</ul>\n<h3 id=\"git团队开发实践流程\"><a href=\"#git团队开发实践流程\" class=\"headerlink\" title=\"git团队开发实践流程\"></a>git团队开发实践流程</h3><ol>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>解决冲突</li>\n<li>git push</li>\n</ol>\n"},{"title":"Linux 命令行工具","_content":"\n## Linux基础命令\n\n### man\n* 查询命令的详细信息\n\t``` bash\n\tman ${command}\n\t```\n* 查询文件的详细信息\n\t``` bash\n\tman 5 ${filename}\n\t```\n\n### 用户管理和密码管理\n* useradd \n\t``` bash\n\tuseradd 用户名\n\t```\n\n* userdel \n\t``` bash\n\tuserdel 用户名\n\t```\n\n* passwd \n\t``` bash\n\t# 修改当前用户密码\n\tpasswd\n\t# 修改其他用户密码(需要是拥有root权限的用户)\n\tpasswd 用户名\n\t```\n\n### chmod \n\n``` bash\n# 修改文件权限\nchmod 750 filename\n\n# 递归修改文件权限\nchmod -R 750 dirname\n```\n\n### chown \n\n``` bash\n# 修改归属人以及归属组\nchown user:group filename\n\n# 递归修改目录下的归属人以及归属组\nchown -R user:group dirname\n```\n\n## 网络\n\n### tcpdump\n\n* <font color=red>note: tcpdump抓包时默认只抓每一个数据包前68字节</font>\n* 常用选项\n\t- -i 指定网卡\n\t- -D 列出所有的网卡列表\n\t- -C 当使用 -w 写入文件时，限制文件的最大大小，超出时会新开一个文件\n\t- -s 指定数据报大小(指定为0的话会抓取全部的数据包)\n\t- -w 把抓到的数据包保存到一个文件中\n\t- -r 读取保存了抓到数据包的文件\n\t- -v 抓包时输出包的附加信息\n\t- -c 指定抓取数据包的个数\n\t- -A 显示抓取包的全部内容\n\t- -n 不要把地址转换为主机名(直接显示ip不要解析为域名)\n\t- -nn 不要转换协议和端口号\n\t- -t 不显示时间戳\n\n* 过滤筛选\n\t- 网卡过滤\n\t\t``` bash\n\t\t# 指定抓取 eth1 网卡上的包\n\t\ttcpdump -i eth1\n\n\t\t# 指定抓取所有网卡上的包\n\t\ttcpdump -i any\n\t\t```\n\n\t- 主机过滤\n\t\t``` bash\n\t\t# 要获取指定 IP 的数据包，不管是作为源地址还是目的地址\n\t\ttcpdump host 192.168.3.7\n\n\t\t# 要指定 IP 地址是源地址或是目的地址\n\t\ttcpdump src 192.168.1.100\n\t\ttcpdump dst 192.168.1.100\n\t\t```\n\t\n\t- 网段过滤\n\t\t``` bash\n\t\ttcpdump -i eth1 net 192.168\n\t\ttcpdump -i eth1 src net 192.168\n\t\ttcpdump -i eth1 dst net 192.168\n\t\t```\n\t- 端口过滤\n\t\t``` bash\n\t\ttcpdump port 22\n\t\ttcpdump src port 22\n\t\ttcpdump dst port 22\n\t\t```\n\t- 端口范围过滤\n\t\t``` bash\n\t\ttcpdump portrange 22-125\n\t\t```\n\t- 协议过滤\n\t\t``` bash\n\t\ttcpdump -i eth1 arp\n\t\ttcpdump -i eth1 ip\n\t\ttcpdump -i eth1 tcp\n\t\ttcpdump -i eth1 udp\n\t\ttcpdump -i eth1 icmp\n\t\t```\n\n* 具体案例\n\t``` bash\n\ttcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap\n\n\t\t- tcp:  ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型\n\t\t- -i eth1 : 只抓经过接口eth1的包\n\t\t- -t : 不显示时间戳\n\t\t- -s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包\n\t\t- -c 100 : 只抓取100个数据包\n\t\t- dst port ! 22 : 不抓取目标端口是22的数据包\n\t\t- src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24\n\t\t- -w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析\n\t```\n\n### netstat\n\n``` bash\nnetstat -anp | grep 端口号\n```\n\n### nc\n\n* 控制参数\n\t- -l  指定nc处于监听模式\n\t- -p  指定本机端口\n\t- -s  指定发送数据的源IP地址\n\t- -u  指定nc使用UDP协议，默认为TCP\n\t- -v  输出交互或出错信息，新手调试时尤为有用\n\t- -w  超时秒数，后面跟数字\n\t- -z  表示zero，表示扫描时不发送任何数据\n* 实例\n\t- 监听入站连接\n\t\t``` bash\n\t    # 监听tcp\n\t\tnc -l 127.0.0.1 8080\n\n\t\t# 监听udp\n\t\tnc -l -u 1234\n\t\t```\n\t- 连接远程系统\n\t\t``` bash\n\t\t# 连接tcp\n\t\tnc 127.0.0.1 8080\n\n\t\t# 连接udp\n\t\tnc -u 127.0.0.1 8080\n\n\t\t# 设置连接超时(该选项只能用于客户端)\n\t\tnc -w 10 127.0.0.1 8080\n\t\t```\n\t- 使用nc作为代理\n\t\t``` bash\n\t\t# 发往到 8080 端口的连接会自动转发到 192.168.1.200 上的 80 端口\n\t\tncat -l 8080 | ncat 192.168.1.200 80\n\t\t```\n\t- 使用nc拷贝文件\n\t\t``` bash\n\t\t# 接收端\n\t\tnc -l  8080 > file.txt\n\n\t\t# 发送端\n\t\tnc 192.168.1.100 8080 --send-only < data.txt\n\t\t```\n\t- 端口转发\n\t\t``` bash\n\t\t# 通过选项 -c  进行端口转发\n\t\t# 连接到 80 端口的连接都会转发到 8080 端口\n\t\tnc -u -l 80 -c 'nc -u -l 8080'\n\t\t```\n\t\n\n### curl\n\n### telnet\n\n``` bash\n# 判断主机是否开放某个端口\ntelnet 127.0.0.1 3389\n```\n\n## 进程\n\n### ps\n\n``` bash\n# 查看内存占用较多的进程\nps aux | sort -k4nr | head -N\n\n# head: -N可以指定显示的行数，默认显示10行\n# ps: \n\t- a 指代所有的进程\n\t- u 执行该进程的用户id\n\t- x 指代显示所有程序，不以终端来区分\n# sort:\n\t- k 根据指定关键词排序\n\t- 4 表示按照第四列排序\n\t- n 表示按照数值排序\n\t- r 按照从大到小排序(排序默认从小到大)\n# ps aux 的输出\n\t- %MEM 在第 4 个位置，-k4 按照内存占用排序\n\t- %CPU 在第三个位置，-k3 表示按照cpu占用率排序。\n```\n\n### perf\n\n``` bash\nsudo perf record -F 99 -p 13204 -g -- sleep 30\n\t\n\t* perf record \t表示记录\n\t* -F \t\t\t表示记录的频率\n\t* -p \t\t\t表示进程号\n\t* -g \t\t\t表示记录调用栈\n\t* --sleep \t\t表示持续记录30s\n```\n``` bash\nsudo perf report -n --stdio\n```\n\n\t\n## 文本处理\n\n### wc\n\n* 该命令用来计算文件的字节数，字数或是行数\n* -l 该选项用于显示行数\n\t``` grep\n\twc -l test.txt\n\t```\n* -c 该选项用于显示bytes数\n* -w 只显示字数\n\n### 正则表达式\n\n#### 基础正则\n* ^ 过滤以...开头的行\n\t``` bash\n\tgrep '^lijiahao' test.txt\n\tgrep '^li' test.txt\n\t```\n\n* $ 过滤以...结尾的行\n\t``` bash\n\tgrep 'lijihao$' test.txt\n\tgrep 'm$' test.txt\n\t```\n\n* ^$ 过滤空行\n\t``` bash\n\tgrep -n '^$' test.txt\n\t```\n\n* . 匹配任意一个字符\n\t- note: . 不会匹配空行\n\t- \\.转义字符 用于匹配'.'\n\t``` bash\n\tgrep '\\.$' test.txt\n\t```\n\n* * 前一个字符连续出现0次或者0次以上\n\t``` bash\n\t# note: 本条命令会导致不包含i的行也被过滤出来，因为可以i可以出现0次\n\tgrep 'i*' test.txt\n\t```\n\n* .* 表示匹配所有\n\t- * 匹配的贪婪性: 简单来说就是.*会尽可能多的匹配\n\t``` bash\n\tgrep '.*o' test.txt\n\t```\n\n* [] 表示匹配中括号中的任意一个字符\n\t- [abc]  匹配abc中任意一个\n\t- [a-z]  匹配a-z中的任意一个\n\t- [a-zA-Z0-9] 匹配大小写字母和数字中的任意一个\n\t- 中括号里面出现的内容会被去掉特殊含义\n\t``` bash\n\tgrep 'li[abc]' test.txt\n\t```\n\n* [^] 匹配括号中内容以外的内容\n\t- [^abc] 匹配abc以外的所有内容\n\n#### 扩展正则\n\n* <font color=red>note: 扩展正则匹配要使用egrep命令或者给grep命令添加-E选项</font>\n\n* \\+ 前一个字符连续出现1次或者1次以上\n\t``` bash\n\tegrep 'i+' test.txt\n\n\t# 匹配连续出现数字的行\n\tegrep '[0-9]+' test.txt\n\t```\n\n* | 表示或者\n\t``` bash\n\tegrep 'li|lijiahao' test.txt\n\t```\n\n* () 表示()中的内容表示一个整体\n\t- 可以在sed中表示反向引用\n\t``` bash\n\tegrep 'li(|jiahao)' test.txt\n\t```\n* {} 表示连续出现\n\t- o{n,m} 前面的字符o连续出现次数在n-m之间\n\t- o{n} 前面的字符o连续出现n次\n\t``` bash\n\tegrep 'i{3,4}' test.txt\n\tegrep 'i{3}' test.txt\n\n\t# 匹配身份证号 前17位位数字，第18位为数字或者X\n\tegrep '[0-9]{17}[0-9X]' id.txt\n\t```\n* ? 前一个字符出现了0次或者1次\n\t``` bash\n\tegrep 'go?d' test.txt\n\t```\n\n### find\n* -name 根据文件名查找\n\t``` bash\n\tfind / -name filename\n\t```\n\n* -type 根据类型进行查找\n\t``` bash\n\t# 查找类型为目录的文件\n\tfind / -type d\n\t```\n\n\n### grep\n* grep主要作用是过滤\n* -n 该选项用于显示行号\n\t``` bash\n\tgrep -n 't[ae]st' test.txt\n\tgrep -n '^$' test.txt\n\t```\n* -rl\n\t``` bash\n\t# 查找dirname文件夹下所有包含abc内容的文件\n\tgrep -rl abc dirname\n\t```\n* -v 该选项用于反选\n\t``` bash\n\t# 不显示空行\n\tgrep -vn '^$' test.txt\n\n\t# 不显示空行和带有井号的行\n\tegrep -v '^$|#' test.txt\n\t``` \n* -E 该选项用于支持扩展正则\n\t``` bash\n\tgrep -E 'i+' test.txt\n\t```\n* -o 该选项用于显示匹配过程\n\t``` bash\n\tgrep -o 'i{2,3}' test.txt\n\t```\n* c 统计出现了多少行 类似于wc -l\n\t```\n\tps -ef | grep -c sshd\n\t```\n* -i 该选项用于忽略大小写\n\t``` bash\n\t# 过滤包含字母的行\n\tgrep -i '[a-z]' test.txt\n\t```\n* -w 精确匹配\n\t``` bash\n\tnetstat -anp | grep -w ':80'\n\t```\n\n### sed\n* 主要作用是替换修改文件内容\n* 命令格式:  sed 选项 '命令功能 修饰符' 参数\n\t``` bash\n\t# 将test.txt 中的一个内容替换为另一个内容\n\t# s  命令功能——替换  g 修饰符\n\tsed -r 's#olgboy#oldgirl#g' test.txt\n\t```\n* 命令功能(增删改查)\n\t- s \t替换\n\t\t``` bash\n\t\t# 将[0-9] 替换为 空\n\t\tsed 's#[0-9]##g' test.txt\n\n\t\t# 如果不加 g 只会匹配每行中第一个复合的元素\n\t\tsed 's#[0-9]##' test.txt\n\n\t\t# 反向引用 (先保护起来，再使用)\n\t\t# 在 123456 的两边加上 <>\n\t\techo 123456 | sed -r 's#(.*)#<\\1>#'\n\n\t\t# 调整两个单词的顺序\n\t\techo lijiahao_zhaozijin | sed -r 's#(^.*)_(.*)#\\2_\\1#' \n\n\t\t# 通过反向引用来取出ens32网卡的IP地址 \n\t\tip a s ens32 | sed -n '4p' | sed -r 's#(^.*t )(.*)(/.*$)#\\2#g'\n\t\tip a s ens32 | sed -rn '3s#(^.*t )(.*)(/.*$)#\\2#gp'\n\t\t```\n\t- p \t显示\n\t\t``` bash\n\t\t# 查找某一行\n\t\tsed '1p' test.txt\n\n\t\t# 查找某个范围的行\n\t\tsed '1,5p' test.txt\n\t\tsed '1,$p' test.txt\n\t\tsed '$p' test.txt\n\n\t\t# 查找固定内容(会正则匹配//之间的内容)\n\t\tsed '/lijiahao/p' test.txt\n\n\t\t# ! 表示取反 表示不显示空行和带井号的行\n\t\tsed -nr '/^$|#/!p' /etc/ssh/sshd_config\n\n\t\t# 查找固定范围内的内容\n\t\tsed '/10:00/,/11:00/p' test.txt\n\t\tsed -n '/li/,/lijiahao/p' test.txt\n\t\t```\n\t- d \t删除\n\t\t``` bash\n\t\t# 删除某一行\n\t\tsed '3d' test.txt\n\n\t\t# 删除某个范围的行\n\t\tsed '2,3d' test.txt\n\n\t\t# 删除空行和带井号的行 \n\t\tsed -r '/^$|#/d' /etc/ssh/sshd_config\n\t\t```\n\t- cai 增加c/a/i\n\t\t``` bash\n\t\t# c 替换一行内容\n\t\tsed '3c lijihaohaobang' test.txt\n\n\t\t# a 在行后面一行添加内容\n\t\tsed '3a lijiahaohaohba' test.txt\n\t\tsed '$a lijiahao\\nzhaozijin\\nshengqiqi' test.txt\n\n\t\t# i 在行的前面加入内容\n\t\tsed '3i lijihaohaobang' test.txt\n\t\t```\n* 选项\n\t- -n 取消默认输出\n\t\t``` bash\n\t\t# 显示第三行(带有默认输出，效果是第三行打印两遍)\n\t\tsed '3p' test.txt\n\t\t# 显示第三行(取消默认显示，效果是只会显示第三行)\n\t\tsed -n '3p' test.txt\n\t\t```\n\t- -r 支持扩展正则\n\t\t``` bash\n\t\tsed -nr '/[0-9]{3}/p' test.txt\n\t\t```\n\t- -i 表示写入(如果不添加-i选项，只会对文件内容进行操作，不会将操作后的结果写会文件)\n\n### awk\n* 主要作用是取列和统计操作\n* 命令格式\n\t- 命令 选项 '条件{动作}'\n\n* 执行流程分析\n\t- 读取文件前: BEGIN{print \"name\"}\n\t- 读取文件中: {print $2} 打印第二列 note: {}之前还可以加上过滤条件\n\t- 读取文件后: END{print \"end of file\"}\n\t``` bash\n\tawk -F, 'BEGIN{print \"name\"}{print $2}END{print \"end of file\"}' test.txt\n\t# 取出ens32网卡的IP地址 \n\tip a s ens32 | awk -F \"[ /]+\" 'NR==3{print $3}' \n\t```\n\n* 取行\n\t- NR \t行号\n\t\t* NR==1 \t\t\t取出某一行\n\t\t* NR>=1 && NR<=5 \t取出1到5行的范围\n\t\t* /lijiahao/ \t\t取包含某个内容的行\n\t\t* /li/,/lijiahao/ \t取包含某两个内容之间的行\n\t``` bash\n\t# 取出第一行\n\tawk 'NR==1' test.txt\n\n\t# 取出第1到5行\n\tawk 'NR>=1 && NR<=5' test.txt\n\t```\n* 取列\n\t- $数字 取出某一列\n\t- $0 \t取出整行内容\n\t- NF \t每行有多少列\n\t- $NF \t最后一列\n\t- FS  \t字段分隔符\n\t- OFS \t输出字段分隔符\n\t``` bash\n\t# 打印第二列内容\n\tawk '{print $2}' filename \n\n\t# 打印最后一列内容\n\tawk '{print $NF}' filename \n\n\t# -F: 指定分隔符为: \n\t# 取出以:为分割的最后一列和第一列\n\tawk -F: '{print $1,$NF}' /etc/passwd | column -t\n\t```\n\n* 选项\n\t- -F \t指定每列的分隔符(默认是' ')\n\t- -v    修改选项值\n\t\t``` bash\n\t\tawk -F: -v OFS=: '{print $1,$NF}' /etc/passwd | column -t\n\t\t```\n\n## 磁盘管理\n\n### df\n``` bash\n# 显示磁盘分区上可以使用的磁盘空间\ndf -h\n```\n### du\n``` bash\n# 显示每个目录和文件的磁盘使用空间\ndu -h\n```\n\t\n\n\n## Linux性能调优\n\n### 性能问题分析\n* 需要性能优化的现象\n\t- 响应慢\n\t- 负载高\n\n* 性能优化的方向\n\t- 系统问题:  例如CPU利用率、SWAP利用率或者IO过高导致的整体性能下降\n\t- 功能性问题:\n\t- 新出现问题:  例如系统做了哪些变动\n\t- 不规律问题:\n\n* 操作系统问题\n\t```\n\t操作系统的几个问题之间是相互依赖的:\n\t\t- CPU过度使用会造成大量的进程等待CPU资源，系统响应变慢，等待的进程数量会增加，导致内存增加，内存耗尽会使用虚拟内存，虚拟内存使用又会造成磁盘IO增加和CPU开销增加\n\t```\n\t- CPU\n\t- 内存\n\t- 磁盘\n\t- 网络\n\n* 性能问题出现的原因\n\t- 应用程序设计的缺陷和数据库查询的滥用最有可能导致性能问题\n\t- 可能造成CPU瓶颈的问题: 不合理的数据库查询\n\t- 可能造成内存瓶颈的问题: 高并发、系统进程多、或者是内存泄漏\n\t- 可能会造成磁盘瓶颈的原因: 数据库频繁更新，或者查询大表\n\t- 性能瓶颈如果是内存/磁盘，最终表现出的结果就是CPU耗尽，系统负载极高，响应缓慢，甚至暂时失去响应\n\t- 物理内存不够时会使用交换内存，会带来磁盘IO和CPU的开销\n\n### 系统性能分析工具\n* vmstat\n\t- vmstat是Virtual Memory Statistics(虚拟内存统计)的缩写，可以对操作系统的内存信息、进程状态、CPU活动进行监视\n\t- 使用语法\n\t```\n\tvmstat [-V] [-n] [delay [count]]\n\t\t- -V 表示打印出版本信息\n\t\t- -n 表示在周期性循环输出时，输出的头部信息仅显示一次\n\t\t- delay 表示两次输出之间的间隔时间\n\t\t- count 表示统计的总次数，默认为1\n\n\teg:\n\t\t- vmstat 3\n\t\t- vmstat 3 5\n\t```\n* iostat\n\t- 对输入输出进行统计，主要的功能是对系统的磁盘IO进行监视\n\t- 使用语法:\n\t```\n\tiostat \n\t\t- -c 显示CPU使用情况\n\t\t- -d 显示磁盘的使用情况\n\t\t- -k 每秒以k bytes为单位显示数据\n\t\t- -x 指定要统计的磁盘设备的名称，默认为所有的磁盘设备\n\t\t- interval 指定两次统计间隔时间\n\t\t- count 指定统计的次数\n\t\n\teg:\n\t\tiostat -c 5 3\n\t\tiostat -d 5 3\n\t```\n* sar\n\t- sar命令很强大，是分析系统性能的重要工具之一，可以全面的获取系统的CPU、运行队列、磁盘IO、分页(交换区)、内存、CPU中断、网络等性能参数\n\t- 使用语法\n\t```\n\tsar \n\t\t- -a 显示系统所有资源设备(CPU、内存、磁盘)的运行状况\n\t\t- -u 显示系统所有CPU在采样时间内的负载状态\n\t\t- -p 显示当前系统中指定CPU的使用状况\n\t\t- -d 显示系统所有磁盘设备在采样时间内的使用状况\n\t\t- -r 显示系统内存在采样时间内的使用状况\n\t\t- -b 显示缓冲区在采样时间内的使用情况\n\t\t- -v 显示进程、文件、inode和锁表状态\n\t\t- -n 显示网络运行状态，参数后面可以跟DEV、EDEV、SOCK和FULL\n\t\t- interval 表示采样时间间隔\n\t\t- count 采样次数\n\n\teg:\n\t\tsar -u 3 5\n\t\tsar -d 3 5\n\t\tsar -r 3 5\n\t\tsar -n 3 5\n\t```\n* top\n\t- 在top界面按1会出现全部CPU的使用情况\n\t- 在top界面按大写的M可以按照内存使用情况进行排序\n\t- 在top界面按k可以将对应pid号的进程终止\n```\n使用语法: top \n\t* -n 设置屏幕刷新的次数\n\t* -b 将top的输出信息排版以适合输出文件的格式输出到屏幕上\neg:\n\ttop -b -n 1 | grep cpu\n```\n\n* iotop\n\n* free\n\t- free命令显示系统内存使用情况，包括物理内存、交换文件(swap)和内核缓冲区内存\n\t```\n\t使用语法: free\n\t\t- -h 显示数据人性化\n\t\t- -s 指定刷新的频率\n\teg:\n\t\tfree -h -s 3\n\t```\n\n* ps\n```\n# 根据CPU使用升序排序\nps aux --sort -pcpu | less\n\n# 按照内存使用情况升序排序\nps aux --sort -pmem | less\n``` \n* /proc目录\n``` bash\n# 查看CPU信息\ncat /proc/cpuinfo\n\n# 查看内存使用情况\ncat /proc/meminfo\n\n# /proc/stat 提供系统CPU和任务统计信息，如只需要各个CPU的信息\ncat /proc/stat | grep ^cpu\n\n# 查看调用信息\nwatch -d cat /proc/interrupts\n```\n\n### 评判标准\n* CPU\n\t- user% + sys% < 70%时状态良好\n\t- user% 表示CPU在用户模式下的时间百分比\n\t- sys%  表示CPU在系统模式下的时间百分比\n* 内存\n\t- swap in(si) = 0\n\t- swap out(so) = 0\n* 磁盘\n\t- iowait% < 20%\n\n\n\n","source":"_posts/tools/linux_operation.md","raw":"---\ntitle: Linux 命令行工具\ncategories: \n- tools\n---\n\n## Linux基础命令\n\n### man\n* 查询命令的详细信息\n\t``` bash\n\tman ${command}\n\t```\n* 查询文件的详细信息\n\t``` bash\n\tman 5 ${filename}\n\t```\n\n### 用户管理和密码管理\n* useradd \n\t``` bash\n\tuseradd 用户名\n\t```\n\n* userdel \n\t``` bash\n\tuserdel 用户名\n\t```\n\n* passwd \n\t``` bash\n\t# 修改当前用户密码\n\tpasswd\n\t# 修改其他用户密码(需要是拥有root权限的用户)\n\tpasswd 用户名\n\t```\n\n### chmod \n\n``` bash\n# 修改文件权限\nchmod 750 filename\n\n# 递归修改文件权限\nchmod -R 750 dirname\n```\n\n### chown \n\n``` bash\n# 修改归属人以及归属组\nchown user:group filename\n\n# 递归修改目录下的归属人以及归属组\nchown -R user:group dirname\n```\n\n## 网络\n\n### tcpdump\n\n* <font color=red>note: tcpdump抓包时默认只抓每一个数据包前68字节</font>\n* 常用选项\n\t- -i 指定网卡\n\t- -D 列出所有的网卡列表\n\t- -C 当使用 -w 写入文件时，限制文件的最大大小，超出时会新开一个文件\n\t- -s 指定数据报大小(指定为0的话会抓取全部的数据包)\n\t- -w 把抓到的数据包保存到一个文件中\n\t- -r 读取保存了抓到数据包的文件\n\t- -v 抓包时输出包的附加信息\n\t- -c 指定抓取数据包的个数\n\t- -A 显示抓取包的全部内容\n\t- -n 不要把地址转换为主机名(直接显示ip不要解析为域名)\n\t- -nn 不要转换协议和端口号\n\t- -t 不显示时间戳\n\n* 过滤筛选\n\t- 网卡过滤\n\t\t``` bash\n\t\t# 指定抓取 eth1 网卡上的包\n\t\ttcpdump -i eth1\n\n\t\t# 指定抓取所有网卡上的包\n\t\ttcpdump -i any\n\t\t```\n\n\t- 主机过滤\n\t\t``` bash\n\t\t# 要获取指定 IP 的数据包，不管是作为源地址还是目的地址\n\t\ttcpdump host 192.168.3.7\n\n\t\t# 要指定 IP 地址是源地址或是目的地址\n\t\ttcpdump src 192.168.1.100\n\t\ttcpdump dst 192.168.1.100\n\t\t```\n\t\n\t- 网段过滤\n\t\t``` bash\n\t\ttcpdump -i eth1 net 192.168\n\t\ttcpdump -i eth1 src net 192.168\n\t\ttcpdump -i eth1 dst net 192.168\n\t\t```\n\t- 端口过滤\n\t\t``` bash\n\t\ttcpdump port 22\n\t\ttcpdump src port 22\n\t\ttcpdump dst port 22\n\t\t```\n\t- 端口范围过滤\n\t\t``` bash\n\t\ttcpdump portrange 22-125\n\t\t```\n\t- 协议过滤\n\t\t``` bash\n\t\ttcpdump -i eth1 arp\n\t\ttcpdump -i eth1 ip\n\t\ttcpdump -i eth1 tcp\n\t\ttcpdump -i eth1 udp\n\t\ttcpdump -i eth1 icmp\n\t\t```\n\n* 具体案例\n\t``` bash\n\ttcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap\n\n\t\t- tcp:  ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型\n\t\t- -i eth1 : 只抓经过接口eth1的包\n\t\t- -t : 不显示时间戳\n\t\t- -s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包\n\t\t- -c 100 : 只抓取100个数据包\n\t\t- dst port ! 22 : 不抓取目标端口是22的数据包\n\t\t- src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24\n\t\t- -w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析\n\t```\n\n### netstat\n\n``` bash\nnetstat -anp | grep 端口号\n```\n\n### nc\n\n* 控制参数\n\t- -l  指定nc处于监听模式\n\t- -p  指定本机端口\n\t- -s  指定发送数据的源IP地址\n\t- -u  指定nc使用UDP协议，默认为TCP\n\t- -v  输出交互或出错信息，新手调试时尤为有用\n\t- -w  超时秒数，后面跟数字\n\t- -z  表示zero，表示扫描时不发送任何数据\n* 实例\n\t- 监听入站连接\n\t\t``` bash\n\t    # 监听tcp\n\t\tnc -l 127.0.0.1 8080\n\n\t\t# 监听udp\n\t\tnc -l -u 1234\n\t\t```\n\t- 连接远程系统\n\t\t``` bash\n\t\t# 连接tcp\n\t\tnc 127.0.0.1 8080\n\n\t\t# 连接udp\n\t\tnc -u 127.0.0.1 8080\n\n\t\t# 设置连接超时(该选项只能用于客户端)\n\t\tnc -w 10 127.0.0.1 8080\n\t\t```\n\t- 使用nc作为代理\n\t\t``` bash\n\t\t# 发往到 8080 端口的连接会自动转发到 192.168.1.200 上的 80 端口\n\t\tncat -l 8080 | ncat 192.168.1.200 80\n\t\t```\n\t- 使用nc拷贝文件\n\t\t``` bash\n\t\t# 接收端\n\t\tnc -l  8080 > file.txt\n\n\t\t# 发送端\n\t\tnc 192.168.1.100 8080 --send-only < data.txt\n\t\t```\n\t- 端口转发\n\t\t``` bash\n\t\t# 通过选项 -c  进行端口转发\n\t\t# 连接到 80 端口的连接都会转发到 8080 端口\n\t\tnc -u -l 80 -c 'nc -u -l 8080'\n\t\t```\n\t\n\n### curl\n\n### telnet\n\n``` bash\n# 判断主机是否开放某个端口\ntelnet 127.0.0.1 3389\n```\n\n## 进程\n\n### ps\n\n``` bash\n# 查看内存占用较多的进程\nps aux | sort -k4nr | head -N\n\n# head: -N可以指定显示的行数，默认显示10行\n# ps: \n\t- a 指代所有的进程\n\t- u 执行该进程的用户id\n\t- x 指代显示所有程序，不以终端来区分\n# sort:\n\t- k 根据指定关键词排序\n\t- 4 表示按照第四列排序\n\t- n 表示按照数值排序\n\t- r 按照从大到小排序(排序默认从小到大)\n# ps aux 的输出\n\t- %MEM 在第 4 个位置，-k4 按照内存占用排序\n\t- %CPU 在第三个位置，-k3 表示按照cpu占用率排序。\n```\n\n### perf\n\n``` bash\nsudo perf record -F 99 -p 13204 -g -- sleep 30\n\t\n\t* perf record \t表示记录\n\t* -F \t\t\t表示记录的频率\n\t* -p \t\t\t表示进程号\n\t* -g \t\t\t表示记录调用栈\n\t* --sleep \t\t表示持续记录30s\n```\n``` bash\nsudo perf report -n --stdio\n```\n\n\t\n## 文本处理\n\n### wc\n\n* 该命令用来计算文件的字节数，字数或是行数\n* -l 该选项用于显示行数\n\t``` grep\n\twc -l test.txt\n\t```\n* -c 该选项用于显示bytes数\n* -w 只显示字数\n\n### 正则表达式\n\n#### 基础正则\n* ^ 过滤以...开头的行\n\t``` bash\n\tgrep '^lijiahao' test.txt\n\tgrep '^li' test.txt\n\t```\n\n* $ 过滤以...结尾的行\n\t``` bash\n\tgrep 'lijihao$' test.txt\n\tgrep 'm$' test.txt\n\t```\n\n* ^$ 过滤空行\n\t``` bash\n\tgrep -n '^$' test.txt\n\t```\n\n* . 匹配任意一个字符\n\t- note: . 不会匹配空行\n\t- \\.转义字符 用于匹配'.'\n\t``` bash\n\tgrep '\\.$' test.txt\n\t```\n\n* * 前一个字符连续出现0次或者0次以上\n\t``` bash\n\t# note: 本条命令会导致不包含i的行也被过滤出来，因为可以i可以出现0次\n\tgrep 'i*' test.txt\n\t```\n\n* .* 表示匹配所有\n\t- * 匹配的贪婪性: 简单来说就是.*会尽可能多的匹配\n\t``` bash\n\tgrep '.*o' test.txt\n\t```\n\n* [] 表示匹配中括号中的任意一个字符\n\t- [abc]  匹配abc中任意一个\n\t- [a-z]  匹配a-z中的任意一个\n\t- [a-zA-Z0-9] 匹配大小写字母和数字中的任意一个\n\t- 中括号里面出现的内容会被去掉特殊含义\n\t``` bash\n\tgrep 'li[abc]' test.txt\n\t```\n\n* [^] 匹配括号中内容以外的内容\n\t- [^abc] 匹配abc以外的所有内容\n\n#### 扩展正则\n\n* <font color=red>note: 扩展正则匹配要使用egrep命令或者给grep命令添加-E选项</font>\n\n* \\+ 前一个字符连续出现1次或者1次以上\n\t``` bash\n\tegrep 'i+' test.txt\n\n\t# 匹配连续出现数字的行\n\tegrep '[0-9]+' test.txt\n\t```\n\n* | 表示或者\n\t``` bash\n\tegrep 'li|lijiahao' test.txt\n\t```\n\n* () 表示()中的内容表示一个整体\n\t- 可以在sed中表示反向引用\n\t``` bash\n\tegrep 'li(|jiahao)' test.txt\n\t```\n* {} 表示连续出现\n\t- o{n,m} 前面的字符o连续出现次数在n-m之间\n\t- o{n} 前面的字符o连续出现n次\n\t``` bash\n\tegrep 'i{3,4}' test.txt\n\tegrep 'i{3}' test.txt\n\n\t# 匹配身份证号 前17位位数字，第18位为数字或者X\n\tegrep '[0-9]{17}[0-9X]' id.txt\n\t```\n* ? 前一个字符出现了0次或者1次\n\t``` bash\n\tegrep 'go?d' test.txt\n\t```\n\n### find\n* -name 根据文件名查找\n\t``` bash\n\tfind / -name filename\n\t```\n\n* -type 根据类型进行查找\n\t``` bash\n\t# 查找类型为目录的文件\n\tfind / -type d\n\t```\n\n\n### grep\n* grep主要作用是过滤\n* -n 该选项用于显示行号\n\t``` bash\n\tgrep -n 't[ae]st' test.txt\n\tgrep -n '^$' test.txt\n\t```\n* -rl\n\t``` bash\n\t# 查找dirname文件夹下所有包含abc内容的文件\n\tgrep -rl abc dirname\n\t```\n* -v 该选项用于反选\n\t``` bash\n\t# 不显示空行\n\tgrep -vn '^$' test.txt\n\n\t# 不显示空行和带有井号的行\n\tegrep -v '^$|#' test.txt\n\t``` \n* -E 该选项用于支持扩展正则\n\t``` bash\n\tgrep -E 'i+' test.txt\n\t```\n* -o 该选项用于显示匹配过程\n\t``` bash\n\tgrep -o 'i{2,3}' test.txt\n\t```\n* c 统计出现了多少行 类似于wc -l\n\t```\n\tps -ef | grep -c sshd\n\t```\n* -i 该选项用于忽略大小写\n\t``` bash\n\t# 过滤包含字母的行\n\tgrep -i '[a-z]' test.txt\n\t```\n* -w 精确匹配\n\t``` bash\n\tnetstat -anp | grep -w ':80'\n\t```\n\n### sed\n* 主要作用是替换修改文件内容\n* 命令格式:  sed 选项 '命令功能 修饰符' 参数\n\t``` bash\n\t# 将test.txt 中的一个内容替换为另一个内容\n\t# s  命令功能——替换  g 修饰符\n\tsed -r 's#olgboy#oldgirl#g' test.txt\n\t```\n* 命令功能(增删改查)\n\t- s \t替换\n\t\t``` bash\n\t\t# 将[0-9] 替换为 空\n\t\tsed 's#[0-9]##g' test.txt\n\n\t\t# 如果不加 g 只会匹配每行中第一个复合的元素\n\t\tsed 's#[0-9]##' test.txt\n\n\t\t# 反向引用 (先保护起来，再使用)\n\t\t# 在 123456 的两边加上 <>\n\t\techo 123456 | sed -r 's#(.*)#<\\1>#'\n\n\t\t# 调整两个单词的顺序\n\t\techo lijiahao_zhaozijin | sed -r 's#(^.*)_(.*)#\\2_\\1#' \n\n\t\t# 通过反向引用来取出ens32网卡的IP地址 \n\t\tip a s ens32 | sed -n '4p' | sed -r 's#(^.*t )(.*)(/.*$)#\\2#g'\n\t\tip a s ens32 | sed -rn '3s#(^.*t )(.*)(/.*$)#\\2#gp'\n\t\t```\n\t- p \t显示\n\t\t``` bash\n\t\t# 查找某一行\n\t\tsed '1p' test.txt\n\n\t\t# 查找某个范围的行\n\t\tsed '1,5p' test.txt\n\t\tsed '1,$p' test.txt\n\t\tsed '$p' test.txt\n\n\t\t# 查找固定内容(会正则匹配//之间的内容)\n\t\tsed '/lijiahao/p' test.txt\n\n\t\t# ! 表示取反 表示不显示空行和带井号的行\n\t\tsed -nr '/^$|#/!p' /etc/ssh/sshd_config\n\n\t\t# 查找固定范围内的内容\n\t\tsed '/10:00/,/11:00/p' test.txt\n\t\tsed -n '/li/,/lijiahao/p' test.txt\n\t\t```\n\t- d \t删除\n\t\t``` bash\n\t\t# 删除某一行\n\t\tsed '3d' test.txt\n\n\t\t# 删除某个范围的行\n\t\tsed '2,3d' test.txt\n\n\t\t# 删除空行和带井号的行 \n\t\tsed -r '/^$|#/d' /etc/ssh/sshd_config\n\t\t```\n\t- cai 增加c/a/i\n\t\t``` bash\n\t\t# c 替换一行内容\n\t\tsed '3c lijihaohaobang' test.txt\n\n\t\t# a 在行后面一行添加内容\n\t\tsed '3a lijiahaohaohba' test.txt\n\t\tsed '$a lijiahao\\nzhaozijin\\nshengqiqi' test.txt\n\n\t\t# i 在行的前面加入内容\n\t\tsed '3i lijihaohaobang' test.txt\n\t\t```\n* 选项\n\t- -n 取消默认输出\n\t\t``` bash\n\t\t# 显示第三行(带有默认输出，效果是第三行打印两遍)\n\t\tsed '3p' test.txt\n\t\t# 显示第三行(取消默认显示，效果是只会显示第三行)\n\t\tsed -n '3p' test.txt\n\t\t```\n\t- -r 支持扩展正则\n\t\t``` bash\n\t\tsed -nr '/[0-9]{3}/p' test.txt\n\t\t```\n\t- -i 表示写入(如果不添加-i选项，只会对文件内容进行操作，不会将操作后的结果写会文件)\n\n### awk\n* 主要作用是取列和统计操作\n* 命令格式\n\t- 命令 选项 '条件{动作}'\n\n* 执行流程分析\n\t- 读取文件前: BEGIN{print \"name\"}\n\t- 读取文件中: {print $2} 打印第二列 note: {}之前还可以加上过滤条件\n\t- 读取文件后: END{print \"end of file\"}\n\t``` bash\n\tawk -F, 'BEGIN{print \"name\"}{print $2}END{print \"end of file\"}' test.txt\n\t# 取出ens32网卡的IP地址 \n\tip a s ens32 | awk -F \"[ /]+\" 'NR==3{print $3}' \n\t```\n\n* 取行\n\t- NR \t行号\n\t\t* NR==1 \t\t\t取出某一行\n\t\t* NR>=1 && NR<=5 \t取出1到5行的范围\n\t\t* /lijiahao/ \t\t取包含某个内容的行\n\t\t* /li/,/lijiahao/ \t取包含某两个内容之间的行\n\t``` bash\n\t# 取出第一行\n\tawk 'NR==1' test.txt\n\n\t# 取出第1到5行\n\tawk 'NR>=1 && NR<=5' test.txt\n\t```\n* 取列\n\t- $数字 取出某一列\n\t- $0 \t取出整行内容\n\t- NF \t每行有多少列\n\t- $NF \t最后一列\n\t- FS  \t字段分隔符\n\t- OFS \t输出字段分隔符\n\t``` bash\n\t# 打印第二列内容\n\tawk '{print $2}' filename \n\n\t# 打印最后一列内容\n\tawk '{print $NF}' filename \n\n\t# -F: 指定分隔符为: \n\t# 取出以:为分割的最后一列和第一列\n\tawk -F: '{print $1,$NF}' /etc/passwd | column -t\n\t```\n\n* 选项\n\t- -F \t指定每列的分隔符(默认是' ')\n\t- -v    修改选项值\n\t\t``` bash\n\t\tawk -F: -v OFS=: '{print $1,$NF}' /etc/passwd | column -t\n\t\t```\n\n## 磁盘管理\n\n### df\n``` bash\n# 显示磁盘分区上可以使用的磁盘空间\ndf -h\n```\n### du\n``` bash\n# 显示每个目录和文件的磁盘使用空间\ndu -h\n```\n\t\n\n\n## Linux性能调优\n\n### 性能问题分析\n* 需要性能优化的现象\n\t- 响应慢\n\t- 负载高\n\n* 性能优化的方向\n\t- 系统问题:  例如CPU利用率、SWAP利用率或者IO过高导致的整体性能下降\n\t- 功能性问题:\n\t- 新出现问题:  例如系统做了哪些变动\n\t- 不规律问题:\n\n* 操作系统问题\n\t```\n\t操作系统的几个问题之间是相互依赖的:\n\t\t- CPU过度使用会造成大量的进程等待CPU资源，系统响应变慢，等待的进程数量会增加，导致内存增加，内存耗尽会使用虚拟内存，虚拟内存使用又会造成磁盘IO增加和CPU开销增加\n\t```\n\t- CPU\n\t- 内存\n\t- 磁盘\n\t- 网络\n\n* 性能问题出现的原因\n\t- 应用程序设计的缺陷和数据库查询的滥用最有可能导致性能问题\n\t- 可能造成CPU瓶颈的问题: 不合理的数据库查询\n\t- 可能造成内存瓶颈的问题: 高并发、系统进程多、或者是内存泄漏\n\t- 可能会造成磁盘瓶颈的原因: 数据库频繁更新，或者查询大表\n\t- 性能瓶颈如果是内存/磁盘，最终表现出的结果就是CPU耗尽，系统负载极高，响应缓慢，甚至暂时失去响应\n\t- 物理内存不够时会使用交换内存，会带来磁盘IO和CPU的开销\n\n### 系统性能分析工具\n* vmstat\n\t- vmstat是Virtual Memory Statistics(虚拟内存统计)的缩写，可以对操作系统的内存信息、进程状态、CPU活动进行监视\n\t- 使用语法\n\t```\n\tvmstat [-V] [-n] [delay [count]]\n\t\t- -V 表示打印出版本信息\n\t\t- -n 表示在周期性循环输出时，输出的头部信息仅显示一次\n\t\t- delay 表示两次输出之间的间隔时间\n\t\t- count 表示统计的总次数，默认为1\n\n\teg:\n\t\t- vmstat 3\n\t\t- vmstat 3 5\n\t```\n* iostat\n\t- 对输入输出进行统计，主要的功能是对系统的磁盘IO进行监视\n\t- 使用语法:\n\t```\n\tiostat \n\t\t- -c 显示CPU使用情况\n\t\t- -d 显示磁盘的使用情况\n\t\t- -k 每秒以k bytes为单位显示数据\n\t\t- -x 指定要统计的磁盘设备的名称，默认为所有的磁盘设备\n\t\t- interval 指定两次统计间隔时间\n\t\t- count 指定统计的次数\n\t\n\teg:\n\t\tiostat -c 5 3\n\t\tiostat -d 5 3\n\t```\n* sar\n\t- sar命令很强大，是分析系统性能的重要工具之一，可以全面的获取系统的CPU、运行队列、磁盘IO、分页(交换区)、内存、CPU中断、网络等性能参数\n\t- 使用语法\n\t```\n\tsar \n\t\t- -a 显示系统所有资源设备(CPU、内存、磁盘)的运行状况\n\t\t- -u 显示系统所有CPU在采样时间内的负载状态\n\t\t- -p 显示当前系统中指定CPU的使用状况\n\t\t- -d 显示系统所有磁盘设备在采样时间内的使用状况\n\t\t- -r 显示系统内存在采样时间内的使用状况\n\t\t- -b 显示缓冲区在采样时间内的使用情况\n\t\t- -v 显示进程、文件、inode和锁表状态\n\t\t- -n 显示网络运行状态，参数后面可以跟DEV、EDEV、SOCK和FULL\n\t\t- interval 表示采样时间间隔\n\t\t- count 采样次数\n\n\teg:\n\t\tsar -u 3 5\n\t\tsar -d 3 5\n\t\tsar -r 3 5\n\t\tsar -n 3 5\n\t```\n* top\n\t- 在top界面按1会出现全部CPU的使用情况\n\t- 在top界面按大写的M可以按照内存使用情况进行排序\n\t- 在top界面按k可以将对应pid号的进程终止\n```\n使用语法: top \n\t* -n 设置屏幕刷新的次数\n\t* -b 将top的输出信息排版以适合输出文件的格式输出到屏幕上\neg:\n\ttop -b -n 1 | grep cpu\n```\n\n* iotop\n\n* free\n\t- free命令显示系统内存使用情况，包括物理内存、交换文件(swap)和内核缓冲区内存\n\t```\n\t使用语法: free\n\t\t- -h 显示数据人性化\n\t\t- -s 指定刷新的频率\n\teg:\n\t\tfree -h -s 3\n\t```\n\n* ps\n```\n# 根据CPU使用升序排序\nps aux --sort -pcpu | less\n\n# 按照内存使用情况升序排序\nps aux --sort -pmem | less\n``` \n* /proc目录\n``` bash\n# 查看CPU信息\ncat /proc/cpuinfo\n\n# 查看内存使用情况\ncat /proc/meminfo\n\n# /proc/stat 提供系统CPU和任务统计信息，如只需要各个CPU的信息\ncat /proc/stat | grep ^cpu\n\n# 查看调用信息\nwatch -d cat /proc/interrupts\n```\n\n### 评判标准\n* CPU\n\t- user% + sys% < 70%时状态良好\n\t- user% 表示CPU在用户模式下的时间百分比\n\t- sys%  表示CPU在系统模式下的时间百分比\n* 内存\n\t- swap in(si) = 0\n\t- swap out(so) = 0\n* 磁盘\n\t- iowait% < 20%\n\n\n\n","slug":"tools/linux_operation","published":1,"date":"2022-07-10T05:35:05.722Z","updated":"2022-07-10T05:35:05.722Z","_id":"cl427l9wa00018owzhlly80ao","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Linux基础命令\"><a href=\"#Linux基础命令\" class=\"headerlink\" title=\"Linux基础命令\"></a>Linux基础命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><ul>\n<li>查询命令的详细信息  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man <span class=\"variable\">$&#123;command&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>查询文件的详细信息  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 5 <span class=\"variable\">$&#123;filename&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"用户管理和密码管理\"><a href=\"#用户管理和密码管理\" class=\"headerlink\" title=\"用户管理和密码管理\"></a>用户管理和密码管理</h3><ul>\n<li><p>useradd </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd 用户名</span><br></pre></td></tr></table></figure></li>\n<li><p>userdel </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel 用户名</span><br></pre></td></tr></table></figure></li>\n<li><p>passwd </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改当前用户密码</span></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"comment\"># 修改其他用户密码(需要是拥有root权限的用户)</span></span><br><span class=\"line\">passwd 用户名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 750 filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 750 <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改归属人以及归属组</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> user:group filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改目录下的归属人以及归属组</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R user:group <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h3><ul>\n<li><p><font color=red>note: tcpdump抓包时默认只抓每一个数据包前68字节</font></p>\n</li>\n<li><p>常用选项</p>\n<ul>\n<li>-i 指定网卡</li>\n<li>-D 列出所有的网卡列表</li>\n<li>-C 当使用 -w 写入文件时，限制文件的最大大小，超出时会新开一个文件</li>\n<li>-s 指定数据报大小(指定为0的话会抓取全部的数据包)</li>\n<li>-w 把抓到的数据包保存到一个文件中</li>\n<li>-r 读取保存了抓到数据包的文件</li>\n<li>-v 抓包时输出包的附加信息</li>\n<li>-c 指定抓取数据包的个数</li>\n<li>-A 显示抓取包的全部内容</li>\n<li>-n 不要把地址转换为主机名(直接显示ip不要解析为域名)</li>\n<li>-nn 不要转换协议和端口号</li>\n<li>-t 不显示时间戳</li>\n</ul>\n</li>\n<li><p>过滤筛选</p>\n<ul>\n<li><p>网卡过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定抓取 eth1 网卡上的包</span></span><br><span class=\"line\">tcpdump -i eth1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定抓取所有网卡上的包</span></span><br><span class=\"line\">tcpdump -i any</span><br></pre></td></tr></table></figure></li>\n<li><p>主机过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要获取指定 IP 的数据包，不管是作为源地址还是目的地址</span></span><br><span class=\"line\">tcpdump host 192.168.3.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要指定 IP 地址是源地址或是目的地址</span></span><br><span class=\"line\">tcpdump src 192.168.1.100</span><br><span class=\"line\">tcpdump dst 192.168.1.100</span><br></pre></td></tr></table></figure></li>\n<li><p>网段过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 net 192.168</span><br><span class=\"line\">tcpdump -i eth1 src net 192.168</span><br><span class=\"line\">tcpdump -i eth1 dst net 192.168</span><br></pre></td></tr></table></figure></li>\n<li><p>端口过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump port 22</span><br><span class=\"line\">tcpdump src port 22</span><br><span class=\"line\">tcpdump dst port 22</span><br></pre></td></tr></table></figure></li>\n<li><p>端口范围过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump portrange 22-125</span><br></pre></td></tr></table></figure></li>\n<li><p>协议过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 arp</span><br><span class=\"line\">tcpdump -i eth1 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>具体案例</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap</span><br><span class=\"line\"></span><br><span class=\"line\">\t- tcp:  ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型</span><br><span class=\"line\">\t- -i eth1 : 只抓经过接口eth1的包</span><br><span class=\"line\">\t- -t : 不显示时间戳</span><br><span class=\"line\">\t- -s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包</span><br><span class=\"line\">\t- -c 100 : 只抓取100个数据包</span><br><span class=\"line\">\t- dst port ! 22 : 不抓取目标端口是22的数据包</span><br><span class=\"line\">\t- src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24</span><br><span class=\"line\">\t- -w ./target.cap : 保存成<span class=\"built_in\">cap</span>文件，方便用ethereal(即wireshark)分析</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep 端口号</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h3><ul>\n<li>控制参数<ul>\n<li>-l  指定nc处于监听模式</li>\n<li>-p  指定本机端口</li>\n<li>-s  指定发送数据的源IP地址</li>\n<li>-u  指定nc使用UDP协议，默认为TCP</li>\n<li>-v  输出交互或出错信息，新手调试时尤为有用</li>\n<li>-w  超时秒数，后面跟数字</li>\n<li>-z  表示zero，表示扫描时不发送任何数据</li>\n</ul>\n</li>\n<li>实例<ul>\n<li>监听入站连接  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># 监听tcp</span></span><br><span class=\"line\">nc -l 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听udp</span></span><br><span class=\"line\">nc -l -u 1234</span><br></pre></td></tr></table></figure></li>\n<li>连接远程系统  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接tcp</span></span><br><span class=\"line\">nc 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接udp</span></span><br><span class=\"line\">nc -u 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置连接超时(该选项只能用于客户端)</span></span><br><span class=\"line\">nc -w 10 127.0.0.1 8080</span><br></pre></td></tr></table></figure></li>\n<li>使用nc作为代理  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发往到 8080 端口的连接会自动转发到 192.168.1.200 上的 80 端口</span></span><br><span class=\"line\">ncat -l 8080 | ncat 192.168.1.200 80</span><br></pre></td></tr></table></figure></li>\n<li>使用nc拷贝文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接收端</span></span><br><span class=\"line\">nc -l  8080 &gt; file.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送端</span></span><br><span class=\"line\">nc 192.168.1.100 8080 --send-only &lt; data.txt</span><br></pre></td></tr></table></figure></li>\n<li>端口转发  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过选项 -c  进行端口转发</span></span><br><span class=\"line\"><span class=\"comment\"># 连接到 80 端口的连接都会转发到 8080 端口</span></span><br><span class=\"line\">nc -u -l 80 -c <span class=\"string\">&#x27;nc -u -l 8080&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><h3 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断主机是否开放某个端口</span></span><br><span class=\"line\">telnet 127.0.0.1 3389</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看内存占用较多的进程</span></span><br><span class=\"line\">ps aux | <span class=\"built_in\">sort</span> -k4nr | <span class=\"built_in\">head</span> -N</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># head: -N可以指定显示的行数，默认显示10行</span></span><br><span class=\"line\"><span class=\"comment\"># ps: </span></span><br><span class=\"line\">\t- a 指代所有的进程</span><br><span class=\"line\">\t- u 执行该进程的用户<span class=\"built_in\">id</span></span><br><span class=\"line\">\t- x 指代显示所有程序，不以终端来区分</span><br><span class=\"line\"><span class=\"comment\"># sort:</span></span><br><span class=\"line\">\t- k 根据指定关键词排序</span><br><span class=\"line\">\t- 4 表示按照第四列排序</span><br><span class=\"line\">\t- n 表示按照数值排序</span><br><span class=\"line\">\t- r 按照从大到小排序(排序默认从小到大)</span><br><span class=\"line\"><span class=\"comment\"># ps aux 的输出</span></span><br><span class=\"line\">\t- %MEM 在第 4 个位置，-k4 按照内存占用排序</span><br><span class=\"line\">\t- %CPU 在第三个位置，-k3 表示按照cpu占用率排序。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo perf record -F 99 -p 13204 -g -- <span class=\"built_in\">sleep</span> 30</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t* perf record \t表示记录</span><br><span class=\"line\">\t* -F \t\t\t表示记录的频率</span><br><span class=\"line\">\t* -p \t\t\t表示进程号</span><br><span class=\"line\">\t* -g \t\t\t表示记录调用栈</span><br><span class=\"line\">\t* --<span class=\"built_in\">sleep</span> \t\t表示持续记录30s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo perf report -n --stdio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h2><h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><ul>\n<li>该命令用来计算文件的字节数，字数或是行数</li>\n<li>-l 该选项用于显示行数  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc -l test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-c 该选项用于显示bytes数</li>\n<li>-w 只显示字数</li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h4 id=\"基础正则\"><a href=\"#基础正则\" class=\"headerlink\" title=\"基础正则\"></a>基础正则</h4><ul>\n<li><p>^ 过滤以…开头的行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;^lijiahao&#x27;</span> test.txt</span><br><span class=\"line\">grep <span class=\"string\">&#x27;^li&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>$ 过滤以…结尾的行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;lijihao$&#x27;</span> test.txt</span><br><span class=\"line\">grep <span class=\"string\">&#x27;m$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>^$ 过滤空行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -n <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>. 匹配任意一个字符</p>\n<ul>\n<li>note: . 不会匹配空行</li>\n<li>.转义字符 用于匹配’.’<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;\\.$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><ul>\n<li>前一个字符连续出现0次或者0次以上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># note: 本条命令会导致不包含i的行也被过滤出来，因为可以i可以出现0次</span></span><br><span class=\"line\">grep <span class=\"string\">&#x27;i*&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>.* 表示匹配所有</p>\n<ul>\n<li><ul>\n<li>匹配的贪婪性: 简单来说就是.*会尽可能多的匹配<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;.*o&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>[] 表示匹配中括号中的任意一个字符</p>\n<ul>\n<li>[abc]  匹配abc中任意一个</li>\n<li>[a-z]  匹配a-z中的任意一个</li>\n<li>[a-zA-Z0-9] 匹配大小写字母和数字中的任意一个</li>\n<li>中括号里面出现的内容会被去掉特殊含义<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;li[abc]&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>[^] 匹配括号中内容以外的内容</p>\n<ul>\n<li>[^abc] 匹配abc以外的所有内容</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"扩展正则\"><a href=\"#扩展正则\" class=\"headerlink\" title=\"扩展正则\"></a>扩展正则</h4><ul>\n<li><p><font color=red>note: 扩展正则匹配要使用egrep命令或者给grep命令添加-E选项</font></p>\n</li>\n<li><p>+ 前一个字符连续出现1次或者1次以上</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;i+&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配连续出现数字的行</span></span><br><span class=\"line\">egrep <span class=\"string\">&#x27;[0-9]+&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>| 表示或者</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;li|lijiahao&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>() 表示()中的内容表示一个整体</p>\n<ul>\n<li>可以在sed中表示反向引用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;li(|jiahao)&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>{} 表示连续出现</p>\n<ul>\n<li>o{n,m} 前面的字符o连续出现次数在n-m之间</li>\n<li>o{n} 前面的字符o连续出现n次<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;i&#123;3,4&#125;&#x27;</span> test.txt</span><br><span class=\"line\">egrep <span class=\"string\">&#x27;i&#123;3&#125;&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配身份证号 前17位位数字，第18位为数字或者X</span></span><br><span class=\"line\">egrep <span class=\"string\">&#x27;[0-9]&#123;17&#125;[0-9X]&#x27;</span> id.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>? 前一个字符出现了0次或者1次</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;go?d&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><ul>\n<li><p>-name 根据文件名查找</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name filename</span><br></pre></td></tr></table></figure></li>\n<li><p>-type 根据类型进行查找</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找类型为目录的文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> d</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><ul>\n<li>grep主要作用是过滤</li>\n<li>-n 该选项用于显示行号  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -n <span class=\"string\">&#x27;t[ae]st&#x27;</span> test.txt</span><br><span class=\"line\">grep -n <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-rl  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找dirname文件夹下所有包含abc内容的文件</span></span><br><span class=\"line\">grep -rl abc <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure></li>\n<li>-v 该选项用于反选  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不显示空行</span></span><br><span class=\"line\">grep -vn <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不显示空行和带有井号的行</span></span><br><span class=\"line\">egrep -v <span class=\"string\">&#x27;^$|#&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-E 该选项用于支持扩展正则  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E <span class=\"string\">&#x27;i+&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-o 该选项用于显示匹配过程  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o <span class=\"string\">&#x27;i&#123;2,3&#125;&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>c 统计出现了多少行 类似于wc -l  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep -c sshd</span><br></pre></td></tr></table></figure></li>\n<li>-i 该选项用于忽略大小写  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 过滤包含字母的行</span></span><br><span class=\"line\">grep -i <span class=\"string\">&#x27;[a-z]&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-w 精确匹配  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep -w <span class=\"string\">&#x27;:80&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><ul>\n<li>主要作用是替换修改文件内容</li>\n<li>命令格式:  sed 选项 ‘命令功能 修饰符’ 参数  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将test.txt 中的一个内容替换为另一个内容</span></span><br><span class=\"line\"><span class=\"comment\"># s  命令功能——替换  g 修饰符</span></span><br><span class=\"line\">sed -r <span class=\"string\">&#x27;s#olgboy#oldgirl#g&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>命令功能(增删改查)<ul>\n<li>s     替换  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将[0-9] 替换为 空</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s#[0-9]##g&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不加 g 只会匹配每行中第一个复合的元素</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s#[0-9]##&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向引用 (先保护起来，再使用)</span></span><br><span class=\"line\"><span class=\"comment\"># 在 123456 的两边加上 &lt;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 | sed -r <span class=\"string\">&#x27;s#(.*)#&lt;\\1&gt;#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调整两个单词的顺序</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> lijiahao_zhaozijin | sed -r <span class=\"string\">&#x27;s#(^.*)_(.*)#\\2_\\1#&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过反向引用来取出ens32网卡的IP地址 </span></span><br><span class=\"line\">ip a s ens32 | sed -n <span class=\"string\">&#x27;4p&#x27;</span> | sed -r <span class=\"string\">&#x27;s#(^.*t )(.*)(/.*$)#\\2#g&#x27;</span></span><br><span class=\"line\">ip a s ens32 | sed -rn <span class=\"string\">&#x27;3s#(^.*t )(.*)(/.*$)#\\2#gp&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>p     显示  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找某一行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;1p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找某个范围的行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;1,5p&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;1,$p&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;$p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找固定内容(会正则匹配//之间的内容)</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;/lijiahao/p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ! 表示取反 表示不显示空行和带井号的行</span></span><br><span class=\"line\">sed -nr <span class=\"string\">&#x27;/^$|#/!p&#x27;</span> /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找固定范围内的内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;/10:00/,/11:00/p&#x27;</span> test.txt</span><br><span class=\"line\">sed -n <span class=\"string\">&#x27;/li/,/lijiahao/p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>d     删除  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除某一行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3d&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除某个范围的行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;2,3d&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除空行和带井号的行 </span></span><br><span class=\"line\">sed -r <span class=\"string\">&#x27;/^$|#/d&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li>\n<li>cai 增加c/a/i  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># c 替换一行内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3c lijihaohaobang&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># a 在行后面一行添加内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3a lijiahaohaohba&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;$a lijiahao\\nzhaozijin\\nshengqiqi&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># i 在行的前面加入内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3i lijihaohaobang&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>选项<ul>\n<li>-n 取消默认输出  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示第三行(带有默认输出，效果是第三行打印两遍)</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3p&#x27;</span> test.txt</span><br><span class=\"line\"><span class=\"comment\"># 显示第三行(取消默认显示，效果是只会显示第三行)</span></span><br><span class=\"line\">sed -n <span class=\"string\">&#x27;3p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-r 支持扩展正则  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -nr <span class=\"string\">&#x27;/[0-9]&#123;3&#125;/p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-i 表示写入(如果不添加-i选项，只会对文件内容进行操作，不会将操作后的结果写会文件)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><ul>\n<li><p>主要作用是取列和统计操作</p>\n</li>\n<li><p>命令格式</p>\n<ul>\n<li>命令 选项 ‘条件{动作}’</li>\n</ul>\n</li>\n<li><p>执行流程分析</p>\n<ul>\n<li>读取文件前: BEGIN{print “name”}</li>\n<li>读取文件中: {print $2} 打印第二列 note: {}之前还可以加上过滤条件</li>\n<li>读取文件后: END{print “end of file”}<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, <span class=\"string\">&#x27;BEGIN&#123;print &quot;name&quot;&#125;&#123;print $2&#125;END&#123;print &quot;end of file&quot;&#125;&#x27;</span> test.txt</span><br><span class=\"line\"><span class=\"comment\"># 取出ens32网卡的IP地址 </span></span><br><span class=\"line\">ip a s ens32 | awk -F <span class=\"string\">&quot;[ /]+&quot;</span> <span class=\"string\">&#x27;NR==3&#123;print $3&#125;&#x27;</span> </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>取行</p>\n<ul>\n<li>NR     行号<ul>\n<li>NR==1             取出某一行</li>\n<li>NR&gt;=1 &amp;&amp; NR&lt;=5     取出1到5行的范围</li>\n<li>/lijiahao/         取包含某个内容的行</li>\n<li>/li/,/lijiahao/     取包含某两个内容之间的行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取出第一行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR==1&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取出第1到5行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR&gt;=1 &amp;&amp; NR&lt;=5&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取列</p>\n<ul>\n<li>$数字 取出某一列</li>\n<li>$0     取出整行内容</li>\n<li>NF     每行有多少列</li>\n<li>$NF     最后一列</li>\n<li>FS      字段分隔符</li>\n<li>OFS     输出字段分隔符<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印第二列内容</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> filename </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印最后一列内容</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> filename </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -F: 指定分隔符为: </span></span><br><span class=\"line\"><span class=\"comment\"># 取出以:为分割的最后一列和第一列</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$NF&#125;&#x27;</span> /etc/passwd | column -t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>选项</p>\n<ul>\n<li>-F     指定每列的分隔符(默认是’ ‘)</li>\n<li>-v    修改选项值  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: -v OFS=: <span class=\"string\">&#x27;&#123;print $1,$NF&#125;&#x27;</span> /etc/passwd | column -t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示磁盘分区上可以使用的磁盘空间</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示每个目录和文件的磁盘使用空间</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux性能调优\"><a href=\"#Linux性能调优\" class=\"headerlink\" title=\"Linux性能调优\"></a>Linux性能调优</h2><h3 id=\"性能问题分析\"><a href=\"#性能问题分析\" class=\"headerlink\" title=\"性能问题分析\"></a>性能问题分析</h3><ul>\n<li><p>需要性能优化的现象</p>\n<ul>\n<li>响应慢</li>\n<li>负载高</li>\n</ul>\n</li>\n<li><p>性能优化的方向</p>\n<ul>\n<li>系统问题:  例如CPU利用率、SWAP利用率或者IO过高导致的整体性能下降</li>\n<li>功能性问题:</li>\n<li>新出现问题:  例如系统做了哪些变动</li>\n<li>不规律问题:</li>\n</ul>\n</li>\n<li><p>操作系统问题</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统的几个问题之间是相互依赖的:</span><br><span class=\"line\">\t- CPU过度使用会造成大量的进程等待CPU资源，系统响应变慢，等待的进程数量会增加，导致内存增加，内存耗尽会使用虚拟内存，虚拟内存使用又会造成磁盘IO增加和CPU开销增加</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>磁盘</li>\n<li>网络</li>\n</ul>\n</li>\n<li><p>性能问题出现的原因</p>\n<ul>\n<li>应用程序设计的缺陷和数据库查询的滥用最有可能导致性能问题</li>\n<li>可能造成CPU瓶颈的问题: 不合理的数据库查询</li>\n<li>可能造成内存瓶颈的问题: 高并发、系统进程多、或者是内存泄漏</li>\n<li>可能会造成磁盘瓶颈的原因: 数据库频繁更新，或者查询大表</li>\n<li>性能瓶颈如果是内存/磁盘，最终表现出的结果就是CPU耗尽，系统负载极高，响应缓慢，甚至暂时失去响应</li>\n<li>物理内存不够时会使用交换内存，会带来磁盘IO和CPU的开销</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"系统性能分析工具\"><a href=\"#系统性能分析工具\" class=\"headerlink\" title=\"系统性能分析工具\"></a>系统性能分析工具</h3><ul>\n<li><p>vmstat</p>\n<ul>\n<li>vmstat是Virtual Memory Statistics(虚拟内存统计)的缩写，可以对操作系统的内存信息、进程状态、CPU活动进行监视</li>\n<li>使用语法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat [-V] [-n] [delay [count]]</span><br><span class=\"line\">\t- -V 表示打印出版本信息</span><br><span class=\"line\">\t- -n 表示在周期性循环输出时，输出的头部信息仅显示一次</span><br><span class=\"line\">\t- delay 表示两次输出之间的间隔时间</span><br><span class=\"line\">\t- count 表示统计的总次数，默认为1</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\t- vmstat 3</span><br><span class=\"line\">\t- vmstat 3 5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>iostat</p>\n<ul>\n<li>对输入输出进行统计，主要的功能是对系统的磁盘IO进行监视</li>\n<li>使用语法:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iostat </span><br><span class=\"line\">\t- -c 显示CPU使用情况</span><br><span class=\"line\">\t- -d 显示磁盘的使用情况</span><br><span class=\"line\">\t- -k 每秒以k bytes为单位显示数据</span><br><span class=\"line\">\t- -x 指定要统计的磁盘设备的名称，默认为所有的磁盘设备</span><br><span class=\"line\">\t- interval 指定两次统计间隔时间</span><br><span class=\"line\">\t- count 指定统计的次数</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tiostat -c 5 3</span><br><span class=\"line\">\tiostat -d 5 3</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>sar</p>\n<ul>\n<li>sar命令很强大，是分析系统性能的重要工具之一，可以全面的获取系统的CPU、运行队列、磁盘IO、分页(交换区)、内存、CPU中断、网络等性能参数</li>\n<li>使用语法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sar </span><br><span class=\"line\">\t- -a 显示系统所有资源设备(CPU、内存、磁盘)的运行状况</span><br><span class=\"line\">\t- -u 显示系统所有CPU在采样时间内的负载状态</span><br><span class=\"line\">\t- -p 显示当前系统中指定CPU的使用状况</span><br><span class=\"line\">\t- -d 显示系统所有磁盘设备在采样时间内的使用状况</span><br><span class=\"line\">\t- -r 显示系统内存在采样时间内的使用状况</span><br><span class=\"line\">\t- -b 显示缓冲区在采样时间内的使用情况</span><br><span class=\"line\">\t- -v 显示进程、文件、inode和锁表状态</span><br><span class=\"line\">\t- -n 显示网络运行状态，参数后面可以跟DEV、EDEV、SOCK和FULL</span><br><span class=\"line\">\t- interval 表示采样时间间隔</span><br><span class=\"line\">\t- count 采样次数</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tsar -u 3 5</span><br><span class=\"line\">\tsar -d 3 5</span><br><span class=\"line\">\tsar -r 3 5</span><br><span class=\"line\">\tsar -n 3 5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>top</p>\n<ul>\n<li>在top界面按1会出现全部CPU的使用情况</li>\n<li>在top界面按大写的M可以按照内存使用情况进行排序</li>\n<li>在top界面按k可以将对应pid号的进程终止<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用语法: top </span><br><span class=\"line\">\t* -n 设置屏幕刷新的次数</span><br><span class=\"line\">\t* -b 将top的输出信息排版以适合输出文件的格式输出到屏幕上</span><br><span class=\"line\">eg:</span><br><span class=\"line\">\ttop -b -n 1 | grep cpu</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>iotop</p>\n</li>\n<li><p>free</p>\n<ul>\n<li>free命令显示系统内存使用情况，包括物理内存、交换文件(swap)和内核缓冲区内存<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用语法: free</span><br><span class=\"line\">\t- -h 显示数据人性化</span><br><span class=\"line\">\t- -s 指定刷新的频率</span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tfree -h -s 3</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>ps</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据CPU使用升序排序</span><br><span class=\"line\">ps aux --sort -pcpu | less</span><br><span class=\"line\"></span><br><span class=\"line\"># 按照内存使用情况升序排序</span><br><span class=\"line\">ps aux --sort -pmem | less</span><br></pre></td></tr></table></figure></li>\n<li><p>/proc目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看CPU信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存使用情况</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/meminfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /proc/stat 提供系统CPU和任务统计信息，如只需要各个CPU的信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/stat | grep ^cpu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看调用信息</span></span><br><span class=\"line\">watch -d <span class=\"built_in\">cat</span> /proc/interrupts</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"评判标准\"><a href=\"#评判标准\" class=\"headerlink\" title=\"评判标准\"></a>评判标准</h3><ul>\n<li>CPU<ul>\n<li>user% + sys% &lt; 70%时状态良好</li>\n<li>user% 表示CPU在用户模式下的时间百分比</li>\n<li>sys%  表示CPU在系统模式下的时间百分比</li>\n</ul>\n</li>\n<li>内存<ul>\n<li>swap in(si) = 0</li>\n<li>swap out(so) = 0</li>\n</ul>\n</li>\n<li>磁盘<ul>\n<li>iowait% &lt; 20%</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux基础命令\"><a href=\"#Linux基础命令\" class=\"headerlink\" title=\"Linux基础命令\"></a>Linux基础命令</h2><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><ul>\n<li>查询命令的详细信息  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man <span class=\"variable\">$&#123;command&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>查询文件的详细信息  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 5 <span class=\"variable\">$&#123;filename&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"用户管理和密码管理\"><a href=\"#用户管理和密码管理\" class=\"headerlink\" title=\"用户管理和密码管理\"></a>用户管理和密码管理</h3><ul>\n<li><p>useradd </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd 用户名</span><br></pre></td></tr></table></figure></li>\n<li><p>userdel </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel 用户名</span><br></pre></td></tr></table></figure></li>\n<li><p>passwd </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改当前用户密码</span></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"comment\"># 修改其他用户密码(需要是拥有root权限的用户)</span></span><br><span class=\"line\">passwd 用户名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 750 filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 750 <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改归属人以及归属组</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> user:group filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改目录下的归属人以及归属组</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R user:group <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h3><ul>\n<li><p><font color=red>note: tcpdump抓包时默认只抓每一个数据包前68字节</font></p>\n</li>\n<li><p>常用选项</p>\n<ul>\n<li>-i 指定网卡</li>\n<li>-D 列出所有的网卡列表</li>\n<li>-C 当使用 -w 写入文件时，限制文件的最大大小，超出时会新开一个文件</li>\n<li>-s 指定数据报大小(指定为0的话会抓取全部的数据包)</li>\n<li>-w 把抓到的数据包保存到一个文件中</li>\n<li>-r 读取保存了抓到数据包的文件</li>\n<li>-v 抓包时输出包的附加信息</li>\n<li>-c 指定抓取数据包的个数</li>\n<li>-A 显示抓取包的全部内容</li>\n<li>-n 不要把地址转换为主机名(直接显示ip不要解析为域名)</li>\n<li>-nn 不要转换协议和端口号</li>\n<li>-t 不显示时间戳</li>\n</ul>\n</li>\n<li><p>过滤筛选</p>\n<ul>\n<li><p>网卡过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定抓取 eth1 网卡上的包</span></span><br><span class=\"line\">tcpdump -i eth1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定抓取所有网卡上的包</span></span><br><span class=\"line\">tcpdump -i any</span><br></pre></td></tr></table></figure></li>\n<li><p>主机过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要获取指定 IP 的数据包，不管是作为源地址还是目的地址</span></span><br><span class=\"line\">tcpdump host 192.168.3.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要指定 IP 地址是源地址或是目的地址</span></span><br><span class=\"line\">tcpdump src 192.168.1.100</span><br><span class=\"line\">tcpdump dst 192.168.1.100</span><br></pre></td></tr></table></figure></li>\n<li><p>网段过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 net 192.168</span><br><span class=\"line\">tcpdump -i eth1 src net 192.168</span><br><span class=\"line\">tcpdump -i eth1 dst net 192.168</span><br></pre></td></tr></table></figure></li>\n<li><p>端口过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump port 22</span><br><span class=\"line\">tcpdump src port 22</span><br><span class=\"line\">tcpdump dst port 22</span><br></pre></td></tr></table></figure></li>\n<li><p>端口范围过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump portrange 22-125</span><br></pre></td></tr></table></figure></li>\n<li><p>协议过滤</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth1 arp</span><br><span class=\"line\">tcpdump -i eth1 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>具体案例</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap</span><br><span class=\"line\"></span><br><span class=\"line\">\t- tcp:  ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型</span><br><span class=\"line\">\t- -i eth1 : 只抓经过接口eth1的包</span><br><span class=\"line\">\t- -t : 不显示时间戳</span><br><span class=\"line\">\t- -s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包</span><br><span class=\"line\">\t- -c 100 : 只抓取100个数据包</span><br><span class=\"line\">\t- dst port ! 22 : 不抓取目标端口是22的数据包</span><br><span class=\"line\">\t- src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24</span><br><span class=\"line\">\t- -w ./target.cap : 保存成<span class=\"built_in\">cap</span>文件，方便用ethereal(即wireshark)分析</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep 端口号</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h3><ul>\n<li>控制参数<ul>\n<li>-l  指定nc处于监听模式</li>\n<li>-p  指定本机端口</li>\n<li>-s  指定发送数据的源IP地址</li>\n<li>-u  指定nc使用UDP协议，默认为TCP</li>\n<li>-v  输出交互或出错信息，新手调试时尤为有用</li>\n<li>-w  超时秒数，后面跟数字</li>\n<li>-z  表示zero，表示扫描时不发送任何数据</li>\n</ul>\n</li>\n<li>实例<ul>\n<li>监听入站连接  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># 监听tcp</span></span><br><span class=\"line\">nc -l 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听udp</span></span><br><span class=\"line\">nc -l -u 1234</span><br></pre></td></tr></table></figure></li>\n<li>连接远程系统  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接tcp</span></span><br><span class=\"line\">nc 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接udp</span></span><br><span class=\"line\">nc -u 127.0.0.1 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置连接超时(该选项只能用于客户端)</span></span><br><span class=\"line\">nc -w 10 127.0.0.1 8080</span><br></pre></td></tr></table></figure></li>\n<li>使用nc作为代理  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发往到 8080 端口的连接会自动转发到 192.168.1.200 上的 80 端口</span></span><br><span class=\"line\">ncat -l 8080 | ncat 192.168.1.200 80</span><br></pre></td></tr></table></figure></li>\n<li>使用nc拷贝文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接收端</span></span><br><span class=\"line\">nc -l  8080 &gt; file.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送端</span></span><br><span class=\"line\">nc 192.168.1.100 8080 --send-only &lt; data.txt</span><br></pre></td></tr></table></figure></li>\n<li>端口转发  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过选项 -c  进行端口转发</span></span><br><span class=\"line\"><span class=\"comment\"># 连接到 80 端口的连接都会转发到 8080 端口</span></span><br><span class=\"line\">nc -u -l 80 -c <span class=\"string\">&#x27;nc -u -l 8080&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><h3 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断主机是否开放某个端口</span></span><br><span class=\"line\">telnet 127.0.0.1 3389</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看内存占用较多的进程</span></span><br><span class=\"line\">ps aux | <span class=\"built_in\">sort</span> -k4nr | <span class=\"built_in\">head</span> -N</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># head: -N可以指定显示的行数，默认显示10行</span></span><br><span class=\"line\"><span class=\"comment\"># ps: </span></span><br><span class=\"line\">\t- a 指代所有的进程</span><br><span class=\"line\">\t- u 执行该进程的用户<span class=\"built_in\">id</span></span><br><span class=\"line\">\t- x 指代显示所有程序，不以终端来区分</span><br><span class=\"line\"><span class=\"comment\"># sort:</span></span><br><span class=\"line\">\t- k 根据指定关键词排序</span><br><span class=\"line\">\t- 4 表示按照第四列排序</span><br><span class=\"line\">\t- n 表示按照数值排序</span><br><span class=\"line\">\t- r 按照从大到小排序(排序默认从小到大)</span><br><span class=\"line\"><span class=\"comment\"># ps aux 的输出</span></span><br><span class=\"line\">\t- %MEM 在第 4 个位置，-k4 按照内存占用排序</span><br><span class=\"line\">\t- %CPU 在第三个位置，-k3 表示按照cpu占用率排序。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo perf record -F 99 -p 13204 -g -- <span class=\"built_in\">sleep</span> 30</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t* perf record \t表示记录</span><br><span class=\"line\">\t* -F \t\t\t表示记录的频率</span><br><span class=\"line\">\t* -p \t\t\t表示进程号</span><br><span class=\"line\">\t* -g \t\t\t表示记录调用栈</span><br><span class=\"line\">\t* --<span class=\"built_in\">sleep</span> \t\t表示持续记录30s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo perf report -n --stdio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h2><h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><ul>\n<li>该命令用来计算文件的字节数，字数或是行数</li>\n<li>-l 该选项用于显示行数  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc -l test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-c 该选项用于显示bytes数</li>\n<li>-w 只显示字数</li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h4 id=\"基础正则\"><a href=\"#基础正则\" class=\"headerlink\" title=\"基础正则\"></a>基础正则</h4><ul>\n<li><p>^ 过滤以…开头的行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;^lijiahao&#x27;</span> test.txt</span><br><span class=\"line\">grep <span class=\"string\">&#x27;^li&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>$ 过滤以…结尾的行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;lijihao$&#x27;</span> test.txt</span><br><span class=\"line\">grep <span class=\"string\">&#x27;m$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>^$ 过滤空行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -n <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>. 匹配任意一个字符</p>\n<ul>\n<li>note: . 不会匹配空行</li>\n<li>.转义字符 用于匹配’.’<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;\\.$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><ul>\n<li>前一个字符连续出现0次或者0次以上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># note: 本条命令会导致不包含i的行也被过滤出来，因为可以i可以出现0次</span></span><br><span class=\"line\">grep <span class=\"string\">&#x27;i*&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>.* 表示匹配所有</p>\n<ul>\n<li><ul>\n<li>匹配的贪婪性: 简单来说就是.*会尽可能多的匹配<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;.*o&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>[] 表示匹配中括号中的任意一个字符</p>\n<ul>\n<li>[abc]  匹配abc中任意一个</li>\n<li>[a-z]  匹配a-z中的任意一个</li>\n<li>[a-zA-Z0-9] 匹配大小写字母和数字中的任意一个</li>\n<li>中括号里面出现的内容会被去掉特殊含义<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&#x27;li[abc]&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>[^] 匹配括号中内容以外的内容</p>\n<ul>\n<li>[^abc] 匹配abc以外的所有内容</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"扩展正则\"><a href=\"#扩展正则\" class=\"headerlink\" title=\"扩展正则\"></a>扩展正则</h4><ul>\n<li><p><font color=red>note: 扩展正则匹配要使用egrep命令或者给grep命令添加-E选项</font></p>\n</li>\n<li><p>+ 前一个字符连续出现1次或者1次以上</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;i+&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配连续出现数字的行</span></span><br><span class=\"line\">egrep <span class=\"string\">&#x27;[0-9]+&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>| 表示或者</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;li|lijiahao&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>() 表示()中的内容表示一个整体</p>\n<ul>\n<li>可以在sed中表示反向引用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;li(|jiahao)&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>{} 表示连续出现</p>\n<ul>\n<li>o{n,m} 前面的字符o连续出现次数在n-m之间</li>\n<li>o{n} 前面的字符o连续出现n次<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;i&#123;3,4&#125;&#x27;</span> test.txt</span><br><span class=\"line\">egrep <span class=\"string\">&#x27;i&#123;3&#125;&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配身份证号 前17位位数字，第18位为数字或者X</span></span><br><span class=\"line\">egrep <span class=\"string\">&#x27;[0-9]&#123;17&#125;[0-9X]&#x27;</span> id.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>? 前一个字符出现了0次或者1次</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep <span class=\"string\">&#x27;go?d&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><ul>\n<li><p>-name 根据文件名查找</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name filename</span><br></pre></td></tr></table></figure></li>\n<li><p>-type 根据类型进行查找</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找类型为目录的文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> d</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><ul>\n<li>grep主要作用是过滤</li>\n<li>-n 该选项用于显示行号  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -n <span class=\"string\">&#x27;t[ae]st&#x27;</span> test.txt</span><br><span class=\"line\">grep -n <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-rl  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找dirname文件夹下所有包含abc内容的文件</span></span><br><span class=\"line\">grep -rl abc <span class=\"built_in\">dirname</span></span><br></pre></td></tr></table></figure></li>\n<li>-v 该选项用于反选  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不显示空行</span></span><br><span class=\"line\">grep -vn <span class=\"string\">&#x27;^$&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不显示空行和带有井号的行</span></span><br><span class=\"line\">egrep -v <span class=\"string\">&#x27;^$|#&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-E 该选项用于支持扩展正则  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E <span class=\"string\">&#x27;i+&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-o 该选项用于显示匹配过程  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o <span class=\"string\">&#x27;i&#123;2,3&#125;&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>c 统计出现了多少行 类似于wc -l  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep -c sshd</span><br></pre></td></tr></table></figure></li>\n<li>-i 该选项用于忽略大小写  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 过滤包含字母的行</span></span><br><span class=\"line\">grep -i <span class=\"string\">&#x27;[a-z]&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-w 精确匹配  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep -w <span class=\"string\">&#x27;:80&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><ul>\n<li>主要作用是替换修改文件内容</li>\n<li>命令格式:  sed 选项 ‘命令功能 修饰符’ 参数  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将test.txt 中的一个内容替换为另一个内容</span></span><br><span class=\"line\"><span class=\"comment\"># s  命令功能——替换  g 修饰符</span></span><br><span class=\"line\">sed -r <span class=\"string\">&#x27;s#olgboy#oldgirl#g&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>命令功能(增删改查)<ul>\n<li>s     替换  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将[0-9] 替换为 空</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s#[0-9]##g&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不加 g 只会匹配每行中第一个复合的元素</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s#[0-9]##&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向引用 (先保护起来，再使用)</span></span><br><span class=\"line\"><span class=\"comment\"># 在 123456 的两边加上 &lt;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 | sed -r <span class=\"string\">&#x27;s#(.*)#&lt;\\1&gt;#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调整两个单词的顺序</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> lijiahao_zhaozijin | sed -r <span class=\"string\">&#x27;s#(^.*)_(.*)#\\2_\\1#&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过反向引用来取出ens32网卡的IP地址 </span></span><br><span class=\"line\">ip a s ens32 | sed -n <span class=\"string\">&#x27;4p&#x27;</span> | sed -r <span class=\"string\">&#x27;s#(^.*t )(.*)(/.*$)#\\2#g&#x27;</span></span><br><span class=\"line\">ip a s ens32 | sed -rn <span class=\"string\">&#x27;3s#(^.*t )(.*)(/.*$)#\\2#gp&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>p     显示  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找某一行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;1p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找某个范围的行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;1,5p&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;1,$p&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;$p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找固定内容(会正则匹配//之间的内容)</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;/lijiahao/p&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ! 表示取反 表示不显示空行和带井号的行</span></span><br><span class=\"line\">sed -nr <span class=\"string\">&#x27;/^$|#/!p&#x27;</span> /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找固定范围内的内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;/10:00/,/11:00/p&#x27;</span> test.txt</span><br><span class=\"line\">sed -n <span class=\"string\">&#x27;/li/,/lijiahao/p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>d     删除  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除某一行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3d&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除某个范围的行</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;2,3d&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除空行和带井号的行 </span></span><br><span class=\"line\">sed -r <span class=\"string\">&#x27;/^$|#/d&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li>\n<li>cai 增加c/a/i  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># c 替换一行内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3c lijihaohaobang&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># a 在行后面一行添加内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3a lijiahaohaohba&#x27;</span> test.txt</span><br><span class=\"line\">sed <span class=\"string\">&#x27;$a lijiahao\\nzhaozijin\\nshengqiqi&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># i 在行的前面加入内容</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3i lijihaohaobang&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>选项<ul>\n<li>-n 取消默认输出  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示第三行(带有默认输出，效果是第三行打印两遍)</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3p&#x27;</span> test.txt</span><br><span class=\"line\"><span class=\"comment\"># 显示第三行(取消默认显示，效果是只会显示第三行)</span></span><br><span class=\"line\">sed -n <span class=\"string\">&#x27;3p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-r 支持扩展正则  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -nr <span class=\"string\">&#x27;/[0-9]&#123;3&#125;/p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n<li>-i 表示写入(如果不添加-i选项，只会对文件内容进行操作，不会将操作后的结果写会文件)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><ul>\n<li><p>主要作用是取列和统计操作</p>\n</li>\n<li><p>命令格式</p>\n<ul>\n<li>命令 选项 ‘条件{动作}’</li>\n</ul>\n</li>\n<li><p>执行流程分析</p>\n<ul>\n<li>读取文件前: BEGIN{print “name”}</li>\n<li>读取文件中: {print $2} 打印第二列 note: {}之前还可以加上过滤条件</li>\n<li>读取文件后: END{print “end of file”}<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, <span class=\"string\">&#x27;BEGIN&#123;print &quot;name&quot;&#125;&#123;print $2&#125;END&#123;print &quot;end of file&quot;&#125;&#x27;</span> test.txt</span><br><span class=\"line\"><span class=\"comment\"># 取出ens32网卡的IP地址 </span></span><br><span class=\"line\">ip a s ens32 | awk -F <span class=\"string\">&quot;[ /]+&quot;</span> <span class=\"string\">&#x27;NR==3&#123;print $3&#125;&#x27;</span> </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>取行</p>\n<ul>\n<li>NR     行号<ul>\n<li>NR==1             取出某一行</li>\n<li>NR&gt;=1 &amp;&amp; NR&lt;=5     取出1到5行的范围</li>\n<li>/lijiahao/         取包含某个内容的行</li>\n<li>/li/,/lijiahao/     取包含某两个内容之间的行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取出第一行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR==1&#x27;</span> test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取出第1到5行</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;NR&gt;=1 &amp;&amp; NR&lt;=5&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取列</p>\n<ul>\n<li>$数字 取出某一列</li>\n<li>$0     取出整行内容</li>\n<li>NF     每行有多少列</li>\n<li>$NF     最后一列</li>\n<li>FS      字段分隔符</li>\n<li>OFS     输出字段分隔符<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印第二列内容</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> filename </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印最后一列内容</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> filename </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -F: 指定分隔符为: </span></span><br><span class=\"line\"><span class=\"comment\"># 取出以:为分割的最后一列和第一列</span></span><br><span class=\"line\">awk -F: <span class=\"string\">&#x27;&#123;print $1,$NF&#125;&#x27;</span> /etc/passwd | column -t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>选项</p>\n<ul>\n<li>-F     指定每列的分隔符(默认是’ ‘)</li>\n<li>-v    修改选项值  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: -v OFS=: <span class=\"string\">&#x27;&#123;print $1,$NF&#125;&#x27;</span> /etc/passwd | column -t</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示磁盘分区上可以使用的磁盘空间</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br></pre></td></tr></table></figure>\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示每个目录和文件的磁盘使用空间</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux性能调优\"><a href=\"#Linux性能调优\" class=\"headerlink\" title=\"Linux性能调优\"></a>Linux性能调优</h2><h3 id=\"性能问题分析\"><a href=\"#性能问题分析\" class=\"headerlink\" title=\"性能问题分析\"></a>性能问题分析</h3><ul>\n<li><p>需要性能优化的现象</p>\n<ul>\n<li>响应慢</li>\n<li>负载高</li>\n</ul>\n</li>\n<li><p>性能优化的方向</p>\n<ul>\n<li>系统问题:  例如CPU利用率、SWAP利用率或者IO过高导致的整体性能下降</li>\n<li>功能性问题:</li>\n<li>新出现问题:  例如系统做了哪些变动</li>\n<li>不规律问题:</li>\n</ul>\n</li>\n<li><p>操作系统问题</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统的几个问题之间是相互依赖的:</span><br><span class=\"line\">\t- CPU过度使用会造成大量的进程等待CPU资源，系统响应变慢，等待的进程数量会增加，导致内存增加，内存耗尽会使用虚拟内存，虚拟内存使用又会造成磁盘IO增加和CPU开销增加</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>磁盘</li>\n<li>网络</li>\n</ul>\n</li>\n<li><p>性能问题出现的原因</p>\n<ul>\n<li>应用程序设计的缺陷和数据库查询的滥用最有可能导致性能问题</li>\n<li>可能造成CPU瓶颈的问题: 不合理的数据库查询</li>\n<li>可能造成内存瓶颈的问题: 高并发、系统进程多、或者是内存泄漏</li>\n<li>可能会造成磁盘瓶颈的原因: 数据库频繁更新，或者查询大表</li>\n<li>性能瓶颈如果是内存/磁盘，最终表现出的结果就是CPU耗尽，系统负载极高，响应缓慢，甚至暂时失去响应</li>\n<li>物理内存不够时会使用交换内存，会带来磁盘IO和CPU的开销</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"系统性能分析工具\"><a href=\"#系统性能分析工具\" class=\"headerlink\" title=\"系统性能分析工具\"></a>系统性能分析工具</h3><ul>\n<li><p>vmstat</p>\n<ul>\n<li>vmstat是Virtual Memory Statistics(虚拟内存统计)的缩写，可以对操作系统的内存信息、进程状态、CPU活动进行监视</li>\n<li>使用语法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat [-V] [-n] [delay [count]]</span><br><span class=\"line\">\t- -V 表示打印出版本信息</span><br><span class=\"line\">\t- -n 表示在周期性循环输出时，输出的头部信息仅显示一次</span><br><span class=\"line\">\t- delay 表示两次输出之间的间隔时间</span><br><span class=\"line\">\t- count 表示统计的总次数，默认为1</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\t- vmstat 3</span><br><span class=\"line\">\t- vmstat 3 5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>iostat</p>\n<ul>\n<li>对输入输出进行统计，主要的功能是对系统的磁盘IO进行监视</li>\n<li>使用语法:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iostat </span><br><span class=\"line\">\t- -c 显示CPU使用情况</span><br><span class=\"line\">\t- -d 显示磁盘的使用情况</span><br><span class=\"line\">\t- -k 每秒以k bytes为单位显示数据</span><br><span class=\"line\">\t- -x 指定要统计的磁盘设备的名称，默认为所有的磁盘设备</span><br><span class=\"line\">\t- interval 指定两次统计间隔时间</span><br><span class=\"line\">\t- count 指定统计的次数</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tiostat -c 5 3</span><br><span class=\"line\">\tiostat -d 5 3</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>sar</p>\n<ul>\n<li>sar命令很强大，是分析系统性能的重要工具之一，可以全面的获取系统的CPU、运行队列、磁盘IO、分页(交换区)、内存、CPU中断、网络等性能参数</li>\n<li>使用语法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sar </span><br><span class=\"line\">\t- -a 显示系统所有资源设备(CPU、内存、磁盘)的运行状况</span><br><span class=\"line\">\t- -u 显示系统所有CPU在采样时间内的负载状态</span><br><span class=\"line\">\t- -p 显示当前系统中指定CPU的使用状况</span><br><span class=\"line\">\t- -d 显示系统所有磁盘设备在采样时间内的使用状况</span><br><span class=\"line\">\t- -r 显示系统内存在采样时间内的使用状况</span><br><span class=\"line\">\t- -b 显示缓冲区在采样时间内的使用情况</span><br><span class=\"line\">\t- -v 显示进程、文件、inode和锁表状态</span><br><span class=\"line\">\t- -n 显示网络运行状态，参数后面可以跟DEV、EDEV、SOCK和FULL</span><br><span class=\"line\">\t- interval 表示采样时间间隔</span><br><span class=\"line\">\t- count 采样次数</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tsar -u 3 5</span><br><span class=\"line\">\tsar -d 3 5</span><br><span class=\"line\">\tsar -r 3 5</span><br><span class=\"line\">\tsar -n 3 5</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>top</p>\n<ul>\n<li>在top界面按1会出现全部CPU的使用情况</li>\n<li>在top界面按大写的M可以按照内存使用情况进行排序</li>\n<li>在top界面按k可以将对应pid号的进程终止<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用语法: top </span><br><span class=\"line\">\t* -n 设置屏幕刷新的次数</span><br><span class=\"line\">\t* -b 将top的输出信息排版以适合输出文件的格式输出到屏幕上</span><br><span class=\"line\">eg:</span><br><span class=\"line\">\ttop -b -n 1 | grep cpu</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>iotop</p>\n</li>\n<li><p>free</p>\n<ul>\n<li>free命令显示系统内存使用情况，包括物理内存、交换文件(swap)和内核缓冲区内存<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用语法: free</span><br><span class=\"line\">\t- -h 显示数据人性化</span><br><span class=\"line\">\t- -s 指定刷新的频率</span><br><span class=\"line\">eg:</span><br><span class=\"line\">\tfree -h -s 3</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>ps</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 根据CPU使用升序排序</span><br><span class=\"line\">ps aux --sort -pcpu | less</span><br><span class=\"line\"></span><br><span class=\"line\"># 按照内存使用情况升序排序</span><br><span class=\"line\">ps aux --sort -pmem | less</span><br></pre></td></tr></table></figure></li>\n<li><p>/proc目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看CPU信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存使用情况</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/meminfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /proc/stat 提供系统CPU和任务统计信息，如只需要各个CPU的信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/stat | grep ^cpu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看调用信息</span></span><br><span class=\"line\">watch -d <span class=\"built_in\">cat</span> /proc/interrupts</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"评判标准\"><a href=\"#评判标准\" class=\"headerlink\" title=\"评判标准\"></a>评判标准</h3><ul>\n<li>CPU<ul>\n<li>user% + sys% &lt; 70%时状态良好</li>\n<li>user% 表示CPU在用户模式下的时间百分比</li>\n<li>sys%  表示CPU在系统模式下的时间百分比</li>\n</ul>\n</li>\n<li>内存<ul>\n<li>swap in(si) = 0</li>\n<li>swap out(so) = 0</li>\n</ul>\n</li>\n<li>磁盘<ul>\n<li>iowait% &lt; 20%</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Golang 微服务","_content":"\n## 微服务\n\n* 优点:\n\t- 职责单一\n\t- 轻量级通信\n\t- 独立性\n\t- 迭代开发\n* 缺点:\n\t- 运维成本高\n\t- 分布式复杂程度高\n\t- 接口成本高\n\t- 重复性劳动\n\t- 业务分离困难\n\n## rpc使用步骤\n\n* 服务端\n\t1. 注册rpc服务对象\n\t\t``` go\n\t\trpc.RegisterName(\"服务名\", 回调对象)\n\n\t\t* 回调对象绑定的方法需要满足如下条件:\n\t\t\t- 方法必须是可导出的\n\t\t\t- 方法必须有两个参数，且第二个参数必须是指针(传出参数)\n\t\t\t- 方法只有一个 error 类型的返回值\n\t\t```\n\t2. 创建监听器\n\t\t``` go\n\t\tlistener, err := net.Listen()\n\t\t```\n\t3. 建立连接\n\t\t``` go\n\t\tconn, err := listener.Accept()\n\t\t```\n\t4. 将连接与rpc服务绑定\n\t\t``` go\n\t\trpc.ServeConn(conn)\n\t\t```\n\n* 客户端 \n\t1. 使用rpc连接服务器\n\t\t``` go\n\t\tconn, err := rpc.Dial()\n\t\t```\n\t2. 调用远程函数\n\t\t``` go\n\t\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t\t```\n\n## protobuf环境搭建\n\n* 安装protobuf编译工具\n\t``` bash\n\t# 下载protobuf\n\tgit clone https://github.com/protocolbuffers/protobuf.git\n\t# 安装依赖库\n\tsudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y\n\t# 进入目录\n\tcd protobuf/\n\t# 自动生成configure配置文件：\n\t./autogen.sh\n\t# 配置环境：\n\t./configure\n\t# 编译源代码(要有耐心！)：\n\tmake\n\t# 安装\n\tsudo make install\n\t# 刷新共享库 （很重要的一步啊）\n\tsudo ldconfig\n\t# 成功后需要使用命令测试\n\tprotoc -h\n\t```\n\n* 安装go 插件\n\t``` bash\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u google.golang.org/protobuf/proto\n\t```\n\n## protobuf使用步骤\n\n* 书写.proto文件\n\n\t`pb/Person.proto: `\n\n\t``` protobuf\n\tsyntax = \"proto3\";\n\tpackage pb;\n\n\timport \"google/protobuf/timestamp.proto\";\n\n\toption go_package = \"./;pb\";\n\n\tmessage Person {\n\t\tstring name = 1;\n\t\tint32 id = 2;  // Unique ID number for this person.\n\t\tstring email = 3;\n\n\t\tenum PhoneType {\n\t\t  MOBILE = 0;\n\t\t  HOME = 1;\n\t\t  WORK = 2;\n\t\t}\n\n\t\tmessage PhoneNumber {\n\t\t  string number = 1;\n\t\t  PhoneType type = 2;\n\t\t}\n\n\t\trepeated PhoneNumber phones = 4;\n\n\t\tgoogle.protobuf.Timestamp last_updated = 5;\n\t  }\n\n\t  // Our address book file is just one of these.\n\t  message AddressBook {\n\t\trepeated Person people = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t``` bash\n\tprotoc *.proto --go_out=.\n\t```\n\n* 使用\n\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"fmt\"\n\n\t\t\"google.golang.org/protobuf/proto\"\n\t)\n\n\tfunc main() {\n\t\t// 定义一个Person结构体对象\n\t\tperson := &pb.Person{\n\t\t\tName:  \"lijiahao\",\n\t\t\tId:    0,\n\t\t\tEmail: \"18702748294@163.com\",\n\t\t\tPhones: []*pb.Person_PhoneNumber{\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"15136588270\",\n\t\t\t\t\tType: pb.Person_MOBILE,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"190019393\",\n\t\t\t\t\tType: pb.Person_HOME,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"17182920303\",\n\t\t\t\t\tType: pb.Person_WORK,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// 将Person对象进行序列化\n\t\tdata, err := proto.Marshal(person)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"proto marshal error: \", err)\n\t\t}\n\n\t\t// 反序列化\n\t\tnewData := &pb.Person{}\n\t\terr = proto.Unmarshal(data, newData)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unmarshal error: \", err)\n\t\t}\n\t\tfmt.Println(newData)\n\t}\n\t```\n\n## rpc封装\n* 服务端使用步骤\n\t- 注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)\n\t``` go\n\trpc.RegisterName(\"服务名\", 回调对象)\n\t```\n\n\t- 创建监听器\n\t``` go\n\tlistener, err := net.Listen()\n\t```\n\n\t- 建立连接\n\t``` go\n\tconn, err := listener.Accept()\n\t```\n\n\t- 给连接绑定Rpc服务\n\t``` go\n\trpc.ServeConn(conn)\n\t```\n\n* 客户端使用步骤\n\t- 使用Rpc连接服务器\n\t``` go\n\tconn, err := rpc.Dial()\n\t```\n\n\t- 调用远程函数\n\t``` go\n\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t```\n\n* 客户端和服务端封装\n\t``` go\n\tpackage design\n\n\timport (\n\t\t\"net/rpc\"\n\t\t\"net/rpc/jsonrpc\"\n\t)\n\n\t// 服务端封装\n\t/*\n\t\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法\n\t\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数\n\t*/\n\ttype MyInterface interface {\n\t\tHelloWorld(string, *string) error\n\t}\n\n\tfunc RegisterService(i MyInterface) error {\n\t\treturn rpc.RegisterName(\"hello\", i)\n\t}\n\n\t// 客户端封装\n\t/*\n\t\t* 封装连接远程服务器和调用远程函数过程\n\t\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法\n\t\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程\n\t*/\n\ttype MyClient struct {\n\t\tc *rpc.Client\n\t}\n\n\tfunc InitClient(addr string) *MyClient {\n\t\tconn, _ := jsonrpc.Dial(\"tcp\", addr)\n\n\t\treturn &MyClient{c:conn}\n\t}\n\n\tfunc (m *MyClient)HelloWorld(a string, b *string) error {\n\t\treturn m.c.Call(\"hello.HelloWorld\", a, b)\n\t}\n\t```\n\n\n## grpc 使用步骤\n\n* 安装grpc go插件\n\t``` bash\n\tgo get -u -v google.golang.org/grpc\n\t```\n\n* 编写.proto文件\n\n\t`pb/hello_grpc.proto`\n\n\t``` protobuf\n\t// 指定protobuf版本号\n\tsyntax = \"proto3\";\n\n\tpackage pb;\n\n\toption go_package = \"./;pb\";\n\n\t// 定义服务\n\tservice Greeter {\n\t  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\t}\n\n\tmessage HelloRequest {\n\t  string name = 1;\n\t}\n\n\tmessage HelloReply {\n\t  string message = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t- 安装go语言插件\n\t\t``` bash\n\t\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\t\t```\n\t- 编译.proto文件\n\t\t``` bash\n\t\tprotoc *.proto --go_out=plugins=grpc:./\n\t\t* --go_out=plugins=grpc: 后面指定生成go代码存放的目录\n\t\t```\n\n\n* 编写服务端代码\n\t`server/server.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"google.golang.org/grpc\"\n\t\t\"google.golang.org/grpc/reflection\"\n\t\t\"net\"\n\t)\n\n\ttype server struct {}\n\n\t// 给对象绑定方法，实现接口\n\tfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\t\treturn &pb.HelloReply{Message: \"hello \" + in.Name}, nil\n\t}\n\n\tfunc main() {\n\t\t// 监听本地端口\n\t\tlis, err := net.Listen(\"tcp\", \":8080\")\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"监听端口失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// 创建gRPC服务器\n\t\ts := grpc.NewServer()\n\n\t\t// 注册服务\n\t\tpb.RegisterGreeterServer(s, &server{})\n\n\t\treflection.Register(s)\n\n\t\t// 开启服务\n\t\terr = s.Serve(lis)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"开启服务失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t}\n\t```\n\n* 编写客户端代码\n\t`client/client.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"fmt\"\n\t\t\"google.golang.org/grpc\"\n\t)\n\n\tfunc main(){\n\t\t// 连接服务器\n\t\tconn, err := grpc.Dial(\":8080\", grpc.WithInsecure())\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"连接服务端失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t// 新建一个客户端\n\t\tc := pb.NewGreeterClient(conn)\n\n\t\t// 调用服务端函数\n\t\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: \"horika\"})\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"调用服务端代码失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(\"调用成功: %s\", r.Message)\n\t}\n\t```\n\n## rpcx\n\n* [rpcx技术文档](https://doc.rpcx.io/)\n\n* 安装`rpcx`\n\n``` bash\ngo get -u -v -tags \"reuseport quic kcp zookeeper etcd consul ping\" github.com/smallnest/rpcx/...\n```\n\n`服务端代码:`\n\n`server/server.go`\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/smallnest/rpcx/server\"\n\t\"github.com/smallnest/rpcx/serverplugin\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr      = flag.String(\"addr\", \"localhost:8972\", \"server address\")\n\tetcdServers = []string{\"127.0.0.1:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t//1、new一个服务struct\n\ts := server.NewServer()\n\t//2、连接注册中心（这里是zookeeper）\n\taddRegistryPlugin(s)\n\t//3、服务注册\n\ts.RegisterName(\"Arith\", new(Arith), \"\")\n\t//4、启动服务监听\n\ts.Serve(\"tcp\", *addr)\n}\n\nfunc addRegistryPlugin(s *server.Server) {\n\tr := &serverplugin.EtcdV3RegisterPlugin{\n\t\tServiceAddress: \"tcp@\" + *addr,\n\t\tEtcdServers:   etcdServers,\n\t\tBasePath:       basePath,\n\t\tUpdateInterval: time.Minute,\n\t}\n\terr := r.Start()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts.Plugins.Add(r)\n}\n```\n\n`server/rpc.go`\n\n``` go\npackage main \n\n// 定义服务\ntype Arith int\n\nfunc (t *Arith) Mul(cxt context.Context, args *Args, reply *int) error {\n  fmt.Println(\"Mul on\", *addr)\n  *reply = args.A * args.B\n  return nil\n}\n\nfunc (t *Arith) Div(cxt context.Context, args *Args, quo *Quotient) error {\n  fmt.Println(\"Div on\", *addr)\n  if args.B == 0 {\n    return errors.New(\"divide by 0\")\n  }\n\n  quo.Quo = args.A / args.B\n  quo.Rem = args.A % args.B\n  return nil\n}\n```\n\n公共代码`proto/proto.go`\n\n``` go\npackage proto\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\n```\n\n* 初始化server\n* 连接注册中心\n* 注册服务\n* 启动监听服务\n\n\n`客户端代码`\n\n`client.go`\n\n``` go\npackage main\n\nimport (\n\t\"github.com/smallnest/rpcx/client\"\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"exercise/rpcx_test/proto\"\n)\nvar (\n\tetcdServers = []string{\"localhost:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main()  {\n\tflag.Parse()\n\n\t//1、启动一个ZookeeperDiscovery实例\n\td := client.NewEtcdV3Discovery(basePath,\"Arith\", etcdServers, nil)\n\t//2、启动一个客户端\n\txclient := client.NewXClient(\"Arith\", client.Failtry, client.RandomSelect, d, client.DefaultOption)\n\n\tdefer xclient.Close()\n\n\targs := &proto.Args{\n\t\tA: 25,\n\t\tB: 4,\n\t}\n\n\tquo := &proto.Quotient{}\n\n\tfor {\n\t\treply := new(int)\n\n\t\terr := xclient.Call(context.Background(), \"Mul\", args, reply)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\n\t\tlog.Printf(\"%d * %d = %d\", args.A, args.B, *reply)\n\n\t\terr = xclient.Call(context.Background(), \"Div\", args, quo)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\t\tlog.Printf(\"%d / %d = %d, 余数为%d\", args.A, args.B, quo.Quo, quo.Rem)\n\t\ttime.Sleep(3*time.Second)\n\t}\n}\n\n```\n\n* 服务发现\n\n服务发现主要涵盖两个方面：\n\t- 客户端获取服务元数据\n\t- 自动剔除失效的服务\n\n* 启动服务发现实例\n* 启动客户端\n\n\n## go_micro\n\n### 服务发现\n* 注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：`zookeeper`，`eureka`，`consul`，`etcd` 等开源框架实现。 \n\n* 服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。\n\n* 服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）\n\n### consul\n\n* consul关键特性\n\t- 服务发现\n\t- 健康检查\n\t- 键值存储\n\t- 多数据中心\n\n* consul安装\n\t``` bash\n\t## 从官网下载最新版本的Consul服务\n\twget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip\n\t##使用unzip命令解压\n\tunzip consul_1.10.3_linux_amd64.zip\n\t##将解压好的consul可执行命令移动到/usr/local/bin目录下\n\tmv consul /usr/local/bin\n\t##测试一下\n\tconsul --version\n\t```\n\n* consul常用命令\n\t```  bash\n\tconsul agent\n\t\t* -bind=0.0.0.0：consul所在机器的IP地址\n\t\t* -http-port=8500: consul默认的web访问端口: 8500\n\t\t* -server： 运行在server模式 \n\t\t* -client = 127.0.0.1: consul服务侦听地址，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0\n\t\t* -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读\n\t\t* -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限\n\t\t* -dev: 开发者模式，默认配置启动consul\n\t\t* -node：指定节点的名称\n\t\t* -join：加入到已有的集群中\n\t\t* -ui: 可以使用web页面来查看服务发现详情\n\n\t# 单机开发模式(只允许127开头的ip的client访问)\n\tconsul agent -dev -ui\n\n\t# 开放所有ip的client访问\n\tconsul agent -dev  -client=0.0.0.0 -ui\n\t```\n\n* consul集群\n\t``` bash\n\t# server1(leader)\n\tconsul agent -server -bootstrap -bind=192.168.31.188 -client=0.0.0.0 -data-dir=./data/server1 -ui -node=server1\n\n\t# server2(follower)\n\tconsul agent -server -bind=192.168.31.187 -client=0.0.0.0 -data-dir=./data/server2 -ui -node=server2 -join=192.168.31.188 \n\n\t# server3(follower)\n\tconsul agent -server -bind=192.168.31.186 -client=0.0.0.0 -data-dir=./data/server3 -ui -node=server3 -join=192.168.31.188\n\n\t# client1\n\tconsul agent -ui -bind=192.168.31.185 -client=0.0.0.0 -data-dir=./data/client1 -ui -node=client1 -join=192.168.31.188\n\n\t# 查看集群成员\n\tconsul members\n\n\t# 查看集群状态\n\tconsul info\n\n\t# 优雅的关闭consul\n\tconsul leave\n\n\t# 重新加载配置文件\n\tconsul reload\n\t```\n\n\n\n\n","source":"_posts/go/go_micro.md","raw":"---\ntitle: Golang 微服务 \ncategories: \n- GolangStudy\n---\n\n## 微服务\n\n* 优点:\n\t- 职责单一\n\t- 轻量级通信\n\t- 独立性\n\t- 迭代开发\n* 缺点:\n\t- 运维成本高\n\t- 分布式复杂程度高\n\t- 接口成本高\n\t- 重复性劳动\n\t- 业务分离困难\n\n## rpc使用步骤\n\n* 服务端\n\t1. 注册rpc服务对象\n\t\t``` go\n\t\trpc.RegisterName(\"服务名\", 回调对象)\n\n\t\t* 回调对象绑定的方法需要满足如下条件:\n\t\t\t- 方法必须是可导出的\n\t\t\t- 方法必须有两个参数，且第二个参数必须是指针(传出参数)\n\t\t\t- 方法只有一个 error 类型的返回值\n\t\t```\n\t2. 创建监听器\n\t\t``` go\n\t\tlistener, err := net.Listen()\n\t\t```\n\t3. 建立连接\n\t\t``` go\n\t\tconn, err := listener.Accept()\n\t\t```\n\t4. 将连接与rpc服务绑定\n\t\t``` go\n\t\trpc.ServeConn(conn)\n\t\t```\n\n* 客户端 \n\t1. 使用rpc连接服务器\n\t\t``` go\n\t\tconn, err := rpc.Dial()\n\t\t```\n\t2. 调用远程函数\n\t\t``` go\n\t\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t\t```\n\n## protobuf环境搭建\n\n* 安装protobuf编译工具\n\t``` bash\n\t# 下载protobuf\n\tgit clone https://github.com/protocolbuffers/protobuf.git\n\t# 安装依赖库\n\tsudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y\n\t# 进入目录\n\tcd protobuf/\n\t# 自动生成configure配置文件：\n\t./autogen.sh\n\t# 配置环境：\n\t./configure\n\t# 编译源代码(要有耐心！)：\n\tmake\n\t# 安装\n\tsudo make install\n\t# 刷新共享库 （很重要的一步啊）\n\tsudo ldconfig\n\t# 成功后需要使用命令测试\n\tprotoc -h\n\t```\n\n* 安装go 插件\n\t``` bash\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u google.golang.org/protobuf/proto\n\t```\n\n## protobuf使用步骤\n\n* 书写.proto文件\n\n\t`pb/Person.proto: `\n\n\t``` protobuf\n\tsyntax = \"proto3\";\n\tpackage pb;\n\n\timport \"google/protobuf/timestamp.proto\";\n\n\toption go_package = \"./;pb\";\n\n\tmessage Person {\n\t\tstring name = 1;\n\t\tint32 id = 2;  // Unique ID number for this person.\n\t\tstring email = 3;\n\n\t\tenum PhoneType {\n\t\t  MOBILE = 0;\n\t\t  HOME = 1;\n\t\t  WORK = 2;\n\t\t}\n\n\t\tmessage PhoneNumber {\n\t\t  string number = 1;\n\t\t  PhoneType type = 2;\n\t\t}\n\n\t\trepeated PhoneNumber phones = 4;\n\n\t\tgoogle.protobuf.Timestamp last_updated = 5;\n\t  }\n\n\t  // Our address book file is just one of these.\n\t  message AddressBook {\n\t\trepeated Person people = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t``` bash\n\tprotoc *.proto --go_out=.\n\t```\n\n* 使用\n\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"fmt\"\n\n\t\t\"google.golang.org/protobuf/proto\"\n\t)\n\n\tfunc main() {\n\t\t// 定义一个Person结构体对象\n\t\tperson := &pb.Person{\n\t\t\tName:  \"lijiahao\",\n\t\t\tId:    0,\n\t\t\tEmail: \"18702748294@163.com\",\n\t\t\tPhones: []*pb.Person_PhoneNumber{\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"15136588270\",\n\t\t\t\t\tType: pb.Person_MOBILE,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"190019393\",\n\t\t\t\t\tType: pb.Person_HOME,\n\t\t\t\t},\n\t\t\t\t&pb.Person_PhoneNumber{\n\t\t\t\t\tNumber: \"17182920303\",\n\t\t\t\t\tType: pb.Person_WORK,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// 将Person对象进行序列化\n\t\tdata, err := proto.Marshal(person)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"proto marshal error: \", err)\n\t\t}\n\n\t\t// 反序列化\n\t\tnewData := &pb.Person{}\n\t\terr = proto.Unmarshal(data, newData)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unmarshal error: \", err)\n\t\t}\n\t\tfmt.Println(newData)\n\t}\n\t```\n\n## rpc封装\n* 服务端使用步骤\n\t- 注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)\n\t``` go\n\trpc.RegisterName(\"服务名\", 回调对象)\n\t```\n\n\t- 创建监听器\n\t``` go\n\tlistener, err := net.Listen()\n\t```\n\n\t- 建立连接\n\t``` go\n\tconn, err := listener.Accept()\n\t```\n\n\t- 给连接绑定Rpc服务\n\t``` go\n\trpc.ServeConn(conn)\n\t```\n\n* 客户端使用步骤\n\t- 使用Rpc连接服务器\n\t``` go\n\tconn, err := rpc.Dial()\n\t```\n\n\t- 调用远程函数\n\t``` go\n\tconn.Call(\"服务名.方法名\", 传入参数, 传出参数)\n\t```\n\n* 客户端和服务端封装\n\t``` go\n\tpackage design\n\n\timport (\n\t\t\"net/rpc\"\n\t\t\"net/rpc/jsonrpc\"\n\t)\n\n\t// 服务端封装\n\t/*\n\t\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法\n\t\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数\n\t*/\n\ttype MyInterface interface {\n\t\tHelloWorld(string, *string) error\n\t}\n\n\tfunc RegisterService(i MyInterface) error {\n\t\treturn rpc.RegisterName(\"hello\", i)\n\t}\n\n\t// 客户端封装\n\t/*\n\t\t* 封装连接远程服务器和调用远程函数过程\n\t\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法\n\t\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程\n\t*/\n\ttype MyClient struct {\n\t\tc *rpc.Client\n\t}\n\n\tfunc InitClient(addr string) *MyClient {\n\t\tconn, _ := jsonrpc.Dial(\"tcp\", addr)\n\n\t\treturn &MyClient{c:conn}\n\t}\n\n\tfunc (m *MyClient)HelloWorld(a string, b *string) error {\n\t\treturn m.c.Call(\"hello.HelloWorld\", a, b)\n\t}\n\t```\n\n\n## grpc 使用步骤\n\n* 安装grpc go插件\n\t``` bash\n\tgo get -u -v google.golang.org/grpc\n\t```\n\n* 编写.proto文件\n\n\t`pb/hello_grpc.proto`\n\n\t``` protobuf\n\t// 指定protobuf版本号\n\tsyntax = \"proto3\";\n\n\tpackage pb;\n\n\toption go_package = \"./;pb\";\n\n\t// 定义服务\n\tservice Greeter {\n\t  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\t}\n\n\tmessage HelloRequest {\n\t  string name = 1;\n\t}\n\n\tmessage HelloReply {\n\t  string message = 1;\n\t}\n\t```\n\n* 编译.proto文件\n\t- 安装go语言插件\n\t\t``` bash\n\t\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\t\t```\n\t- 编译.proto文件\n\t\t``` bash\n\t\tprotoc *.proto --go_out=plugins=grpc:./\n\t\t* --go_out=plugins=grpc: 后面指定生成go代码存放的目录\n\t\t```\n\n\n* 编写服务端代码\n\t`server/server.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"fmt\"\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"google.golang.org/grpc\"\n\t\t\"google.golang.org/grpc/reflection\"\n\t\t\"net\"\n\t)\n\n\ttype server struct {}\n\n\t// 给对象绑定方法，实现接口\n\tfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\t\treturn &pb.HelloReply{Message: \"hello \" + in.Name}, nil\n\t}\n\n\tfunc main() {\n\t\t// 监听本地端口\n\t\tlis, err := net.Listen(\"tcp\", \":8080\")\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"监听端口失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// 创建gRPC服务器\n\t\ts := grpc.NewServer()\n\n\t\t// 注册服务\n\t\tpb.RegisterGreeterServer(s, &server{})\n\n\t\treflection.Register(s)\n\n\t\t// 开启服务\n\t\terr = s.Serve(lis)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"开启服务失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t}\n\t```\n\n* 编写客户端代码\n\t`client/client.go`\n\t``` go\n\tpackage main\n\n\timport (\n\t\t\"context\"\n\t\t\"exercise/rpc/net.rpc/pb\"\n\t\t\"fmt\"\n\t\t\"google.golang.org/grpc\"\n\t)\n\n\tfunc main(){\n\t\t// 连接服务器\n\t\tconn, err := grpc.Dial(\":8080\", grpc.WithInsecure())\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"连接服务端失败: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t// 新建一个客户端\n\t\tc := pb.NewGreeterClient(conn)\n\n\t\t// 调用服务端函数\n\t\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: \"horika\"})\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"调用服务端代码失败: %s\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(\"调用成功: %s\", r.Message)\n\t}\n\t```\n\n## rpcx\n\n* [rpcx技术文档](https://doc.rpcx.io/)\n\n* 安装`rpcx`\n\n``` bash\ngo get -u -v -tags \"reuseport quic kcp zookeeper etcd consul ping\" github.com/smallnest/rpcx/...\n```\n\n`服务端代码:`\n\n`server/server.go`\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/smallnest/rpcx/server\"\n\t\"github.com/smallnest/rpcx/serverplugin\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr      = flag.String(\"addr\", \"localhost:8972\", \"server address\")\n\tetcdServers = []string{\"127.0.0.1:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t//1、new一个服务struct\n\ts := server.NewServer()\n\t//2、连接注册中心（这里是zookeeper）\n\taddRegistryPlugin(s)\n\t//3、服务注册\n\ts.RegisterName(\"Arith\", new(Arith), \"\")\n\t//4、启动服务监听\n\ts.Serve(\"tcp\", *addr)\n}\n\nfunc addRegistryPlugin(s *server.Server) {\n\tr := &serverplugin.EtcdV3RegisterPlugin{\n\t\tServiceAddress: \"tcp@\" + *addr,\n\t\tEtcdServers:   etcdServers,\n\t\tBasePath:       basePath,\n\t\tUpdateInterval: time.Minute,\n\t}\n\terr := r.Start()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts.Plugins.Add(r)\n}\n```\n\n`server/rpc.go`\n\n``` go\npackage main \n\n// 定义服务\ntype Arith int\n\nfunc (t *Arith) Mul(cxt context.Context, args *Args, reply *int) error {\n  fmt.Println(\"Mul on\", *addr)\n  *reply = args.A * args.B\n  return nil\n}\n\nfunc (t *Arith) Div(cxt context.Context, args *Args, quo *Quotient) error {\n  fmt.Println(\"Div on\", *addr)\n  if args.B == 0 {\n    return errors.New(\"divide by 0\")\n  }\n\n  quo.Quo = args.A / args.B\n  quo.Rem = args.A % args.B\n  return nil\n}\n```\n\n公共代码`proto/proto.go`\n\n``` go\npackage proto\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\n```\n\n* 初始化server\n* 连接注册中心\n* 注册服务\n* 启动监听服务\n\n\n`客户端代码`\n\n`client.go`\n\n``` go\npackage main\n\nimport (\n\t\"github.com/smallnest/rpcx/client\"\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"exercise/rpcx_test/proto\"\n)\nvar (\n\tetcdServers = []string{\"localhost:2379\"}\n\tbasePath  = \"/rpcx/test\"\n)\n\nfunc main()  {\n\tflag.Parse()\n\n\t//1、启动一个ZookeeperDiscovery实例\n\td := client.NewEtcdV3Discovery(basePath,\"Arith\", etcdServers, nil)\n\t//2、启动一个客户端\n\txclient := client.NewXClient(\"Arith\", client.Failtry, client.RandomSelect, d, client.DefaultOption)\n\n\tdefer xclient.Close()\n\n\targs := &proto.Args{\n\t\tA: 25,\n\t\tB: 4,\n\t}\n\n\tquo := &proto.Quotient{}\n\n\tfor {\n\t\treply := new(int)\n\n\t\terr := xclient.Call(context.Background(), \"Mul\", args, reply)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\n\t\tlog.Printf(\"%d * %d = %d\", args.A, args.B, *reply)\n\n\t\terr = xclient.Call(context.Background(), \"Div\", args, quo)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to call: %v\\n\", err)\n\t\t}\n\t\tlog.Printf(\"%d / %d = %d, 余数为%d\", args.A, args.B, quo.Quo, quo.Rem)\n\t\ttime.Sleep(3*time.Second)\n\t}\n}\n\n```\n\n* 服务发现\n\n服务发现主要涵盖两个方面：\n\t- 客户端获取服务元数据\n\t- 自动剔除失效的服务\n\n* 启动服务发现实例\n* 启动客户端\n\n\n## go_micro\n\n### 服务发现\n* 注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：`zookeeper`，`eureka`，`consul`，`etcd` 等开源框架实现。 \n\n* 服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。\n\n* 服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）\n\n### consul\n\n* consul关键特性\n\t- 服务发现\n\t- 健康检查\n\t- 键值存储\n\t- 多数据中心\n\n* consul安装\n\t``` bash\n\t## 从官网下载最新版本的Consul服务\n\twget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip\n\t##使用unzip命令解压\n\tunzip consul_1.10.3_linux_amd64.zip\n\t##将解压好的consul可执行命令移动到/usr/local/bin目录下\n\tmv consul /usr/local/bin\n\t##测试一下\n\tconsul --version\n\t```\n\n* consul常用命令\n\t```  bash\n\tconsul agent\n\t\t* -bind=0.0.0.0：consul所在机器的IP地址\n\t\t* -http-port=8500: consul默认的web访问端口: 8500\n\t\t* -server： 运行在server模式 \n\t\t* -client = 127.0.0.1: consul服务侦听地址，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0\n\t\t* -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读\n\t\t* -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限\n\t\t* -dev: 开发者模式，默认配置启动consul\n\t\t* -node：指定节点的名称\n\t\t* -join：加入到已有的集群中\n\t\t* -ui: 可以使用web页面来查看服务发现详情\n\n\t# 单机开发模式(只允许127开头的ip的client访问)\n\tconsul agent -dev -ui\n\n\t# 开放所有ip的client访问\n\tconsul agent -dev  -client=0.0.0.0 -ui\n\t```\n\n* consul集群\n\t``` bash\n\t# server1(leader)\n\tconsul agent -server -bootstrap -bind=192.168.31.188 -client=0.0.0.0 -data-dir=./data/server1 -ui -node=server1\n\n\t# server2(follower)\n\tconsul agent -server -bind=192.168.31.187 -client=0.0.0.0 -data-dir=./data/server2 -ui -node=server2 -join=192.168.31.188 \n\n\t# server3(follower)\n\tconsul agent -server -bind=192.168.31.186 -client=0.0.0.0 -data-dir=./data/server3 -ui -node=server3 -join=192.168.31.188\n\n\t# client1\n\tconsul agent -ui -bind=192.168.31.185 -client=0.0.0.0 -data-dir=./data/client1 -ui -node=client1 -join=192.168.31.188\n\n\t# 查看集群成员\n\tconsul members\n\n\t# 查看集群状态\n\tconsul info\n\n\t# 优雅的关闭consul\n\tconsul leave\n\n\t# 重新加载配置文件\n\tconsul reload\n\t```\n\n\n\n\n","slug":"go/go_micro","published":1,"date":"2022-07-03T02:10:25.593Z","updated":"2022-07-03T02:10:25.593Z","_id":"cl444xpwg00048owzas51d4ka","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><ul>\n<li>优点:<ul>\n<li>职责单一</li>\n<li>轻量级通信</li>\n<li>独立性</li>\n<li>迭代开发</li>\n</ul>\n</li>\n<li>缺点:<ul>\n<li>运维成本高</li>\n<li>分布式复杂程度高</li>\n<li>接口成本高</li>\n<li>重复性劳动</li>\n<li>业务分离困难</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rpc使用步骤\"><a href=\"#rpc使用步骤\" class=\"headerlink\" title=\"rpc使用步骤\"></a>rpc使用步骤</h2><ul>\n<li><p>服务端</p>\n<ol>\n<li>注册rpc服务对象 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br><span class=\"line\"></span><br><span class=\"line\">* 回调对象绑定的方法需要满足如下条件:</span><br><span class=\"line\">\t- 方法必须是可导出的</span><br><span class=\"line\">\t- 方法必须有两个参数，且第二个参数必须是指针(传出参数)</span><br><span class=\"line\">\t- 方法只有一个 <span class=\"type\">error</span> 类型的返回值</span><br></pre></td></tr></table></figure></li>\n<li>创建监听器 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li>建立连接 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li>将连接与rpc服务绑定 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>客户端 </p>\n<ol>\n<li>使用rpc连接服务器 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li>调用远程函数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"protobuf环境搭建\"><a href=\"#protobuf环境搭建\" class=\"headerlink\" title=\"protobuf环境搭建\"></a>protobuf环境搭建</h2><ul>\n<li><p>安装protobuf编译工具</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载protobuf</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖库</span></span><br><span class=\"line\">sudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> protobuf/</span><br><span class=\"line\"><span class=\"comment\"># 自动生成configure配置文件：</span></span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\"><span class=\"comment\"># 配置环境：</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"comment\"># 编译源代码(要有耐心！)：</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"><span class=\"comment\"># 刷新共享库 （很重要的一步啊）</span></span><br><span class=\"line\">sudo ldconfig</span><br><span class=\"line\"><span class=\"comment\"># 成功后需要使用命令测试</span></span><br><span class=\"line\">protoc -h</span><br></pre></td></tr></table></figure></li>\n<li><p>安装go 插件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u google.golang.org/protobuf/proto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"protobuf使用步骤\"><a href=\"#protobuf使用步骤\" class=\"headerlink\" title=\"protobuf使用步骤\"></a>protobuf使用步骤</h2><ul>\n<li><p>书写.proto文件</p>\n<p>  <code>pb/Person.proto: </code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/timestamp.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int32</span> id = <span class=\"number\">2</span>;  <span class=\"comment\">// Unique ID number for this person.</span></span><br><span class=\"line\">\t<span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">\t  MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t  HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">\t  <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  PhoneType type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> PhoneNumber phones = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoogle.protobuf.Timestamp last_updated = <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our address book file is just one of these.</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> Person people = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=.</span><br></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个Person结构体对象</span></span><br><span class=\"line\">\tperson := &amp;pb.Person&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;lijiahao&quot;</span>,</span><br><span class=\"line\">\t\tId:    <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tEmail: <span class=\"string\">&quot;18702748294@163.com&quot;</span>,</span><br><span class=\"line\">\t\tPhones: []*pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;15136588270&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_MOBILE,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;190019393&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_HOME,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;17182920303&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_WORK,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Person对象进行序列化</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(person)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;proto marshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">\tnewData := &amp;pb.Person&#123;&#125;</span><br><span class=\"line\">\terr = proto.Unmarshal(data, newData)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unmarshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(newData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rpc封装\"><a href=\"#rpc封装\" class=\"headerlink\" title=\"rpc封装\"></a>rpc封装</h2><ul>\n<li><p>服务端使用步骤</p>\n<ul>\n<li><p>注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br></pre></td></tr></table></figure></li>\n<li><p>创建监听器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li><p>建立连接</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li><p>给连接绑定Rpc服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端使用步骤</p>\n<ul>\n<li><p>使用Rpc连接服务器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li><p>调用远程函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端和服务端封装</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> design</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInterface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHelloWorld(<span class=\"type\">string</span>, *<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterService</span><span class=\"params\">(i MyInterface)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rpc.RegisterName(<span class=\"string\">&quot;hello&quot;</span>, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装连接远程服务器和调用远程函数过程</span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc *rpc.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitClient</span><span class=\"params\">(addr <span class=\"type\">string</span>)</span></span> *MyClient &#123;</span><br><span class=\"line\">\tconn, _ := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyClient&#123;c:conn&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyClient)</span></span>HelloWorld(a <span class=\"type\">string</span>, b *<span class=\"type\">string</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m.c.Call(<span class=\"string\">&quot;hello.HelloWorld&quot;</span>, a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"grpc-使用步骤\"><a href=\"#grpc-使用步骤\" class=\"headerlink\" title=\"grpc 使用步骤\"></a>grpc 使用步骤</h2><ul>\n<li><p>安装grpc go插件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v google.golang.org/grpc</span><br></pre></td></tr></table></figure></li>\n<li><p>编写.proto文件</p>\n<p>  <code>pb/hello_grpc.proto</code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf版本号</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloReply</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<ul>\n<li>安装go语言插件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li>\n<li>编译.proto文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=plugins=grpc:./</span><br><span class=\"line\">* --go_out=plugins=grpc: 后面指定生成go代码存放的目录</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>编写服务端代码<br>  <code>server/server.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给对象绑定方法，实现接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">&quot;hello &quot;</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 监听本地端口</span></span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;监听端口失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建gRPC服务器</span></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册服务</span></span><br><span class=\"line\">\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开启服务</span></span><br><span class=\"line\">\terr = s.Serve(lis)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开启服务失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写客户端代码<br>  <code>client/client.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(<span class=\"string\">&quot;:8080&quot;</span>, grpc.WithInsecure())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;连接服务端失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个客户端</span></span><br><span class=\"line\">\tc := pb.NewGreeterClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用服务端函数</span></span><br><span class=\"line\">\tr, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: <span class=\"string\">&quot;horika&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;调用服务端代码失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;调用成功: %s&quot;</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rpcx\"><a href=\"#rpcx\" class=\"headerlink\" title=\"rpcx\"></a>rpcx</h2><ul>\n<li><p><a href=\"https://doc.rpcx.io/\">rpcx技术文档</a></p>\n</li>\n<li><p>安装<code>rpcx</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v -tags <span class=\"string\">&quot;reuseport quic kcp zookeeper etcd consul ping&quot;</span> github.com/smallnest/rpcx/...</span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码:</code></p>\n<p><code>server/server.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/server&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/serverplugin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\taddr      = flag.String(<span class=\"string\">&quot;addr&quot;</span>, <span class=\"string\">&quot;localhost:8972&quot;</span>, <span class=\"string\">&quot;server address&quot;</span>)</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、new一个服务struct</span></span><br><span class=\"line\">\ts := server.NewServer()</span><br><span class=\"line\">\t<span class=\"comment\">//2、连接注册中心（这里是zookeeper）</span></span><br><span class=\"line\">\taddRegistryPlugin(s)</span><br><span class=\"line\">\t<span class=\"comment\">//3、服务注册</span></span><br><span class=\"line\">\ts.RegisterName(<span class=\"string\">&quot;Arith&quot;</span>, <span class=\"built_in\">new</span>(Arith), <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//4、启动服务监听</span></span><br><span class=\"line\">\ts.Serve(<span class=\"string\">&quot;tcp&quot;</span>, *addr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addRegistryPlugin</span><span class=\"params\">(s *server.Server)</span></span> &#123;</span><br><span class=\"line\">\tr := &amp;serverplugin.EtcdV3RegisterPlugin&#123;</span><br><span class=\"line\">\t\tServiceAddress: <span class=\"string\">&quot;tcp@&quot;</span> + *addr,</span><br><span class=\"line\">\t\tEtcdServers:   etcdServers,</span><br><span class=\"line\">\t\tBasePath:       basePath,</span><br><span class=\"line\">\t\tUpdateInterval: time.Minute,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.Start()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.Plugins.Add(r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>server/rpc.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Mul(cxt context.Context, args *Args, reply *<span class=\"type\">int</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Mul on&quot;</span>, *addr)</span><br><span class=\"line\">  *reply = args.A * args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Div(cxt context.Context, args *Args, quo *Quotient) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Div on&quot;</span>, *addr)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;divide by 0&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  quo.Quo = args.A / args.B</span><br><span class=\"line\">  quo.Rem = args.A % args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公共代码<code>proto/proto.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化server</li>\n<li>连接注册中心</li>\n<li>注册服务</li>\n<li>启动监听服务</li>\n</ul>\n<p><code>客户端代码</code></p>\n<p><code>client.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/client&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpcx_test/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、启动一个ZookeeperDiscovery实例</span></span><br><span class=\"line\">\td := client.NewEtcdV3Discovery(basePath,<span class=\"string\">&quot;Arith&quot;</span>, etcdServers, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//2、启动一个客户端</span></span><br><span class=\"line\">\txclient := client.NewXClient(<span class=\"string\">&quot;Arith&quot;</span>, client.Failtry, client.RandomSelect, d, client.DefaultOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> xclient.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := &amp;proto.Args&#123;</span><br><span class=\"line\">\t\tA: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\tB: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo := &amp;proto.Quotient&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\treply := <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr := xclient.Call(context.Background(), <span class=\"string\">&quot;Mul&quot;</span>, args, reply)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d * %d = %d&quot;</span>, args.A, args.B, *reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr = xclient.Call(context.Background(), <span class=\"string\">&quot;Div&quot;</span>, args, quo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d / %d = %d, 余数为%d&quot;</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">3</span>*time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务发现</li>\n</ul>\n<p>服务发现主要涵盖两个方面：<br>    - 客户端获取服务元数据<br>    - 自动剔除失效的服务</p>\n<ul>\n<li>启动服务发现实例</li>\n<li>启动客户端</li>\n</ul>\n<h2 id=\"go-micro\"><a href=\"#go-micro\" class=\"headerlink\" title=\"go_micro\"></a>go_micro</h2><h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><ul>\n<li><p>注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：<code>zookeeper</code>，<code>eureka</code>，<code>consul</code>，<code>etcd</code> 等开源框架实现。 </p>\n</li>\n<li><p>服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。</p>\n</li>\n<li><p>服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）</p>\n</li>\n</ul>\n<h3 id=\"consul\"><a href=\"#consul\" class=\"headerlink\" title=\"consul\"></a>consul</h3><ul>\n<li><p>consul关键特性</p>\n<ul>\n<li>服务发现</li>\n<li>健康检查</li>\n<li>键值存储</li>\n<li>多数据中心</li>\n</ul>\n</li>\n<li><p>consul安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 从官网下载最新版本的Consul服务</span></span><br><span class=\"line\">wget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip</span><br><span class=\"line\"><span class=\"comment\">##使用unzip命令解压</span></span><br><span class=\"line\">unzip consul_1.10.3_linux_amd64.zip</span><br><span class=\"line\"><span class=\"comment\">##将解压好的consul可执行命令移动到/usr/local/bin目录下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> consul /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">##测试一下</span></span><br><span class=\"line\">consul --version</span><br></pre></td></tr></table></figure></li>\n<li><p>consul常用命令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent</span><br><span class=\"line\">\t* -<span class=\"built_in\">bind</span>=0.0.0.0：consul所在机器的IP地址</span><br><span class=\"line\">\t* -http-port=8500: consul默认的web访问端口: 8500</span><br><span class=\"line\">\t* -server： 运行在server模式 </span><br><span class=\"line\">\t* -client = 127.0.0.1: consul服务侦听地址，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</span><br><span class=\"line\">\t* -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读</span><br><span class=\"line\">\t* -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限</span><br><span class=\"line\">\t* -dev: 开发者模式，默认配置启动consul</span><br><span class=\"line\">\t* -node：指定节点的名称</span><br><span class=\"line\">\t* -<span class=\"built_in\">join</span>：加入到已有的集群中</span><br><span class=\"line\">\t* -ui: 可以使用web页面来查看服务发现详情</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单机开发模式(只允许127开头的ip的client访问)</span></span><br><span class=\"line\">consul agent -dev -ui</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开放所有ip的client访问</span></span><br><span class=\"line\">consul agent -dev  -client=0.0.0.0 -ui</span><br></pre></td></tr></table></figure></li>\n<li><p>consul集群</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># server1(leader)</span></span><br><span class=\"line\">consul agent -server -bootstrap -<span class=\"built_in\">bind</span>=192.168.31.188 -client=0.0.0.0 -data-dir=./data/server1 -ui -node=server1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># server2(follower)</span></span><br><span class=\"line\">consul agent -server -<span class=\"built_in\">bind</span>=192.168.31.187 -client=0.0.0.0 -data-dir=./data/server2 -ui -node=server2 -<span class=\"built_in\">join</span>=192.168.31.188 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># server3(follower)</span></span><br><span class=\"line\">consul agent -server -<span class=\"built_in\">bind</span>=192.168.31.186 -client=0.0.0.0 -data-dir=./data/server3 -ui -node=server3 -<span class=\"built_in\">join</span>=192.168.31.188</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># client1</span></span><br><span class=\"line\">consul agent -ui -<span class=\"built_in\">bind</span>=192.168.31.185 -client=0.0.0.0 -data-dir=./data/client1 -ui -node=client1 -<span class=\"built_in\">join</span>=192.168.31.188</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群成员</span></span><br><span class=\"line\">consul members</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群状态</span></span><br><span class=\"line\">consul info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优雅的关闭consul</span></span><br><span class=\"line\">consul leave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">consul reload</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><ul>\n<li>优点:<ul>\n<li>职责单一</li>\n<li>轻量级通信</li>\n<li>独立性</li>\n<li>迭代开发</li>\n</ul>\n</li>\n<li>缺点:<ul>\n<li>运维成本高</li>\n<li>分布式复杂程度高</li>\n<li>接口成本高</li>\n<li>重复性劳动</li>\n<li>业务分离困难</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rpc使用步骤\"><a href=\"#rpc使用步骤\" class=\"headerlink\" title=\"rpc使用步骤\"></a>rpc使用步骤</h2><ul>\n<li><p>服务端</p>\n<ol>\n<li>注册rpc服务对象 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br><span class=\"line\"></span><br><span class=\"line\">* 回调对象绑定的方法需要满足如下条件:</span><br><span class=\"line\">\t- 方法必须是可导出的</span><br><span class=\"line\">\t- 方法必须有两个参数，且第二个参数必须是指针(传出参数)</span><br><span class=\"line\">\t- 方法只有一个 <span class=\"type\">error</span> 类型的返回值</span><br></pre></td></tr></table></figure></li>\n<li>创建监听器 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li>建立连接 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li>将连接与rpc服务绑定 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>客户端 </p>\n<ol>\n<li>使用rpc连接服务器 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li>调用远程函数 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"protobuf环境搭建\"><a href=\"#protobuf环境搭建\" class=\"headerlink\" title=\"protobuf环境搭建\"></a>protobuf环境搭建</h2><ul>\n<li><p>安装protobuf编译工具</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载protobuf</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/protocolbuffers/protobuf.git</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖库</span></span><br><span class=\"line\">sudo apt-get install autoconf  automake  libtool curl make  g++  unzip libffi-dev -y</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> protobuf/</span><br><span class=\"line\"><span class=\"comment\"># 自动生成configure配置文件：</span></span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\"><span class=\"comment\"># 配置环境：</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"comment\"># 编译源代码(要有耐心！)：</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"><span class=\"comment\"># 刷新共享库 （很重要的一步啊）</span></span><br><span class=\"line\">sudo ldconfig</span><br><span class=\"line\"><span class=\"comment\"># 成功后需要使用命令测试</span></span><br><span class=\"line\">protoc -h</span><br></pre></td></tr></table></figure></li>\n<li><p>安装go 插件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u google.golang.org/protobuf/proto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"protobuf使用步骤\"><a href=\"#protobuf使用步骤\" class=\"headerlink\" title=\"protobuf使用步骤\"></a>protobuf使用步骤</h2><ul>\n<li><p>书写.proto文件</p>\n<p>  <code>pb/Person.proto: </code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/timestamp.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int32</span> id = <span class=\"number\">2</span>;  <span class=\"comment\">// Unique ID number for this person.</span></span><br><span class=\"line\">\t<span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">\t  MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t  HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">\t  <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  PhoneType type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> PhoneNumber phones = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoogle.protobuf.Timestamp last_updated = <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our address book file is just one of these.</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">repeated</span> Person people = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=.</span><br></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个Person结构体对象</span></span><br><span class=\"line\">\tperson := &amp;pb.Person&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;lijiahao&quot;</span>,</span><br><span class=\"line\">\t\tId:    <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tEmail: <span class=\"string\">&quot;18702748294@163.com&quot;</span>,</span><br><span class=\"line\">\t\tPhones: []*pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;15136588270&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_MOBILE,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;190019393&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_HOME,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;pb.Person_PhoneNumber&#123;</span><br><span class=\"line\">\t\t\t\tNumber: <span class=\"string\">&quot;17182920303&quot;</span>,</span><br><span class=\"line\">\t\t\t\tType: pb.Person_WORK,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Person对象进行序列化</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(person)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;proto marshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">\tnewData := &amp;pb.Person&#123;&#125;</span><br><span class=\"line\">\terr = proto.Unmarshal(data, newData)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unmarshal error: &quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(newData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rpc封装\"><a href=\"#rpc封装\" class=\"headerlink\" title=\"rpc封装\"></a>rpc封装</h2><ul>\n<li><p>服务端使用步骤</p>\n<ul>\n<li><p>注册Rpc服务对象，并给对象绑定方法(定义类、绑定方法)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.RegisterName(<span class=\"string\">&quot;服务名&quot;</span>, 回调对象)</span><br></pre></td></tr></table></figure></li>\n<li><p>创建监听器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener, err := net.Listen()</span><br></pre></td></tr></table></figure></li>\n<li><p>建立连接</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := listener.Accept()</span><br></pre></td></tr></table></figure></li>\n<li><p>给连接绑定Rpc服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc.ServeConn(conn)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端使用步骤</p>\n<ul>\n<li><p>使用Rpc连接服务器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := rpc.Dial()</span><br></pre></td></tr></table></figure></li>\n<li><p>调用远程函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.Call(<span class=\"string\">&quot;服务名.方法名&quot;</span>, 传入参数, 传出参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>客户端和服务端封装</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> design</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接受接口参数的函数来注册服务，传入参数的对象必须实现了接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装一个接口来限定注册服务的时候传入的对象的方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInterface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHelloWorld(<span class=\"type\">string</span>, *<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterService</span><span class=\"params\">(i MyInterface)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rpc.RegisterName(<span class=\"string\">&quot;hello&quot;</span>, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端封装</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 封装连接远程服务器和调用远程函数过程</span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义类(类中包含了 rpc.Client的指针) 绑定类方法</span></span><br><span class=\"line\"><span class=\"comment\">\t* 使用InitClient函数初始化类，其中封装了连接远程服务器的过程，在类方法中封装了调用远程函数的过程</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc *rpc.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitClient</span><span class=\"params\">(addr <span class=\"type\">string</span>)</span></span> *MyClient &#123;</span><br><span class=\"line\">\tconn, _ := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;MyClient&#123;c:conn&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyClient)</span></span>HelloWorld(a <span class=\"type\">string</span>, b *<span class=\"type\">string</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m.c.Call(<span class=\"string\">&quot;hello.HelloWorld&quot;</span>, a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"grpc-使用步骤\"><a href=\"#grpc-使用步骤\" class=\"headerlink\" title=\"grpc 使用步骤\"></a>grpc 使用步骤</h2><ul>\n<li><p>安装grpc go插件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v google.golang.org/grpc</span><br></pre></td></tr></table></figure></li>\n<li><p>编写.proto文件</p>\n<p>  <code>pb/hello_grpc.proto</code></p>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf版本号</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> pb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;./;pb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloReply</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译.proto文件</p>\n<ul>\n<li>安装go语言插件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li>\n<li>编译.proto文件  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc *.proto --go_out=plugins=grpc:./</span><br><span class=\"line\">* --go_out=plugins=grpc: 后面指定生成go代码存放的目录</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>编写服务端代码<br>  <code>server/server.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给对象绑定方法，实现接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">&quot;hello &quot;</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 监听本地端口</span></span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;监听端口失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建gRPC服务器</span></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册服务</span></span><br><span class=\"line\">\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开启服务</span></span><br><span class=\"line\">\terr = s.Serve(lis)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开启服务失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写客户端代码<br>  <code>client/client.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpc/net.rpc/pb&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/grpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(<span class=\"string\">&quot;:8080&quot;</span>, grpc.WithInsecure())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;连接服务端失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建一个客户端</span></span><br><span class=\"line\">\tc := pb.NewGreeterClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用服务端函数</span></span><br><span class=\"line\">\tr, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: <span class=\"string\">&quot;horika&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;调用服务端代码失败: %s&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;调用成功: %s&quot;</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rpcx\"><a href=\"#rpcx\" class=\"headerlink\" title=\"rpcx\"></a>rpcx</h2><ul>\n<li><p><a href=\"https://doc.rpcx.io/\">rpcx技术文档</a></p>\n</li>\n<li><p>安装<code>rpcx</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v -tags <span class=\"string\">&quot;reuseport quic kcp zookeeper etcd consul ping&quot;</span> github.com/smallnest/rpcx/...</span><br></pre></td></tr></table></figure>\n\n<p><code>服务端代码:</code></p>\n<p><code>server/server.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/server&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/serverplugin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\taddr      = flag.String(<span class=\"string\">&quot;addr&quot;</span>, <span class=\"string\">&quot;localhost:8972&quot;</span>, <span class=\"string\">&quot;server address&quot;</span>)</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;127.0.0.1:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、new一个服务struct</span></span><br><span class=\"line\">\ts := server.NewServer()</span><br><span class=\"line\">\t<span class=\"comment\">//2、连接注册中心（这里是zookeeper）</span></span><br><span class=\"line\">\taddRegistryPlugin(s)</span><br><span class=\"line\">\t<span class=\"comment\">//3、服务注册</span></span><br><span class=\"line\">\ts.RegisterName(<span class=\"string\">&quot;Arith&quot;</span>, <span class=\"built_in\">new</span>(Arith), <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//4、启动服务监听</span></span><br><span class=\"line\">\ts.Serve(<span class=\"string\">&quot;tcp&quot;</span>, *addr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addRegistryPlugin</span><span class=\"params\">(s *server.Server)</span></span> &#123;</span><br><span class=\"line\">\tr := &amp;serverplugin.EtcdV3RegisterPlugin&#123;</span><br><span class=\"line\">\t\tServiceAddress: <span class=\"string\">&quot;tcp@&quot;</span> + *addr,</span><br><span class=\"line\">\t\tEtcdServers:   etcdServers,</span><br><span class=\"line\">\t\tBasePath:       basePath,</span><br><span class=\"line\">\t\tUpdateInterval: time.Minute,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.Start()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.Plugins.Add(r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>server/rpc.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义服务</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arith <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Mul(cxt context.Context, args *Args, reply *<span class=\"type\">int</span>) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Mul on&quot;</span>, *addr)</span><br><span class=\"line\">  *reply = args.A * args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span></span> Div(cxt context.Context, args *Args, quo *Quotient) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Div on&quot;</span>, *addr)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;divide by 0&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  quo.Quo = args.A / args.B</span><br><span class=\"line\">  quo.Rem = args.A % args.B</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公共代码<code>proto/proto.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化server</li>\n<li>连接注册中心</li>\n<li>注册服务</li>\n<li>启动监听服务</li>\n</ul>\n<p><code>客户端代码</code></p>\n<p><code>client.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/smallnest/rpcx/client&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;exercise/rpcx_test/proto&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tetcdServers = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;localhost:2379&quot;</span>&#125;</span><br><span class=\"line\">\tbasePath  = <span class=\"string\">&quot;/rpcx/test&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、启动一个ZookeeperDiscovery实例</span></span><br><span class=\"line\">\td := client.NewEtcdV3Discovery(basePath,<span class=\"string\">&quot;Arith&quot;</span>, etcdServers, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//2、启动一个客户端</span></span><br><span class=\"line\">\txclient := client.NewXClient(<span class=\"string\">&quot;Arith&quot;</span>, client.Failtry, client.RandomSelect, d, client.DefaultOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> xclient.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := &amp;proto.Args&#123;</span><br><span class=\"line\">\t\tA: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\tB: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo := &amp;proto.Quotient&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\treply := <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr := xclient.Call(context.Background(), <span class=\"string\">&quot;Mul&quot;</span>, args, reply)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d * %d = %d&quot;</span>, args.A, args.B, *reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\terr = xclient.Call(context.Background(), <span class=\"string\">&quot;Div&quot;</span>, args, quo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;failed to call: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;%d / %d = %d, 余数为%d&quot;</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">3</span>*time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务发现</li>\n</ul>\n<p>服务发现主要涵盖两个方面：<br>    - 客户端获取服务元数据<br>    - 自动剔除失效的服务</p>\n<ul>\n<li>启动服务发现实例</li>\n<li>启动客户端</li>\n</ul>\n<h2 id=\"go-micro\"><a href=\"#go-micro\" class=\"headerlink\" title=\"go_micro\"></a>go_micro</h2><h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><ul>\n<li><p>注册中心: 服务注册中心用来实现服务发现和服务的元数据存储。现在主流的做法是通过：<code>zookeeper</code>，<code>eureka</code>，<code>consul</code>，<code>etcd</code> 等开源框架实现。 </p>\n</li>\n<li><p>服务注册: 服务端提供者将服务的元数据信息注册到注册中心的过程，这些元数据包含：服务名，监听地址，监听协议，权重v吞吐率等。</p>\n</li>\n<li><p>服务发现: 客户端获取服务元数据的过程，有了这些元数据，客户端就可以发起服务调用了。获取元数据可以有两种实现方式：pull（自己去注册中心取）、push（注册中心主动告诉我）</p>\n</li>\n</ul>\n<h3 id=\"consul\"><a href=\"#consul\" class=\"headerlink\" title=\"consul\"></a>consul</h3><ul>\n<li><p>consul关键特性</p>\n<ul>\n<li>服务发现</li>\n<li>健康检查</li>\n<li>键值存储</li>\n<li>多数据中心</li>\n</ul>\n</li>\n<li><p>consul安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 从官网下载最新版本的Consul服务</span></span><br><span class=\"line\">wget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip</span><br><span class=\"line\"><span class=\"comment\">##使用unzip命令解压</span></span><br><span class=\"line\">unzip consul_1.10.3_linux_amd64.zip</span><br><span class=\"line\"><span class=\"comment\">##将解压好的consul可执行命令移动到/usr/local/bin目录下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> consul /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">##测试一下</span></span><br><span class=\"line\">consul --version</span><br></pre></td></tr></table></figure></li>\n<li><p>consul常用命令</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent</span><br><span class=\"line\">\t* -<span class=\"built_in\">bind</span>=0.0.0.0：consul所在机器的IP地址</span><br><span class=\"line\">\t* -http-port=8500: consul默认的web访问端口: 8500</span><br><span class=\"line\">\t* -server： 运行在server模式 </span><br><span class=\"line\">\t* -client = 127.0.0.1: consul服务侦听地址，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</span><br><span class=\"line\">\t* -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读</span><br><span class=\"line\">\t* -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限</span><br><span class=\"line\">\t* -dev: 开发者模式，默认配置启动consul</span><br><span class=\"line\">\t* -node：指定节点的名称</span><br><span class=\"line\">\t* -<span class=\"built_in\">join</span>：加入到已有的集群中</span><br><span class=\"line\">\t* -ui: 可以使用web页面来查看服务发现详情</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单机开发模式(只允许127开头的ip的client访问)</span></span><br><span class=\"line\">consul agent -dev -ui</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开放所有ip的client访问</span></span><br><span class=\"line\">consul agent -dev  -client=0.0.0.0 -ui</span><br></pre></td></tr></table></figure></li>\n<li><p>consul集群</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># server1(leader)</span></span><br><span class=\"line\">consul agent -server -bootstrap -<span class=\"built_in\">bind</span>=192.168.31.188 -client=0.0.0.0 -data-dir=./data/server1 -ui -node=server1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># server2(follower)</span></span><br><span class=\"line\">consul agent -server -<span class=\"built_in\">bind</span>=192.168.31.187 -client=0.0.0.0 -data-dir=./data/server2 -ui -node=server2 -<span class=\"built_in\">join</span>=192.168.31.188 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># server3(follower)</span></span><br><span class=\"line\">consul agent -server -<span class=\"built_in\">bind</span>=192.168.31.186 -client=0.0.0.0 -data-dir=./data/server3 -ui -node=server3 -<span class=\"built_in\">join</span>=192.168.31.188</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># client1</span></span><br><span class=\"line\">consul agent -ui -<span class=\"built_in\">bind</span>=192.168.31.185 -client=0.0.0.0 -data-dir=./data/client1 -ui -node=client1 -<span class=\"built_in\">join</span>=192.168.31.188</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群成员</span></span><br><span class=\"line\">consul members</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群状态</span></span><br><span class=\"line\">consul info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优雅的关闭consul</span></span><br><span class=\"line\">consul leave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">consul reload</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Golang 配置文件解析","_content":"\n## viper\n* 安装\n\t``` bash\n\tgo get -u github.com/spf13/viper\n\t```\n\n* quickStart(常用配置) \n\t`config.go`\n\t``` go\n\ttype Config struct {\n\t\tMySQL MySQLConfig\n\t\tRedis RedisConfig\n\t\tLog LogConfig\n\t\tMsgChannelType MsgChannelType\n\t}\n\n\t// MySQL相关配置\n\ttype MySQLConfig struct {\n\t\tHost string\n\t\tPort int\n\t\tUser string\n\t\tPassword string\n\t\tDbName string\n\t\tTablePrefix string\n\t}\n\n\ttype RedisConfig struct {\n\t\tAddr string\n\t\tPassword string\n\t\tDB int\n\t\tPoolSize int\n\t\tMinIdleConns int\n\t}\n\n\n\t// 日志保存地址\n\ttype LogConfig struct {\n\t\tPath string\n\t\tLevel string\n\t}\n\n\ttype MsgChannelType struct {\n\t\tChannelType string\n\t\tKafkaHosts string\n\t\tKafkaTopic string\n\t}\n\n\tvar c Config \n\n\tfunc init() {\n\t\t// 设置文件名\n\t\tviper.SetConfigName(\"config\")\n\t\t// 设置文件类型\n\t\tviper.SetConfigType(\"toml\")\n\t\t// 设置文件路径，可以多个viper会根据设置的顺序依次查找\n\t\tviper.AddConfigPath(\".\")\n\t\tviper.AutomaticEnv()\n\t\terr := viper.ReadInConfig()\n\t\tif err != nil {\n\t\t\tpanic(fmt.Errorf(\"fatal error config file: %s\", err))\n\t\t}\n\n\t\tviper.Unmarshal(&c)\n\t}\n\n\tfunc GetConfig() Config {\n\t\treturn c\n\t}\n\t```\n\n\t`config.toml`\n\t``` toml\n\t[mysql]\n\tHost=\"127.0.0.1\"\n\tPort=3306\n\tUser=\"root\"\n\tPassword=\"cv11010216\"\n\tDbName=\"chat\"\n\tTablePrefix=\"\"\n\n\t[redis]\n\tAddr=\"localhost:6379\"\n\tPassword=\"\"\n\tDB=0\n\tPoolSize=30\n\tMinIdleConns=30\n\t```\n\n\t`config_test.go`\n\t``` go\n\tfunc TestGetConfig(t *testing.T) {\n\t\tmySQLConfig := GetConfig().MySQL\n\t\tif mySQLConfig.Host != \"127.0.0.1\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"127.0.0.1\", mySQLConfig.Host)\n\t\t}\n\t\tif mySQLConfig.DbName != \"chat\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"chat\", mySQLConfig.DbName)\n\t\t}\n\t\tif mySQLConfig.TablePrefix != \"\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"chat\", mySQLConfig.TablePrefix)\n\t\t}\n\t}\n\t```\n\n\t\n\n## ini\n\n","source":"_posts/go/go_config.md","raw":"---\ntitle: Golang 配置文件解析 \ncategories: \n- GolangStudy\n---\n\n## viper\n* 安装\n\t``` bash\n\tgo get -u github.com/spf13/viper\n\t```\n\n* quickStart(常用配置) \n\t`config.go`\n\t``` go\n\ttype Config struct {\n\t\tMySQL MySQLConfig\n\t\tRedis RedisConfig\n\t\tLog LogConfig\n\t\tMsgChannelType MsgChannelType\n\t}\n\n\t// MySQL相关配置\n\ttype MySQLConfig struct {\n\t\tHost string\n\t\tPort int\n\t\tUser string\n\t\tPassword string\n\t\tDbName string\n\t\tTablePrefix string\n\t}\n\n\ttype RedisConfig struct {\n\t\tAddr string\n\t\tPassword string\n\t\tDB int\n\t\tPoolSize int\n\t\tMinIdleConns int\n\t}\n\n\n\t// 日志保存地址\n\ttype LogConfig struct {\n\t\tPath string\n\t\tLevel string\n\t}\n\n\ttype MsgChannelType struct {\n\t\tChannelType string\n\t\tKafkaHosts string\n\t\tKafkaTopic string\n\t}\n\n\tvar c Config \n\n\tfunc init() {\n\t\t// 设置文件名\n\t\tviper.SetConfigName(\"config\")\n\t\t// 设置文件类型\n\t\tviper.SetConfigType(\"toml\")\n\t\t// 设置文件路径，可以多个viper会根据设置的顺序依次查找\n\t\tviper.AddConfigPath(\".\")\n\t\tviper.AutomaticEnv()\n\t\terr := viper.ReadInConfig()\n\t\tif err != nil {\n\t\t\tpanic(fmt.Errorf(\"fatal error config file: %s\", err))\n\t\t}\n\n\t\tviper.Unmarshal(&c)\n\t}\n\n\tfunc GetConfig() Config {\n\t\treturn c\n\t}\n\t```\n\n\t`config.toml`\n\t``` toml\n\t[mysql]\n\tHost=\"127.0.0.1\"\n\tPort=3306\n\tUser=\"root\"\n\tPassword=\"cv11010216\"\n\tDbName=\"chat\"\n\tTablePrefix=\"\"\n\n\t[redis]\n\tAddr=\"localhost:6379\"\n\tPassword=\"\"\n\tDB=0\n\tPoolSize=30\n\tMinIdleConns=30\n\t```\n\n\t`config_test.go`\n\t``` go\n\tfunc TestGetConfig(t *testing.T) {\n\t\tmySQLConfig := GetConfig().MySQL\n\t\tif mySQLConfig.Host != \"127.0.0.1\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"127.0.0.1\", mySQLConfig.Host)\n\t\t}\n\t\tif mySQLConfig.DbName != \"chat\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"chat\", mySQLConfig.DbName)\n\t\t}\n\t\tif mySQLConfig.TablePrefix != \"\" {\n\t\t\tt.Errorf(\"get mySQLConfig error, expect %s, get %s\", \"chat\", mySQLConfig.TablePrefix)\n\t\t}\n\t}\n\t```\n\n\t\n\n## ini\n\n","slug":"go/go_config","published":1,"date":"2022-07-07T02:57:46.133Z","updated":"2022-07-07T02:57:46.133Z","_id":"cl54p5wlz0000oawzg1sw3774","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"viper\"><a href=\"#viper\" class=\"headerlink\" title=\"viper\"></a>viper</h2><ul>\n<li><p>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/spf13/viper</span><br></pre></td></tr></table></figure></li>\n<li><p>quickStart(常用配置)<br>  <code>config.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Config <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMySQL MySQLConfig</span><br><span class=\"line\">\tRedis RedisConfig</span><br><span class=\"line\">\tLog LogConfig</span><br><span class=\"line\">\tMsgChannelType MsgChannelType</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MySQL相关配置</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MySQLConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHost <span class=\"type\">string</span></span><br><span class=\"line\">\tPort <span class=\"type\">int</span></span><br><span class=\"line\">\tUser <span class=\"type\">string</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span></span><br><span class=\"line\">\tDbName <span class=\"type\">string</span></span><br><span class=\"line\">\tTablePrefix <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAddr <span class=\"type\">string</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span></span><br><span class=\"line\">\tDB <span class=\"type\">int</span></span><br><span class=\"line\">\tPoolSize <span class=\"type\">int</span></span><br><span class=\"line\">\tMinIdleConns <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 日志保存地址</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LogConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath <span class=\"type\">string</span></span><br><span class=\"line\">\tLevel <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MsgChannelType <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tChannelType <span class=\"type\">string</span></span><br><span class=\"line\">\tKafkaHosts <span class=\"type\">string</span></span><br><span class=\"line\">\tKafkaTopic <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c Config </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件名</span></span><br><span class=\"line\">\tviper.SetConfigName(<span class=\"string\">&quot;config&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件类型</span></span><br><span class=\"line\">\tviper.SetConfigType(<span class=\"string\">&quot;toml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件路径，可以多个viper会根据设置的顺序依次查找</span></span><br><span class=\"line\">\tviper.AddConfigPath(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">\tviper.AutomaticEnv()</span><br><span class=\"line\">\terr := viper.ReadInConfig()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">&quot;fatal error config file: %s&quot;</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tviper.Unmarshal(&amp;c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetConfig</span><span class=\"params\">()</span></span> Config &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>config.toml</code></p>\n  <figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">Host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Port</span>=<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=<span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"string\">&quot;cv11010216&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DbName</span>=<span class=\"string\">&quot;chat&quot;</span></span><br><span class=\"line\"><span class=\"attr\">TablePrefix</span>=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[redis]</span></span><br><span class=\"line\"><span class=\"attr\">Addr</span>=<span class=\"string\">&quot;localhost:6379&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DB</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">PoolSize</span>=<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">MinIdleConns</span>=<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p>  <code>config_test.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetConfig</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tmySQLConfig := GetConfig().MySQL</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.Host != <span class=\"string\">&quot;127.0.0.1&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;127.0.0.1&quot;</span>, mySQLConfig.Host)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.DbName != <span class=\"string\">&quot;chat&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;chat&quot;</span>, mySQLConfig.DbName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.TablePrefix != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;chat&quot;</span>, mySQLConfig.TablePrefix)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ini\"><a href=\"#ini\" class=\"headerlink\" title=\"ini\"></a>ini</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"viper\"><a href=\"#viper\" class=\"headerlink\" title=\"viper\"></a>viper</h2><ul>\n<li><p>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/spf13/viper</span><br></pre></td></tr></table></figure></li>\n<li><p>quickStart(常用配置)<br>  <code>config.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Config <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMySQL MySQLConfig</span><br><span class=\"line\">\tRedis RedisConfig</span><br><span class=\"line\">\tLog LogConfig</span><br><span class=\"line\">\tMsgChannelType MsgChannelType</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MySQL相关配置</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MySQLConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHost <span class=\"type\">string</span></span><br><span class=\"line\">\tPort <span class=\"type\">int</span></span><br><span class=\"line\">\tUser <span class=\"type\">string</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span></span><br><span class=\"line\">\tDbName <span class=\"type\">string</span></span><br><span class=\"line\">\tTablePrefix <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAddr <span class=\"type\">string</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span></span><br><span class=\"line\">\tDB <span class=\"type\">int</span></span><br><span class=\"line\">\tPoolSize <span class=\"type\">int</span></span><br><span class=\"line\">\tMinIdleConns <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 日志保存地址</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LogConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPath <span class=\"type\">string</span></span><br><span class=\"line\">\tLevel <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MsgChannelType <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tChannelType <span class=\"type\">string</span></span><br><span class=\"line\">\tKafkaHosts <span class=\"type\">string</span></span><br><span class=\"line\">\tKafkaTopic <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c Config </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件名</span></span><br><span class=\"line\">\tviper.SetConfigName(<span class=\"string\">&quot;config&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件类型</span></span><br><span class=\"line\">\tviper.SetConfigType(<span class=\"string\">&quot;toml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件路径，可以多个viper会根据设置的顺序依次查找</span></span><br><span class=\"line\">\tviper.AddConfigPath(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">\tviper.AutomaticEnv()</span><br><span class=\"line\">\terr := viper.ReadInConfig()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">&quot;fatal error config file: %s&quot;</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tviper.Unmarshal(&amp;c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetConfig</span><span class=\"params\">()</span></span> Config &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>config.toml</code></p>\n  <figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">Host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Port</span>=<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">User</span>=<span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"string\">&quot;cv11010216&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DbName</span>=<span class=\"string\">&quot;chat&quot;</span></span><br><span class=\"line\"><span class=\"attr\">TablePrefix</span>=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[redis]</span></span><br><span class=\"line\"><span class=\"attr\">Addr</span>=<span class=\"string\">&quot;localhost:6379&quot;</span></span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DB</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">PoolSize</span>=<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">MinIdleConns</span>=<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p>  <code>config_test.go</code></p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetConfig</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tmySQLConfig := GetConfig().MySQL</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.Host != <span class=\"string\">&quot;127.0.0.1&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;127.0.0.1&quot;</span>, mySQLConfig.Host)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.DbName != <span class=\"string\">&quot;chat&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;chat&quot;</span>, mySQLConfig.DbName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySQLConfig.TablePrefix != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;get mySQLConfig error, expect %s, get %s&quot;</span>, <span class=\"string\">&quot;chat&quot;</span>, mySQLConfig.TablePrefix)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ini\"><a href=\"#ini\" class=\"headerlink\" title=\"ini\"></a>ini</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3tkt6ck0001f8wz6oyg6a13","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncp000hgewzdwkear0y"},{"post_id":"cl3tkt6cn0002f8wzfxc7537q","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncp000igewz37zp35lq"},{"post_id":"cl3tkt6cp0003f8wzf0p7ehx9","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncq000jgewzcnhdg51h"},{"post_id":"cl3tkt6cr0004f8wz0zdzersq","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncr000kgewzbjc8ezxz"},{"post_id":"cl3tkt6cw0007f8wz1p7406ey","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncr000lgewzdhs3an4p"},{"post_id":"cl3tkt6ct0005f8wzakd609vx","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncs000mgewzat7g5iqc"},{"post_id":"cl3tkt6cu0006f8wzf1peaaq7","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncs000ngewzgv56agvb"},{"post_id":"cl3tkt6cy0008f8wz0t3ihje3","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncs000ogewzcmwrdjc3"},{"post_id":"cl3tkt6cz0009f8wz7fk3cy63","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncs000pgewz2c6d37ty"},{"post_id":"cl3tkt6e4000cf8wzhrmw9i2t","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncv000qgewzf4h1fnbl"},{"post_id":"cl3tkt6d0000af8wz30luhxsw","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncv000rgewz9lovcuje"},{"post_id":"cl3tkt6d1000bf8wz7g729joi","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcncz000sgewzatoth1rh"},{"post_id":"cl3tkt6e8000df8wz93wk0xks","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcnd0000tgewzhhme52wm"},{"post_id":"cl3tkt6eb000ef8wzd0qodmyo","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl3tzcnd0000ugewzeja37j5t"},{"post_id":"cl3tyb7uo0006gewz50wkclwx","category_id":"cl3tzef5q000vgewzh2mu1rqw","_id":"cl3tzef5t000wgewzg5wy3gu7"},{"post_id":"cl3tyb7uq0007gewzdlzn2kow","category_id":"cl3tzef5q000vgewzh2mu1rqw","_id":"cl3tzef5w000xgewzbcglclyk"},{"post_id":"cl3tyev590009gewz054f6x2w","category_id":"cl3tzf800000ygewzg2escnh0","_id":"cl3tzf803000zgewzhc7b4yah"},{"post_id":"cl427l9wa00018owzhlly80ao","category_id":"cl3tzf800000ygewzg2escnh0","_id":"cl427l9we00038owzhsdp8ccn"},{"post_id":"cl444xpwg00048owzas51d4ka","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl444xpwx00058owz9ic3eyud"},{"post_id":"cl54p5wlz0000oawzg1sw3774","category_id":"cl3tyugyr000dgewz98idcdpx","_id":"cl54p5wn20001oawzetgz2sbe"}],"PostTag":[],"Tag":[]}}